{"version":3,"sources":["webpack:///main.js","webpack:///webpack/bootstrap 35c955107fd9a50579a2","webpack:///./src/atom/main.js","webpack:///./src/atom/editor-tools/editor-tools.js","webpack:///external \"path\"","webpack:///./src/atom/core/atomWrapper.js","webpack:///./src/atom/editor-tools/details-view.js","webpack:///external \"atom-ui-lib\"","webpack:///./src/atom/util/ScrollViewUI.js","webpack:///external \"atom-space-pen-views\"","webpack:///./src/atom/editor-tools/details.js","webpack:///./src/atom/editor-tools/detailElements.js","webpack:///external \"underscore\"","webpack:///./src/atom/dialogs/assist-utils.js","webpack:///external \"fs\"","webpack:///./src/atom/core/linter-ui.js","webpack:///./src/atom/util/unit.js","webpack:///external \"basarat-text-buffer\"","webpack:///./src/atom/core/editorManager.js","webpack:///external \"api-language-server\"","webpack:///./src/atom/grammar-detect.js","webpack:///./src/atom/context-menu/contextMenuImpl.js","webpack:///external \"mkdirp\"","webpack:///./src/atom/context-menu/actionUIManager.js","webpack:///./src/atom/context-menu/actions/completeBody/ui.js","webpack:///./src/atom/context-menu/actions/newMethod/ui.js","webpack:///./src/atom/context-menu/actions/simpleAction/ui.js","webpack:///./src/atom/editor-tools/reconciler.js","webpack:///external \"promise-polyfill\"","webpack:///./src/atom/editor-tools/outline-view.js","webpack:///./src/atom/core/markOccurences.js","webpack:///./src/atom/quick-commands/quick-commands.js","webpack:///./src/atom/quick-commands/quick-commands-ui.js","webpack:///./src/atom/quick-commands/code-commands.js","webpack:///./src/atom/suggestion/provider.js","webpack:///./src/atom/core/patchElements.js","webpack:///external \"atom\"","webpack:///./src/atom/quick-commands/command-manager.js","webpack:///./src/atom/context-menu/contextMenu.js","webpack:///external \"atom-package-deps\""],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","package_entry_point","editorTools","quickCommands","provider","decl","linterUI","patchElements","CompositeDisposable","commandManager","contextMenu","contextMenuImpl","activate","state","install","then","subscriptions","add","atom","commands","aml-workbench:editor-tools","initEditorTools","aml-workbench:go-to-definition","gotoDeclaration","aml-workbench:find-usages","findUsages","aml-workbench:rename","renameRAMLElement","aml-workbench:new-project","newProject","workspace","observeTextEditors","handle","doPatch","initialize","registerCommands","initializeActionBasedMenu","getProvider","provideLinter","consumeLinter","linterApi","initEditorObservers","deactivate","dispose","config","grammars","type","default","openConsoleInSplitPane","display","manager","EditorManager","editorToolsStatus","opened","aquireManager","doSplit","value","dir","SplitDirections","RIGHT","newPane","BOTTOM","getActivePane","splitDown","TOP","splitUp","LEFT","splitLeft","splitRight","addItem","Object","defineProperty","path","detailsView","outlineView","ramlServer","markOccurrences","grammarDetect","_this","this","_initialized","updateCount","outlineCount","_cleanOutline","performanceDebug","fire","placeholder","window","onDidChangeActivePaneItem","e","updateEverything","editor","onDidDestroy","getPath","getNodeClientConnection","documentClosed","onDidChangeCursorPosition","event","cursorChanged","newBufferPosition","addAutoCloseListener","addListenersForStructure","prototype","console","log","currentEditor","getCurrentEditor","getCurrentPosition","currentPosition","clearOccurences","buffer","getBuffer","pos","characterIndexForPosition","getCursorBufferPosition","positionChanged","unitPath","internalScheduleUpdateViews","count","setTimeout","updateViews","scheduleViewsUpdate","internalScheduleOutlineUpdate","updateOutline","scheduleOutlineUpdate","onDidDestroyPane","evt","edcount","getPaneItems","filter","undefined","length","global","cleanCache","paneForItem","_view","destroy","_details","getOrCreateView","RamlOutline","setUnit","getDetails","DETAILS_SUPPORT","RamlDetails","updateDetails","update","reparseAST","_path","isETPane","pane","items","getItems","indexOf","aw","fpane","setViewsDisplayStyle","visible","element","style","isRaml","editorPath","extName","extname","getActiveTextEditor","isAppropriateGrammar","patched","addListenersToEditor","positionUpdated","cedit","onDidChange","x","addListenersOnMove","onStructureReport","report","categoryNames","categoryName","structure","push","categoryNamesString","join","debug","movingPane","onDidAddPaneItem","item","getText","moveItemToPane","setActiveItem","setText","text","isFromEdgeRow","currentRow","row","previousRow","getLastRow","ds","Date","getMilliseconds","show","d1","newPosition","isSwaggerJson","isSwaggerYaml","require","open","pathsToOpen","Workspace","callback","onDidOpen","addModalPanel","arg","getActiveEditor","addRightPanel","args","CommandManager","selector","__extends","extendStatics","setPrototypeOf","__proto__","Array","d","b","hasOwnProperty","__","constructor","create","UI","SC","details","reconciler_1","_super","allowStructureChanges","disposables","addClass","connection","onDetailsReport","reconciler","Reconciler","getTitle","attached","innerHTML","_children","container","vc","addChild","ui","appendChild","setResource","detailsNode","context","wasSchema","schemaView","displayEmpty","updateDetailsPanel","clear","_unitPath","_position","oldItem","detach","position","force","uri","localModel","getLatestVersion","latestVersion","version","Scrollable","SpacePenViews","content","v","div","class","tabindex","caption","scroll","top","left","scrollTop","scrollLeft","size","bottom","clientHeight","right","clientWidth","changed","refresh","setParent","_parent","removeChild","child","doRender","innerRenderUI","selfRender","document","createElement","html","start","forEach","el","renderUI","parent","children","isAttached","ScrollView","detailsReport","panel","updateTextOnDone","cfg","l","styles","emitter","handlersByEventName","sadd","concat","sremove","schange","cfgCh","textmateRegistry","addGrammar","updateGrammar","emptyGrammarListeners","nullGrammar","rend","empty","detailElements","buildItem","render","toFocus","field","getActualField","focus","getModel","setCursorBufferPosition","focusedPosition","focusedPropertyName","errLabel","h3","applyStyling","TextClasses","WARNING","setStyle","margin","Error","nodes","Api","properties","actions","Resource","Method","DataElement","Response","filterOut","isUpdateModelRunnable","runnable","getUri","isInstanceOfActionsItem","addNode","isInstanceOfCustomActionsItem","addAction","dialog","root","TopLevelNode","_i","_a","title","_b","_c","childOfChild","buildItemInCategory","error","CheckBoxField","valueText","JSONSchemaField","XMLSchemaField","MarkdownField","options","SelectBox","SimpleMultiEditor","LowLevelTreeField","StructuredField","TypeDisplayItem","TypeSelectBox","ExampleField","XMLExampleField","PropertyEditorInfo","subType","actionItem","findOrCreateActionItemInCategory","customActionItem","findOrCreateCustomActionItemInCategory","addItemToCategory","category","subCategoryByNameOrCreate","actionsItem","ActionsItem","unshift","findActionItemInCategory","customActionsItem","CustomActionsItem","inserterActionsItem","splice","lastSelectedCaption","_","assistUtils","assist_utils_1","contextMenuImpl_1","inRender","UpdateModelRunnable","newValue","cancelled","run","Promise","resolve","changeDetailValue","conflicts","other","cancel","isCanceled","Item","_title","description","listeners","needsSeparateLabel","addListener","r","removeListener","i","setDescription","desc","setTitle","t","name","setError","clearErrors","WrapPanel","setCaption","Category","apply","arguments","plainChildren","categories","it","rr","section","createSection","_result","showDescription","descriptionLabel","label","contributeTop","wrappedChild","createWrappedChild","subCategories","cats","remap","newCats","showHeader","Section","pnl","Panel","TabFolder","tf","Icon","NONE","firstLabel","ep","setOnSelected","selectedComponent","find","rs","errorLabel","BUG","ERROR","hc","setDisplay","result","_options","_panel","n","tabsCount","get","header","setSelectedIndex","documentation","INBOX","SUBTLE","CheckBox2","setLabelWidth","CheckBox","outlineNode","rendered","oldValue","fromEditorToModel","fld","getBinding","detailsChangeRunnable","schedule","changedDocuments","applyChangedDocuments","gotoPosition","toLocalValue","inputValue","toUIValue","fromModelToEditor","set","createField","texfField","trim","MarkdownFieldUI","onchange","setMini","setGrammar","setLabelHeight","setRequired","AtomEditorElement","XMLField","JSONField","select","SelectField","setOptions","TreeField","renderer","node","CIRCUIT_BOARD","HIGHLIGHT","SUCCESS","getChildren","viewer","treeViewer","setInput","tm","button","ButtonSizes","EXTRA_SMALL","ButtonHighlights","INFO","actionID","executeDetailsAction","launchServerActionByID","createRAMLFile","baseUri","sample","raml1","apiLines","typesLines","resourceLines","NewProjectDialog","splitOnLines","lines","match","cleanEmptyLines","activeEditor","bufferPos","positionForCharacterIndex","setSelectedBufferRange","end","offset","openDeclaration","locations","p1","range","p2","revalidate","relint","getEditorByUriOrPath","changedDocuments_1","changedDocument","oldContents","fs","readFileSync","toString","newText","textEdits","textEditProcessor","applyDocumentEdits","writeFileSync","findCurrentName","contents","stopCharacters","beginning","currentOffset","currentChar","charAt","found","stopCharacters_1","stopChar","stopCharacters_2","substring","findUsagesImpl","findReferences","sv","SearchResultView","addBottomPanel","apititle","_raml1","_defStructure","_createSampleResource","sourceValue","generateDefaultProjectParentFolder","fdUtils","getHome","extraContent","s","validateProjectLocation","toValidate","errorStatus","parentDirectory","dirname","existsSync","okStatus","validateTitle","zz","BOOK","pad","LayoutType","BLOCK","statusLabel","slf","CustomField","code","StatusCode","projectLocationInput","addValidator","st","setIcon","message","titleStatusLabel","titleStatusMessage","titleTextField","status","r1","checkBox","setValue","getValue","r2","r3","buttonBar","setPercentWidth","NORMAL","NO_HIGHLIGHT","onOk","createIfNotExist","ps","mkdirSync","load","SEARCH","view","list","location","res","a","y","SMALL","PRIMARY","editorManager","toggleEditorTools","emit","oldText","linter","isRAMLUnit","unitUtils","tabWarnings","textEditor","tab","filePath","trace","column","postPocessError","buffers","reject","readFile","err","data","TextBuffer","clientConnection","debugDetail","traceErrors","tracePromises","map","traceError","all","findAndRemoveExpectedReports","versionLimit","expectedValidationReports","reportExpected","expectedVersion","runValidationSheduleUpdater","documentChanged","latestRecievedReport","issues","lint","promise","errors","promises","tabs","combErrors","warnings","grammarScopes","scope","lintOnFly","api_language_server_1","original","JSON","parse","stringify","newKey","tr","mes","ms","ValidationReportExpected","onValidationReport","pointOfViewUri","expectedReports","expectedReports_1","expectedReport","man","getURI","keys","grammarHandlers","extension","tryUpdateGrammarForLanguage","isUriEndsWith","swagger","toLowerCase","endsWith","grammarId","getGrammar","scopeName","grammarRegistry","grammarForId","registerContributor","contributor","contributors","addMenuItem","onClick","shouldDisplay","deleteMenuItems","deleteMenuItem","calculateMenuItemsTree","contributorId","calculationStarted","contributorPromises","calculateItems","contributorItems","addItemsTreeNode","calculationFinished","roots","currentList","catIndex","currentSegment","existingNode","ContextMenuItemNode","leafNode","index","launchServerAction","action","executeContextActionByID","changes","_loop_1","change","editorFound_1","getTextEditors","mkdirp","sync","pathModule","changes_1","editorContextMenuContributor","handleActionUI","configureServerActions","actionBasedMenuInitialized","onDisplayActionUI","uiDisplayRequest","actionUI","actionUIManager","getUICode","IDE","uilibsModule","UIBuilder","uiBuilder","initialUIState","setServerConfiguration","actionsConfiguration","enableUIActions","menuItem","nameOverride","completeBodyUI","newMethodUI","simpleActionUi","generateSchema","mediaType","generator","JsonSchemaGenerator","obj","schemaObject","schemaString","FillBodyDialog","getResult","sch","pass","property","valueType","detectType","isArray","passArray","passObject","registerProperty","propName","array","itemSet","needXML","needJSON","jsexample","xmlexample","xmlschema","jsschema","resultPromise","updateButtons","createButton","setDisabled","em","HighLightClasses","createTextSection","te","lang","hs","setId","ts","_dialog","onDone","stretch","_dialog2","isPrimary","highlight","reverse","_closeDialog","addStatusListener","_dialogPanels","eventListener","parentElement","height","body","getComputedStyle","parseFloat","overflowY","addEventListener","mdp","removeEventListener","pop","newMethod","inputState","method","mdesc","methodDescriptions","cdesc","statusCodeDescriptions","NO_RESPONCE","NO_RESPONCE_BT","bodyType","mdescLabel","LabelField","cdescLabel","methodSelect","responseSelect","responseTypeSelect","typeOfValue","realBodyType","bodyTypeSelect","bodyTypeOfValue","actualType","bodyTypeString","__ret","typeValues","isSchema","types","responseSection","savedResolve","savedReject","CODE","initialState","isParentNull","canceled","detailsTree","simpleModalDialog","PromiseConstructor","logger","timeout","waitingList","runningList","addToWaitingList","removeFromWaitingList","currentlyRunning","findConflictingInRunningList","addToRunningList","removeFromRunningList","current","fullStructurePath","model","simpleTree","input","selectionListener","opener","HLRenderer","setBasicLabelFunction","setKeyProvider","key","addSelectionListener","createTree","resourcesModel","StructureCategories","ResourcesCategory","typesModel","SchemasAndTypesCategory","traitsModel","ResourceTypesAndTraitsCategory","otherModel","OtherCategory","outline","selectionChanged","schemas","folder","selectedTab","selection","getSelection","elements","SelectionChangedEvent","customizePanel","_rs","sender","_viewers","getNodePType","setSelection","_selectedNode","structurePromise","getStructure","catch","attach","_isAttached","$this","$","outerHTML","forEachViewer","command","HLNodeType","iconNameToIconEnum","iconName","textHighlightNameToTextClass","highlightName","icon","DASH","highLight","textStyle","typeText","ARROW_SMALL_LEFT","markOccurences","occurences","layer","getOccurencesLayer","occurence","markBufferRange","decorateMarkerLayer","layerId","occurencesLayerId","getMarkerLayer","addMarkerLayer","MarkOccurrenceRunnable","runSynchronously","getMarkOccurrencesPath","otherPath","cm","showCommands","cc","registerQuickCommands","et","qcui","QuickCommand","priority","when","registerAsAtomCommand","target","atomCommand","disposed","unregister","SelectListView","register","cmd","qcmd","atomTarget","predicate","joinedCommands","commandId","getDynamicCommands","currentCommand","sort","aspv","_confirmed","filterKey","getFilterKey","viewForItem","hide","confirmed","getSelectedItemView","storeFocusedElement","setItems","focusFilterEditor","onDidInsertSuggestion","triggerPosition","suggestion","annotation","txt","newPos","insert","replacementPrefix","extra","getSuggestions","request","bufferPosition","disableForSelector","filterSuggestions","inclusionPriority","excludeLowerPriority","oldRegister","registerElement","proto","oldAttachedCallback","attachedCallback","addCommand","callBack","tag","listCommands","disposable","commandInfo","commandIdToCommandInfo","tagCommands","tagToCommands","deleteUnmanagedCommand","registeredCommands","selectorBasedListenersByCommandName","deleteManagedCommand","infoIndex","currentInfo","deleteCommandsByTag","commandName","initialized","packages","activatePackage","listener","prePanelDisplay","listenersArray","didDispatch","sequenceNumber","DYNAMIC_COMMAND_TAG","originalShowForEvent","showForEvent","preMenuDisplay","postMenuDisplay","treeRoots","nodeSets","cleanExistingSets","findOrCreateItemSet","constructAtomMenuItem","submenu","childMenuItem","existingSet","itemSets","currentSet","DYNAMIC_SET_TAG","specificity","usedSelectors","existingSets"],"mappings":"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","file":"main.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../typings/main.d.ts\" />\n\tvar editorTools = __webpack_require__(1);\n\tvar quickCommands = __webpack_require__(29);\n\tvar provider = __webpack_require__(32);\n\tvar decl = __webpack_require__(11);\n\tvar linterUI = __webpack_require__(13);\n\tvar patchElements = __webpack_require__(33);\n\tvar CompositeDisposable = __webpack_require__(34).CompositeDisposable;\n\t// import sharedASTInitializer = require(\"./shared-ast-initializer\")\n\tvar commandManager = __webpack_require__(35);\n\tvar contextMenu = __webpack_require__(36);\n\t// import quickFixActions = require(\"./context-menu/quickFix\")\n\t// import actions = require(\"./context-menu/actions\")\n\tvar contextMenuImpl = __webpack_require__(19);\n\tvar package_entry_point;\n\t(function (package_entry_point) {\n\t    var subscriptions = new CompositeDisposable();\n\t    function activate(state) {\n\t        __webpack_require__(37).install('aml-workbench', true)\n\t            .then(function () {\n\t            subscriptions.add(atom.commands.add('atom-workspace', {\n\t                /*'api-workbench:popular-apis': apiList.showPopularApis,*/\n\t                'aml-workbench:editor-tools': editorTools.initEditorTools,\n\t                /*'api-workbench:console': Console.toggle,*/\n\t                'aml-workbench:go-to-definition': decl.gotoDeclaration,\n\t                'aml-workbench:find-usages': decl.findUsages,\n\t                /*'api-workbench:quick-outline':quickOutline.show,\n\t                'api-workbench:quick-commands': quickCommands.showCommands,*/\n\t                'aml-workbench:rename': decl.renameRAMLElement,\n\t                'aml-workbench:new-project': decl.newProject,\n\t            }));\n\t            subscriptions.add(atom.workspace.observeTextEditors(__webpack_require__(18).handle));\n\t            //subscriptions.add(atom.workspace.addOpener(Console.opener))\n\t            ////subscriptions.add(atom.workspace.addOpener(RamlScriptReport.opener))\n\t            patchElements.doPatch();\n\t            commandManager.initialize();\n\t            contextMenu.initialize();\n\t            // sharedASTInitializer.initialize()\n\t            quickCommands.registerCommands();\n\t            // quickFixActions.initialize()\n\t            // actions.register();\n\t            editorTools.initEditorTools();\n\t            contextMenuImpl.initializeActionBasedMenu('atom-text-editor[data-grammar=\"source raml\"],.raml-outline');\n\t        });\n\t    }\n\t    package_entry_point.activate = activate;\n\t    function getProvider() {\n\t        return provider;\n\t    }\n\t    package_entry_point.getProvider = getProvider;\n\t    function provideLinter() {\n\t        return linterUI;\n\t    }\n\t    package_entry_point.provideLinter = provideLinter;\n\t    function consumeLinter(linterApi) {\n\t        subscriptions.add(linterUI.initEditorObservers(linterApi));\n\t    }\n\t    package_entry_point.consumeLinter = consumeLinter;\n\t    function deactivate() {\n\t        subscriptions.dispose();\n\t    }\n\t    package_entry_point.deactivate = deactivate;\n\t    package_entry_point.config = {\n\t        grammars: {\n\t            type: 'array',\n\t            default: [\n\t                'source.raml', 'source.syaml', 'source.sjson'\n\t            ]\n\t        },\n\t        openConsoleInSplitPane: {\n\t            type: 'boolean',\n\t            default: true\n\t        }\n\t    };\n\t})(package_entry_point || (package_entry_point = {}));\n\tmodule.exports = package_entry_point;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGdEQUFnRDtBQUtoRCx5REFBeUQ7QUFDekQsK0RBQWlFO0FBQ2pFLGdEQUFnRDtBQUVoRCw2Q0FBNkM7QUFDN0MsMkNBQTJDO0FBQzNDLG9EQUFvRDtBQUNwRCxJQUFJLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQztBQUM5RCxvRUFBb0U7QUFDcEUsaUVBQW1FO0FBQ25FLHdEQUEwRDtBQUMxRCw4REFBOEQ7QUFDOUQscURBQXFEO0FBQ3JELGdFQUFrRTtBQUVsRSxJQUFPLG1CQUFtQixDQXVFekI7QUF2RUQsV0FBTyxtQkFBbUI7SUFFdEIsSUFBSSxhQUFhLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFBO0lBRTdDLGtCQUEwQixLQUFLO1FBQzNCLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDO2FBQ3RELElBQUksQ0FBQztZQUNGLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ2xELDBEQUEwRDtnQkFDMUQsNEJBQTRCLEVBQUMsV0FBVyxDQUFDLGVBQWU7Z0JBQ3hELDRDQUE0QztnQkFDNUMsZ0NBQWdDLEVBQUMsSUFBSSxDQUFDLGVBQWU7Z0JBQ3JELDJCQUEyQixFQUFDLElBQUksQ0FBQyxVQUFVO2dCQUMzQzs2RUFDNkQ7Z0JBQzdELHNCQUFzQixFQUFDLElBQUksQ0FBQyxpQkFBaUI7Z0JBQzdDLDJCQUEyQixFQUFDLElBQUksQ0FBQyxVQUFVO2FBRzlDLENBQUMsQ0FBQyxDQUFDO1lBRUosYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFFekYsNkRBQTZEO1lBQzdELHdFQUF3RTtZQUV4RSxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7WUFFeEIsY0FBYyxDQUFDLFVBQVUsRUFBRSxDQUFBO1lBQzNCLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtZQUN4QixvQ0FBb0M7WUFFcEMsYUFBYSxDQUFDLGdCQUFnQixFQUFFLENBQUE7WUFDaEMsK0JBQStCO1lBQy9CLHNCQUFzQjtZQUV0QixXQUFXLENBQUMsZUFBZSxFQUFFLENBQUE7WUFFN0IsZUFBZSxDQUFDLHlCQUF5QixDQUFDLDREQUE0RCxDQUFDLENBQUE7UUFDM0csQ0FBQyxDQUFDLENBQUE7SUFDVixDQUFDO0lBcENlLDRCQUFRLFdBb0N2QixDQUFBO0lBR0Q7UUFDSSxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFGZSwrQkFBVyxjQUUxQixDQUFBO0lBRUQ7UUFDSSxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFGZSxpQ0FBYSxnQkFFNUIsQ0FBQTtJQUVELHVCQUE4QixTQUFTO1FBQ25DLGFBQWEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUZlLGlDQUFhLGdCQUU1QixDQUFBO0lBRUQ7UUFDSSxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDM0IsQ0FBQztJQUZlLDhCQUFVLGFBRXpCLENBQUE7SUFFVSwwQkFBTSxHQUFHO1FBQ2hCLFFBQVEsRUFBRTtZQUNOLElBQUksRUFBRSxPQUFPO1lBQ2IsT0FBTyxFQUFFO2dCQUNMLGFBQWEsRUFBRSxjQUFjLEVBQUUsY0FBYzthQUNoRDtTQUNKO1FBQ0Qsc0JBQXNCLEVBQUU7WUFDcEIsSUFBSSxFQUFFLFNBQVM7WUFDZixPQUFPLEVBQUUsSUFBSTtTQUNoQjtLQUNKLENBQUE7QUFDTCxDQUFDLEVBdkVNLG1CQUFtQixLQUFuQixtQkFBbUIsUUF1RXpCO0FBQ0QsaUJBQVEsbUJBQW1CLENBQUEiLCJmaWxlIjoic3JjL2F0b20vbWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL21haW4uZC50c1wiIC8+XG5cbi8vIGltcG9ydCBDb25zb2xlID0gcmVxdWlyZSgnLi9jb25zb2xlL2luZGV4Jyk7XG5pbXBvcnQgYXBpTGlzdCA9IHJlcXVpcmUoJy4vcG9wdWxhci1hcGlzL3BvcHVsYXItYXBpcycpO1xuaW1wb3J0IGpRdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuaW1wb3J0IGVkaXRvclRvb2xzPXJlcXVpcmUoJy4vZWRpdG9yLXRvb2xzL2VkaXRvci10b29scycpXG5pbXBvcnQgcXVpY2tDb21tYW5kcyA9IHJlcXVpcmUoJy4vcXVpY2stY29tbWFuZHMvcXVpY2stY29tbWFuZHMnKVxuaW1wb3J0IHByb3ZpZGVyPXJlcXVpcmUoXCIuL3N1Z2dlc3Rpb24vcHJvdmlkZXJcIilcbmltcG9ydCBxdWlja091dGxpbmU9cmVxdWlyZShcIi4vcXVpY2stb3V0bGluZS9xdWljay1vdXRsaW5lXCIpXG5pbXBvcnQgZGVjbD1yZXF1aXJlKFwiLi9kaWFsb2dzL2Fzc2lzdC11dGlsc1wiKVxuaW1wb3J0IGxpbnRlclVJPXJlcXVpcmUoXCIuL2NvcmUvbGludGVyLXVpXCIpXG5pbXBvcnQgcGF0Y2hFbGVtZW50cz1yZXF1aXJlKFwiLi9jb3JlL3BhdGNoRWxlbWVudHNcIilcbnZhciBDb21wb3NpdGVEaXNwb3NhYmxlID0gcmVxdWlyZSgnYXRvbScpLkNvbXBvc2l0ZURpc3Bvc2FibGU7XG4vLyBpbXBvcnQgc2hhcmVkQVNUSW5pdGlhbGl6ZXIgPSByZXF1aXJlKFwiLi9zaGFyZWQtYXN0LWluaXRpYWxpemVyXCIpXG5pbXBvcnQgY29tbWFuZE1hbmFnZXIgPSByZXF1aXJlKFwiLi9xdWljay1jb21tYW5kcy9jb21tYW5kLW1hbmFnZXJcIilcbmltcG9ydCBjb250ZXh0TWVudSA9IHJlcXVpcmUoXCIuL2NvbnRleHQtbWVudS9jb250ZXh0TWVudVwiKVxuLy8gaW1wb3J0IHF1aWNrRml4QWN0aW9ucyA9IHJlcXVpcmUoXCIuL2NvbnRleHQtbWVudS9xdWlja0ZpeFwiKVxuLy8gaW1wb3J0IGFjdGlvbnMgPSByZXF1aXJlKFwiLi9jb250ZXh0LW1lbnUvYWN0aW9uc1wiKVxuaW1wb3J0IGNvbnRleHRNZW51SW1wbCA9IHJlcXVpcmUoXCIuL2NvbnRleHQtbWVudS9jb250ZXh0TWVudUltcGxcIilcblxubW9kdWxlIHBhY2thZ2VfZW50cnlfcG9pbnQge1xuXG4gICAgdmFyIHN1YnNjcmlwdGlvbnMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG5cbiAgICBleHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUgKHN0YXRlKSB7XG4gICAgICAgIHJlcXVpcmUoJ2F0b20tcGFja2FnZS1kZXBzJykuaW5zdGFsbCgnYW1sLXdvcmtiZW5jaCcsIHRydWUpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5hZGQoYXRvbS5jb21tYW5kcy5hZGQoJ2F0b20td29ya3NwYWNlJywge1xuICAgICAgICAgICAgICAgICAgICAvKidhcGktd29ya2JlbmNoOnBvcHVsYXItYXBpcyc6IGFwaUxpc3Quc2hvd1BvcHVsYXJBcGlzLCovXG4gICAgICAgICAgICAgICAgICAgICdhbWwtd29ya2JlbmNoOmVkaXRvci10b29scyc6ZWRpdG9yVG9vbHMuaW5pdEVkaXRvclRvb2xzLFxuICAgICAgICAgICAgICAgICAgICAvKidhcGktd29ya2JlbmNoOmNvbnNvbGUnOiBDb25zb2xlLnRvZ2dsZSwqL1xuICAgICAgICAgICAgICAgICAgICAnYW1sLXdvcmtiZW5jaDpnby10by1kZWZpbml0aW9uJzpkZWNsLmdvdG9EZWNsYXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgJ2FtbC13b3JrYmVuY2g6ZmluZC11c2FnZXMnOmRlY2wuZmluZFVzYWdlcyxcbiAgICAgICAgICAgICAgICAgICAgLyonYXBpLXdvcmtiZW5jaDpxdWljay1vdXRsaW5lJzpxdWlja091dGxpbmUuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgJ2FwaS13b3JrYmVuY2g6cXVpY2stY29tbWFuZHMnOiBxdWlja0NvbW1hbmRzLnNob3dDb21tYW5kcywqL1xuICAgICAgICAgICAgICAgICAgICAnYW1sLXdvcmtiZW5jaDpyZW5hbWUnOmRlY2wucmVuYW1lUkFNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICdhbWwtd29ya2JlbmNoOm5ldy1wcm9qZWN0JzpkZWNsLm5ld1Byb2plY3QsXG4gICAgICAgICAgICAgICAgICAgIC8qJ2FwaS13b3JrYmVuY2g6c2VsZWN0LW5vZGUnOmRlY2wuc2VsZWN0LCovXG4gICAgICAgICAgICAgICAgICAgIC8qJ2FwaS13b3JrYmVuY2g6cmV2YWxpZGF0ZSc6ZGVjbC5yZXZhbGlkYXRlKi9cbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25zLmFkZChhdG9tLndvcmtzcGFjZS5vYnNlcnZlVGV4dEVkaXRvcnMocmVxdWlyZShcIi4vZ3JhbW1hci1kZXRlY3RcIikuaGFuZGxlKSk7XG5cbiAgICAgICAgICAgICAgICAvL3N1YnNjcmlwdGlvbnMuYWRkKGF0b20ud29ya3NwYWNlLmFkZE9wZW5lcihDb25zb2xlLm9wZW5lcikpXG4gICAgICAgICAgICAgICAgLy8vL3N1YnNjcmlwdGlvbnMuYWRkKGF0b20ud29ya3NwYWNlLmFkZE9wZW5lcihSYW1sU2NyaXB0UmVwb3J0Lm9wZW5lcikpXG5cbiAgICAgICAgICAgICAgICBwYXRjaEVsZW1lbnRzLmRvUGF0Y2goKTtcblxuICAgICAgICAgICAgICAgIGNvbW1hbmRNYW5hZ2VyLmluaXRpYWxpemUoKVxuICAgICAgICAgICAgICAgIGNvbnRleHRNZW51LmluaXRpYWxpemUoKVxuICAgICAgICAgICAgICAgIC8vIHNoYXJlZEFTVEluaXRpYWxpemVyLmluaXRpYWxpemUoKVxuXG4gICAgICAgICAgICAgICAgcXVpY2tDb21tYW5kcy5yZWdpc3RlckNvbW1hbmRzKClcbiAgICAgICAgICAgICAgICAvLyBxdWlja0ZpeEFjdGlvbnMuaW5pdGlhbGl6ZSgpXG4gICAgICAgICAgICAgICAgLy8gYWN0aW9ucy5yZWdpc3RlcigpO1xuXG4gICAgICAgICAgICAgICAgZWRpdG9yVG9vbHMuaW5pdEVkaXRvclRvb2xzKClcblxuICAgICAgICAgICAgICAgIGNvbnRleHRNZW51SW1wbC5pbml0aWFsaXplQWN0aW9uQmFzZWRNZW51KCdhdG9tLXRleHQtZWRpdG9yW2RhdGEtZ3JhbW1hcj1cInNvdXJjZSByYW1sXCJdLC5yYW1sLW91dGxpbmUnKVxuICAgICAgICAgICAgfSlcbiAgICB9XG5cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRQcm92aWRlcigpe1xuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVMaW50ZXIoKXtcbiAgICAgICAgcmV0dXJuIGxpbnRlclVJO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBjb25zdW1lTGludGVyKGxpbnRlckFwaSkge1xuICAgICAgICBzdWJzY3JpcHRpb25zLmFkZChsaW50ZXJVSS5pbml0RWRpdG9yT2JzZXJ2ZXJzKGxpbnRlckFwaSkpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlKCl7XG4gICAgICAgIHN1YnNjcmlwdGlvbnMuZGlzcG9zZSgpXG4gICAgfVxuXG4gICAgZXhwb3J0IHZhciBjb25maWcgPSB7XG4gICAgICAgIGdyYW1tYXJzOiB7XG4gICAgICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICAgICAgZGVmYXVsdDogW1xuICAgICAgICAgICAgICAgICdzb3VyY2UucmFtbCcsICdzb3VyY2Uuc3lhbWwnLCAnc291cmNlLnNqc29uJ1xuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBvcGVuQ29uc29sZUluU3BsaXRQYW5lOiB7XG4gICAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgPXBhY2thZ2VfZW50cnlfcG9pbnRcbiJdfQ==\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar path = __webpack_require__(2);\n\tvar atom = __webpack_require__(3);\n\tvar detailsView = __webpack_require__(4);\n\tvar outlineView = __webpack_require__(27);\n\tvar ramlServer = __webpack_require__(17);\n\tvar markOccurrences = __webpack_require__(28);\n\tvar grammarDetect = __webpack_require__(18);\n\tvar _bmc = 0;\n\tfunction benchmark(func) {\n\t    var t0 = new Date().getTime();\n\t    if (_bmc != 0 && func)\n\t        console.log(func + \" took \" + (t0 - _bmc) + \" miliseconds.\");\n\t    _bmc = t0;\n\t}\n\tvar EditorManager = /** @class */ (function () {\n\t    function EditorManager(display) {\n\t        if (display === void 0) { display = true; }\n\t        var _this = this;\n\t        this._initialized = false;\n\t        this.opened = false;\n\t        this.updateCount = 0;\n\t        this.outlineCount = 0;\n\t        this._cleanOutline = false;\n\t        this.performanceDebug = true;\n\t        this.fire = true;\n\t        this.placeholder = false;\n\t        manager = window[\"manager\"] = this;\n\t        //this.markOccurrencesReconciler = new ramlServer.Reconciler(ramlServer.getNodeClientConnection(), 200);\n\t        atom.workspace.onDidChangeActivePaneItem(function (e) { return _this.updateEverything(display); });\n\t        atom.workspace.observeTextEditors(function (editor) {\n\t            editor.onDidDestroy(function () {\n\t                var path = editor.getPath();\n\t                ramlServer.getNodeClientConnection().documentClosed(path);\n\t            });\n\t            editor.onDidChangeCursorPosition(function (event) { return _this.cursorChanged(editor, event.newBufferPosition); });\n\t        });\n\t        this.updateEverything(display);\n\t        this.addAutoCloseListener();\n\t        this.addListenersForStructure();\n\t    }\n\t    EditorManager.prototype.getPath = function () {\n\t        console.log(\"ETM::GetPath\");\n\t        return this.currentEditor ? this.currentEditor.getPath() : null;\n\t    };\n\t    EditorManager.prototype.getCurrentEditor = function () { return this.currentEditor; };\n\t    EditorManager.prototype.getCurrentPosition = function () {\n\t        return this.currentPosition;\n\t    };\n\t    EditorManager.prototype.cursorChanged = function (editor, newBufferPosition) {\n\t        markOccurrences.clearOccurences(editor);\n\t        //this.markOccurrencesReconciler.schedule(new markOccurrences.MarkOccurrenceRunnable(editor, newBufferPosition));\n\t        var buffer = editor.getBuffer();\n\t        var pos = buffer.characterIndexForPosition(editor.getCursorBufferPosition());\n\t        ramlServer.getNodeClientConnection().positionChanged(manager.unitPath, pos);\n\t        this.currentPosition = pos;\n\t    };\n\t    EditorManager.prototype.internalScheduleUpdateViews = function (count) {\n\t        var _this = this;\n\t        this.updateCount = count;\n\t        setTimeout(function () {\n\t            if (_this.updateCount == count) {\n\t                _this.updateViews();\n\t            }\n\t        }, 500);\n\t    };\n\t    EditorManager.prototype.scheduleViewsUpdate = function () {\n\t        if (this.fire) {\n\t            this.internalScheduleUpdateViews(this.updateCount + 1);\n\t        }\n\t    };\n\t    EditorManager.prototype.internalScheduleOutlineUpdate = function (count) {\n\t        var _this = this;\n\t        this.outlineCount = count;\n\t        setTimeout(function () {\n\t            if (_this.outlineCount == count) {\n\t                _this.updateOutline();\n\t            }\n\t        }, 500);\n\t    };\n\t    EditorManager.prototype.scheduleOutlineUpdate = function () {\n\t        this.internalScheduleOutlineUpdate(this.outlineCount + 1);\n\t    };\n\t    EditorManager.prototype.addAutoCloseListener = function () {\n\t        var _this = this;\n\t        atom.workspace.onDidDestroyPane(function (evt) {\n\t            try {\n\t                var edcount = atom.workspace.getPaneItems().filter(function (e) {\n\t                    return e['softTabs'] != undefined;\n\t                }).length;\n\t                if (edcount == 0) {\n\t                    // this.ast=null;\n\t                    // this.unit=null;\n\t                    // this._currentNode=null;\n\t                    _this.currentEditor = null;\n\t                    if (global.cleanCache) {\n\t                        global.cleanCache();\n\t                    }\n\t                    if (atom.workspace.paneForItem(_this._view))\n\t                        atom.workspace.paneForItem(_this._view).destroy();\n\t                    if (atom.workspace.paneForItem(_this._details))\n\t                        atom.workspace.paneForItem(_this._details).destroy();\n\t                    _this.opened = false;\n\t                }\n\t            }\n\t            catch (e) {\n\t                //TODO REMOVE IT LATER WE NEED TO BE PRETy DEFENSIVE AT THIS MOMENT\n\t                console.log(e);\n\t            }\n\t        });\n\t    };\n\t    EditorManager.prototype.getOrCreateView = function () {\n\t        if (!this._view) {\n\t            this._view = new outlineView.RamlOutline();\n\t            if (this.unitPath) {\n\t                this._view.setUnit(this.unitPath);\n\t            }\n\t            // if (this.ast){\n\t            //     this._view.setUnit(this.ast);\n\t            // }\n\t        }\n\t        return this._view;\n\t    };\n\t    EditorManager.prototype.getDetails = function () {\n\t        if (!EditorManager.DETAILS_SUPPORT)\n\t            return null;\n\t        if (!this._details)\n\t            this._details = new detailsView.RamlDetails();\n\t        return this._details;\n\t    };\n\t    EditorManager.prototype.updateDetails = function () {\n\t        this.getDetails().update();\n\t    };\n\t    EditorManager.prototype.reparseAST = function () {\n\t        if (this.currentEditor) {\n\t            var _path = this.currentEditor.getPath();\n\t            var bf = this.currentEditor.getBuffer();\n\t            this.unitPath = _path;\n\t            // var prj = project.createProject(path.dirname(_path));\n\t            // var unit = prj.setCachedUnitContent(path.basename(_path), this.currentEditor.getBuffer().getText());\n\t            //\n\t            // unit.project().addTextChangeListener(delta=>{\n\t            //     if (delta.unit!=unit){\n\t            //         return;\n\t            //     }\n\t            //     var cm=delta.offset;\n\t            //     var end=delta.replacementLength;\n\t            //     var text=delta.text;\n\t            //     var buffer=(<atom.IBuffer>this.currentEditor.getBuffer());\n\t            //     var start=buffer.positionForCharacterIndex(cm);\n\t            //     var endPosition=buffer.positionForCharacterIndex(cm+end);\n\t            //     try {\n\t            //         this.fire=false;\n\t            //         (<any>buffer).setTextInRange({start: start, end: endPosition}, text);\n\t            //         this.scheduleOutlineUpdate();\n\t            //     } finally{\n\t            //         this.fire=true;\n\t            //     }\n\t            // });\n\t            // this.ast = unit.highLevel();\n\t            // this.unit = unit;\n\t        }\n\t    };\n\t    EditorManager.prototype.isETPane = function (pane) {\n\t        if (!this._view) {\n\t            return;\n\t        }\n\t        var items = pane.getItems();\n\t        return ((EditorManager.DETAILS_SUPPORT && items.indexOf(this.getDetails()) >= 0)\n\t            || items.indexOf(this._view) >= 0);\n\t    };\n\t    EditorManager.prototype.display = function () {\n\t        console.log(\"ETM::Display\");\n\t        var aw = atom.workspace;\n\t        var fpane = atom.workspace.paneForItem(this.getCurrentEditor());\n\t        if (!fpane)\n\t            return;\n\t        if (!aw.paneForItem(this.getOrCreateView()))\n\t            doSplit(this.getOrCreateView());\n\t        if (EditorManager.DETAILS_SUPPORT) {\n\t            if (!aw.paneForItem(manager.getDetails()))\n\t                doSplit(this.getDetails(), SplitDirections.BOTTOM);\n\t        }\n\t        this.opened = true;\n\t    };\n\t    // updateText(node?: ll.ILowLevelASTNode) {\n\t    //     this.fire = false;\n\t    //     var editor = this.currentEditor;\n\t    //     var pos = node ? editor.getBuffer().positionForCharacterIndex(node.start()) : null;\n\t    //     editor.setText(this.unit.contents());\n\t    //     this.fire = true;\n\t    //     if (pos) (<any>editor).setCursorBufferPosition(pos);\n\t    // }\n\t    // selectNode(hnode: hl.IHighLevelNode) {\n\t    //     var node = hnode.lowLevel();\n\t    //     if (!node) return;\n\t    //     var editor = this.currentEditor;\n\t    //     if (!editor) return;\n\t    //     var pos = node ? editor.getBuffer().positionForCharacterIndex(node.start()) : null;\n\t    //     if (pos) (<any>editor).setCursorBufferPosition(pos);\n\t    // }\n\t    EditorManager.prototype.setViewsDisplayStyle = function (visible) {\n\t        if (this._details && this._details.element) {\n\t            this._details.element.style.display = visible ? null : \"none\";\n\t        }\n\t        if (this._view && this._view.element) {\n\t            this._view.element.style.display = visible ? null : \"none\";\n\t        }\n\t    };\n\t    EditorManager.prototype.isRaml = function (editor) {\n\t        if (!editor) {\n\t            return false;\n\t        }\n\t        var editorPath = editor.getPath();\n\t        if (!editorPath) {\n\t            return false;\n\t        }\n\t        var extName = path.extname(editorPath);\n\t        if (extName !== '.raml' && extName !== '.yaml') {\n\t            return false;\n\t        }\n\t        return true;\n\t    };\n\t    EditorManager.prototype.updateEverything = function (display) {\n\t        if (display === void 0) { display = true; }\n\t        var editor = atom.workspace.getActiveTextEditor();\n\t        if (editor) {\n\t            this.setViewsDisplayStyle(this.isAppropriateGrammar(editor));\n\t        }\n\t        if (!editor || editor == this.currentEditor || !this.isAppropriateGrammar(editor)) {\n\t            return;\n\t        }\n\t        this.currentEditor = editor;\n\t        if (this.opened == false && display)\n\t            this.display();\n\t        //we are not listening to the editor changes any more,\n\t        //instead we are listening to the reports of the server that something is avilable, like the structure\n\t        if (!editor.patched) {\n\t            this.addListenersToEditor(editor);\n\t        }\n\t        this.reparseAST();\n\t        var pos = editor.getBuffer().characterIndexForPosition(editor.getCursorBufferPosition());\n\t        this.positionUpdated(pos);\n\t        this.scheduleViewsUpdate();\n\t    };\n\t    EditorManager.prototype.addListenersToEditor = function (cedit) {\n\t        var _this = this;\n\t        var buffer = cedit.getBuffer();\n\t        buffer.onDidChange(function (x) {\n\t            try {\n\t                //this.reparseAST();\n\t                var pos = buffer.characterIndexForPosition(cedit.getCursorBufferPosition());\n\t                _this.positionUpdated(pos);\n\t                //this.scheduleViewsUpdate();\n\t            }\n\t            catch (e) {\n\t                console.log(e);\n\t            }\n\t        });\n\t        //updating ast node on position change\n\t        // cedit.getLastCursor().onDidChangePosition(x=> {\n\t        //     if (!this.fire) return;\n\t        //     this.positionUpdated(buffer.characterIndexForPosition(cedit.getCursorBufferPosition()));\n\t        //     this.scheduleViewsUpdate();\n\t        // });\n\t        this.addListenersOnMove(cedit);\n\t        this.currentEditor.patched = true;\n\t    };\n\t    EditorManager.prototype.addListenersForStructure = function () {\n\t        var _this = this;\n\t        ramlServer.getNodeClientConnection().onStructureReport(function (report) {\n\t            var categoryNames = [];\n\t            for (var categoryName in report.structure)\n\t                categoryNames.push(categoryName);\n\t            var categoryNamesString = categoryNames.join();\n\t            ramlServer.getNodeClientConnection().debug(\"Got new structure report with categories \"\n\t                + categoryNamesString, \"EditorManager\", \"addListenersForStructure\");\n\t            var editor = atom.workspace.getActiveTextEditor();\n\t            if (!editor || !_this.isAppropriateGrammar(editor)) {\n\t                return;\n\t            }\n\t            _this.updateOutline();\n\t        });\n\t    };\n\t    EditorManager.prototype.addListenersOnMove = function (cedit) {\n\t        var _this = this;\n\t        var movingPane = false;\n\t        atom.workspace.onDidAddPaneItem(function (event) {\n\t            if (movingPane || _this.isETPane(event.pane) == false || (event.item && !event.item.getText && event.item == _this.getOrCreateView()) || (EditorManager.DETAILS_SUPPORT && event.item == _this.getDetails()))\n\t                return event;\n\t            setTimeout(function () {\n\t                try {\n\t                    var fpane = atom.workspace.paneForItem(cedit);\n\t                    if (fpane) {\n\t                        movingPane = true;\n\t                        event.pane.moveItemToPane(event.item, fpane, null);\n\t                        movingPane = false;\n\t                        fpane.setActiveItem(event.item);\n\t                        fpane.activate();\n\t                    }\n\t                }\n\t                catch (e) {\n\t                    //TODO REMOVE IT LATER WE NEED TO BE PRETy DEFENSIVE AT THIS MOMENT\n\t                    console.log(e);\n\t                }\n\t            }, 18);\n\t        });\n\t    };\n\t    // _currentNode: hl.IHighLevelNode;\n\t    // //_selectedNode: hl.IHighLevelNode;\n\t    // patchCurrentNode(n:hl.IHighLevelNode){\n\t    //     this._currentNode=n;\n\t    // }\n\t    //\n\t    // getCurrentNode() {\n\t    //     if (this._currentNode == null) return this._currentNode = this.ast;\n\t    //     else return this._currentNode;\n\t    // }\n\t    // setSelectedNode(node: hl.IHighLevelNode) {\n\t    //     //this._selectedNode = node;\n\t    //\n\t    //     if (this.unit){\n\t    //         var unitPath=this.unit.absolutePath();\n\t    //         while (node.lowLevel().unit().absolutePath()!=unitPath){\n\t    //             if (!node.parent()){\n\t    //                 break;\n\t    //             }\n\t    //             else{\n\t    //                 node=node.parent();\n\t    //             }\n\t    //         }\n\t    //     }\n\t    //     var id=node.id();\n\t    //     var anode=this.ast.findById(id);\n\t    //     if (anode){\n\t    //         node=anode;\n\t    //     }\n\t    //     if (this._details){\n\t    //         this._details.show(node);\n\t    //     }\n\t    //     var editor = this.getCurrentEditor();\n\t    //     if (editor) {\n\t    //         this.fire=false;\n\t    //         try {\n\t    //             var buffer = editor.getBuffer();\n\t    //             var posStart = buffer.positionForCharacterIndex(node.lowLevel().start());\n\t    //             var posEnd = buffer.positionForCharacterIndex(node.lowLevel().end());\n\t    //             editor.setCursorBufferPosition(posStart);\n\t    //             this.positionUpdated(buffer.characterIndexForPosition(editor.getCursorBufferPosition()));\n\t    //         }finally{\n\t    //             this.fire=true;\n\t    //         }\n\t    //     }\n\t    // }\n\t    // getSelectedNode() {\n\t    //     return this.getCurrentNode()\n\t    //     //else return this._selectedNode;\n\t    // }\n\t    EditorManager.prototype.setText = function (text) {\n\t        console.log(\"ETM::SetText\");\n\t        var editor = this.currentEditor;\n\t        if (editor == null)\n\t            return;\n\t        editor.setText(text);\n\t    };\n\t    EditorManager.prototype.isFromEdgeRow = function () {\n\t        var editor = this.getCurrentEditor();\n\t        if (!editor) {\n\t            return false;\n\t        }\n\t        var currentPosition = editor.getCursorBufferPosition();\n\t        if (!currentPosition) {\n\t            return false;\n\t        }\n\t        var currentRow = currentPosition.row;\n\t        var previousRow = editor.previousRow;\n\t        editor.previousRow = currentRow;\n\t        if (previousRow === undefined) {\n\t            return false;\n\t        }\n\t        if (previousRow === currentRow) {\n\t            return false;\n\t        }\n\t        if (previousRow === editor.getBuffer().getLastRow() || previousRow === 0) {\n\t            return true;\n\t        }\n\t    };\n\t    EditorManager.prototype.updateViews = function () {\n\t        //var cNode = this.getCurrentNode();\n\t        var ds = new Date().getMilliseconds();\n\t        if (EditorManager.DETAILS_SUPPORT && this._details) {\n\t            this.getDetails().show(manager.unitPath, manager.currentPosition, this.isFromEdgeRow());\n\t        }\n\t        if (this._view) {\n\t            this.getOrCreateView().setUnit(manager.unitPath);\n\t            // this.getOrCreateView().setUnit(manager.ast);\n\t            //this.getOrCreateView().setSelection(cNode);\n\t        }\n\t        var d1 = new Date().getMilliseconds();\n\t        if (this.performanceDebug) {\n\t            console.log(\"Views update:\" + (d1 - ds));\n\t        }\n\t    };\n\t    EditorManager.prototype.updateOutline = function () {\n\t        ramlServer.getNodeClientConnection().debug(\"Updating outline\", \"EditorManager\", \"updateOutline\");\n\t        if (this._view) {\n\t            this.getOrCreateView().setUnit(manager.unitPath);\n\t        }\n\t    };\n\t    EditorManager.prototype.positionUpdated = function (newPosition) {\n\t        this.currentPosition = newPosition;\n\t        if (this._details) {\n\t            ramlServer.getNodeClientConnection().positionChanged(manager.unitPath, this.currentPosition);\n\t            // this.getDetails().show(manager.unitPath, this.currentPosition, this.isFromEdgeRow());\n\t        }\n\t        // if (this.ast){\n\t        //     this._currentNode=this.ast.findElementAtOffset(this.currentPosition);\n\t        // }\n\t    };\n\t    EditorManager.prototype.isAppropriateGrammar = function (editor) {\n\t        if (this.isRaml(editor) || grammarDetect.isSwaggerJson(editor) || grammarDetect.isSwaggerYaml(editor)) {\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    EditorManager.DETAILS_SUPPORT = false;\n\t    return EditorManager;\n\t}());\n\tvar manager = null;\n\tfunction initEditorTools(display) {\n\t    if (display === void 0) { display = true; }\n\t    if (manager == null)\n\t        manager = new EditorManager(display);\n\t    else if (display)\n\t        manager.display();\n\t}\n\texports.initEditorTools = initEditorTools;\n\tfunction editorToolsStatus() {\n\t    return manager != null && manager.opened;\n\t}\n\texports.editorToolsStatus = editorToolsStatus;\n\tfunction aquireManager() {\n\t    if (!manager) {\n\t        manager = new EditorManager(true);\n\t    }\n\t    return manager;\n\t}\n\texports.aquireManager = aquireManager;\n\t// export function updateAndSelect(node:hl.IHighLevelNode){\n\t//     if (aquireManager()._view) {\n\t//         aquireManager()._view.refresh();\n\t//     }\n\t//     aquireManager().updateText();\n\t//     aquireManager().selectNode(node);\n\t// }\n\tvar SplitDirections;\n\t(function (SplitDirections) {\n\t    SplitDirections[SplitDirections[\"RIGHT\"] = 0] = \"RIGHT\";\n\t    SplitDirections[SplitDirections[\"LEFT\"] = 1] = \"LEFT\";\n\t    SplitDirections[SplitDirections[\"TOP\"] = 2] = \"TOP\";\n\t    SplitDirections[SplitDirections[\"BOTTOM\"] = 3] = \"BOTTOM\";\n\t})(SplitDirections = exports.SplitDirections || (exports.SplitDirections = {}));\n\tfunction doSplit(value, dir) {\n\t    if (dir === void 0) { dir = SplitDirections.RIGHT; }\n\t    var newPane = null;\n\t    switch (dir) {\n\t        case SplitDirections.BOTTOM:\n\t            newPane = atom.workspace.getActivePane().splitDown({});\n\t            break;\n\t        case SplitDirections.TOP:\n\t            newPane = atom.workspace.getActivePane().splitUp({});\n\t            break;\n\t        case SplitDirections.LEFT:\n\t            newPane = atom.workspace.getActivePane().splitLeft({});\n\t            break;\n\t        case SplitDirections.RIGHT:\n\t            newPane = atom.workspace.getActivePane().splitRight({});\n\t            break;\n\t    }\n\t    newPane.addItem(value);\n\t    return newPane;\n\t}\n\texports.doSplit = doSplit;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"path\");\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar Workspace = /** @class */ (function () {\n\t    function Workspace() {\n\t    }\n\t    Workspace.prototype.onDidChangeActivePaneItem = function (callback) {\n\t        return atom.workspace.onDidChangeActivePaneItem(callback);\n\t    };\n\t    Workspace.prototype.onDidOpen = function (callback) {\n\t        return atom.workspace.onDidOpen(callback);\n\t    };\n\t    Workspace.prototype.addModalPanel = function (arg) {\n\t        return atom.workspace.addModalPanel(arg);\n\t    };\n\t    Workspace.prototype.getActiveTextEditor = function () {\n\t        return atom.workspace.getActiveTextEditor();\n\t    };\n\t    Workspace.prototype.getActivePane = function () {\n\t        return atom.workspace.getActivePane();\n\t    };\n\t    Workspace.prototype.getActiveEditor = function () {\n\t        return atom.workspace.getActiveEditor();\n\t    };\n\t    Workspace.prototype.addRightPanel = function (arg) {\n\t        return atom.workspace.addRightPanel(arg);\n\t    };\n\t    Workspace.prototype.paneForItem = function (arg) {\n\t        return atom.workspace.paneForItem(arg);\n\t    };\n\t    Workspace.prototype.getPaneItems = function () {\n\t        return atom.workspace.getPaneItems();\n\t    };\n\t    Workspace.prototype.onDidAddPaneItem = function (callback) {\n\t        return atom.workspace.onDidAddPaneItem(callback);\n\t    };\n\t    Workspace.prototype.onDidDestroyPane = function (callback) {\n\t        return atom.workspace.onDidDestroyPane(callback);\n\t    };\n\t    Workspace.prototype.open = function (path, args) {\n\t        atom.workspace.open(path, args);\n\t    };\n\t    Workspace.prototype.observeTextEditors = function (callback) {\n\t        atom.workspace.observeTextEditors(callback);\n\t    };\n\t    return Workspace;\n\t}());\n\texports.Workspace = Workspace;\n\tfunction open(pathsToOpen) {\n\t    atom.open(pathsToOpen);\n\t}\n\texports.open = open;\n\texports.workspace = new Workspace();\n\tvar CommandManager = /** @class */ (function () {\n\t    function CommandManager() {\n\t    }\n\t    CommandManager.prototype.add = function (selector, type, callback) {\n\t        return atom.commands.add(selector, type, callback);\n\t    };\n\t    return CommandManager;\n\t}());\n\texports.CommandManager = CommandManager;\n\texports.commands = new CommandManager();\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvcmUvYXRvbVdyYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBbUQ7QUFDbkQ7SUFBQTtJQWdEQSxDQUFDO0lBL0NHLDZDQUF5QixHQUF6QixVQUEwQixRQUEwQjtRQUNoRCxNQUFNLENBQU8sSUFBSSxDQUFDLFNBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsNkJBQVMsR0FBVCxVQUFVLFFBQTBCO1FBQ2hDLE1BQU0sQ0FBTyxJQUFJLENBQUMsU0FBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsaUNBQWEsR0FBYixVQUFjLEdBQW9CO1FBQzlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsdUNBQW1CLEdBQW5CO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUNoRCxDQUFDO0lBRUQsaUNBQWEsR0FBYjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFRCxtQ0FBZSxHQUFmO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVELGlDQUFhLEdBQWIsVUFBYyxHQUFRO1FBQ2xCLE1BQU0sQ0FBTyxJQUFJLENBQUMsU0FBVSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsK0JBQVcsR0FBWCxVQUFZLEdBQVE7UUFDaEIsTUFBTSxDQUFPLElBQUksQ0FBQyxTQUFVLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFDRCxnQ0FBWSxHQUFaO1FBQ0ksTUFBTSxDQUFRLElBQUksQ0FBQyxTQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDakQsQ0FBQztJQUNELG9DQUFnQixHQUFoQixVQUFpQixRQUFvRTtRQUNqRixNQUFNLENBQVEsSUFBSSxDQUFDLFNBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBQ0Qsb0NBQWdCLEdBQWhCLFVBQWlCLFFBQTBDO1FBQ3ZELE1BQU0sQ0FBUSxJQUFJLENBQUMsU0FBVSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFDRCx3QkFBSSxHQUFKLFVBQUssSUFBSSxFQUFFLElBQUk7UUFDWCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELHNDQUFrQixHQUFsQixVQUFtQixRQUFxQztRQUNwRCxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFDTCxnQkFBQztBQUFELENBaERBLEFBZ0RDLElBQUE7QUFoRFksOEJBQVM7QUFrRHRCLGNBQXFCLFdBQVc7SUFDdEIsSUFBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBRkQsb0JBRUM7QUE2RVUsUUFBQSxTQUFTLEdBQWEsSUFBSSxTQUFTLEVBQUUsQ0FBQztBQU1qRDtJQUFBO0lBSUEsQ0FBQztJQUhHLDRCQUFHLEdBQUgsVUFBSSxRQUFnQixFQUFFLElBQVksRUFBRSxRQUFvQjtRQUNwRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBQ0wscUJBQUM7QUFBRCxDQUpBLEFBSUMsSUFBQTtBQUpZLHdDQUFjO0FBTWhCLFFBQUEsUUFBUSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUMiLCJmaWxlIjoic3JjL2F0b20vY29yZS9hdG9tV3JhcHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi90eXBpbmdzL21haW4uZC50c1wiIC8+XG5leHBvcnQgY2xhc3MgV29ya3NwYWNlIHtcbiAgICBvbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtKGNhbGxiYWNrOihhcmc6YW55KSA9PiB2b2lkKTp2b2lkIHtcbiAgICAgICAgcmV0dXJuICg8YW55PmF0b20ud29ya3NwYWNlKS5vbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtKGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBvbkRpZE9wZW4oY2FsbGJhY2s6KGFyZzphbnkpID0+IHZvaWQpOnZvaWQge1xuICAgICAgICByZXR1cm4gKDxhbnk+YXRvbS53b3Jrc3BhY2UpLm9uRGlkT3BlbihjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgYWRkTW9kYWxQYW5lbChhcmc6QWRkTW9kYWxQYW5lbEFyZyk6YW55IHtcbiAgICAgICAgcmV0dXJuIGF0b20ud29ya3NwYWNlLmFkZE1vZGFsUGFuZWwoYXJnKTtcbiAgICB9XG5cbiAgICBnZXRBY3RpdmVUZXh0RWRpdG9yKCk6IElUZXh0RWRpdG9yIHtcbiAgICAgICAgcmV0dXJuIGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKTtcbiAgICB9XG5cbiAgICBnZXRBY3RpdmVQYW5lKCk6IElQYW5lIHtcbiAgICAgICAgcmV0dXJuIGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVBhbmUoKTtcbiAgICB9XG5cbiAgICBnZXRBY3RpdmVFZGl0b3IoKTogSUVkaXRvciB7XG4gICAgICAgIHJldHVybiBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVFZGl0b3IoKTtcbiAgICB9XG5cbiAgICBhZGRSaWdodFBhbmVsKGFyZzogYW55KSB7XG4gICAgICAgIHJldHVybiAoPGFueT5hdG9tLndvcmtzcGFjZSkuYWRkUmlnaHRQYW5lbChhcmcpO1xuICAgIH1cblxuICAgIHBhbmVGb3JJdGVtKGFyZzogYW55KSB7XG4gICAgICAgIHJldHVybiAoPGFueT5hdG9tLndvcmtzcGFjZSkucGFuZUZvckl0ZW0oYXJnKTtcbiAgICB9XG4gICAgZ2V0UGFuZUl0ZW1zKCkge1xuICAgICAgICByZXR1cm4gKDxhbnk+IGF0b20ud29ya3NwYWNlKS5nZXRQYW5lSXRlbXMoKTtcbiAgICB9XG4gICAgb25EaWRBZGRQYW5lSXRlbShjYWxsYmFjazogKGV2ZW50OiB7IGl0ZW06IGFueTsgcGFuZTogSVBhbmU7IGluZGV4OiBudW1iZXIgfSkgPT4gdm9pZCkge1xuICAgICAgICByZXR1cm4gKDxhbnk+IGF0b20ud29ya3NwYWNlKS5vbkRpZEFkZFBhbmVJdGVtKGNhbGxiYWNrKTtcbiAgICB9XG4gICAgb25EaWREZXN0cm95UGFuZShjYWxsYmFjazogKGV2ZW50OiB7IHBhbmU6IElQYW5lIH0pID0+IHZvaWQpIHtcbiAgICAgICAgcmV0dXJuICg8YW55PiBhdG9tLndvcmtzcGFjZSkub25EaWREZXN0cm95UGFuZShjYWxsYmFjayk7XG4gICAgfVxuICAgIG9wZW4ocGF0aCwgYXJncykge1xuICAgICAgICBhdG9tLndvcmtzcGFjZS5vcGVuKHBhdGgsIGFyZ3MpO1xuICAgIH1cblxuICAgIG9ic2VydmVUZXh0RWRpdG9ycyhjYWxsYmFjayA6IChlZGl0b3I6SVRleHRFZGl0b3IpPT52b2lkKSB7XG4gICAgICAgIGF0b20ud29ya3NwYWNlLm9ic2VydmVUZXh0RWRpdG9ycyhjYWxsYmFjayk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gb3BlbihwYXRoc1RvT3Blbikge1xuICAgICg8YW55PmF0b20pLm9wZW4ocGF0aHNUb09wZW4pO1xufVxuXG5pbnRlcmZhY2UgSVBhbmUge1xuICAgIHNwbGl0VXAoYXJnOmFueSk6IElQYW5lO1xuXG4gICAgc3BsaXREb3duKGFyZzphbnkpOiBJUGFuZTtcblxuICAgIHNwbGl0TGVmdChhcmc6YW55KTogSVBhbmU7XG5cbiAgICBzcGxpdFJpZ2h0KGFyZzphbnkpOiBJUGFuZTtcblxuICAgIGFkZEl0ZW0oaXRlbTphbnksIGluZGV4Om51bWJlcik7XG5cbiAgICBhY3RpdmF0ZUl0ZW1BdEluZGV4KGFyZzogYW55KTtcbiAgICBcbiAgICBtb3ZlSXRlbVRvUGFuZShpdGVtOmFueSwgcGFuZTpJUGFuZSwgaW5kZXg6bnVtYmVyKTp2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBvaW50e1xuICAgIHJvdzpudW1iZXI7XG4gICAgY29sdW1uOm51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSYW5nZSB7XG4gICAgc3RhcnQ6UG9pbnQ7XG4gICAgZW5kOlBvaW50O1xufVxuXG5leHBvcnQgIGludGVyZmFjZSAgSUN1cnNvciB7XG4gICAgZ2V0QnVmZmVyUG9zaXRpb24oKTogUG9pbnQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgIElCdWZmZXIge1xuICAgIHBvc2l0aW9uRm9yQ2hhcmFjdGVySW5kZXgoaW5kZXhPZjphbnkpOiBQb2ludDtcbiAgICBjaGFyYWN0ZXJJbmRleEZvclBvc2l0aW9uKHBvc2l0aW9uOlBvaW50KTpudW1iZXI7XG5cbiAgICByYW5nZUZvclJvdyhhbnkpOiBSYW5nZTtcblxuICAgIHNldFRleHQodGV4dCk7XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSAgSVRleHRFZGl0b3Ige1xuICAgIGdldFRleHQoKTogc3RyaW5nO1xuXG4gICAgZ2V0UGF0aCgpOiBzdHJpbmc7XG5cbiAgICBnZXRMYXN0Q3Vyc29yKCk6IElDdXJzb3I7XG5cbiAgICBnZXRCdWZmZXIoKTogSUJ1ZmZlcjtcblxuICAgIHNldFRleHQodGV4dCk7XG5cbiAgICBnZXRDdXJzb3JCdWZmZXJQb3NpdGlvbigpOlBvaW50O1xuXG4gICAgb25EaWREZXN0cm95KGNhbGxiYWNrOigpPT52b2lkKTtcblxuICAgIG9uRGlkQ2hhbmdlQ3Vyc29yUG9zaXRpb24oY2FsbGJhY2s6IChldmVudDp7XG4gICAgICAgICBvbGRCdWZmZXJQb3NpdGlvbjpQb2ludCxcbiAgICAgICAgIG9sZFNjcmVlblBvc2l0aW9uOlBvaW50LFxuICAgICAgICAgbmV3QnVmZmVyUG9zaXRpb246UG9pbnQsXG4gICAgICAgICBuZXdTY3JlZW5Qb3NpdGlvbjpQb2ludCxcbiAgICAgICAgIHRleHRDaGFuZ2VkOmJvb2xlYW4sXG4gICAgICAgICBjdXJzb3I6IElDdXJzb3JcbiAgICAgfSk9PnZvaWQpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlICBJRWRpdG9yIHtcbiAgICBnZXRCdWZmZXIoKTogSUJ1ZmZlcjtcblxuICAgIHNldFNlbGVjdGVkQnVmZmVyUmFuZ2UocmFuZ2U6IGFueSwgYXJnOiBhbnkpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFkZE1vZGFsUGFuZWxBcmcge1xuICAgIGl0ZW06IGFueTtcbn1cblxuZXhwb3J0IHZhciB3b3Jrc3BhY2U6V29ya3NwYWNlID0gbmV3IFdvcmtzcGFjZSgpO1xuXG5leHBvcnQgaW50ZXJmYWNlIElDb21tYW5kTWFuYWdlciB7XG4gICAgYWRkKHNlbGVjdG9yOiBzdHJpbmcsIHR5cGU6IHN0cmluZywgY2FsbGJhY2s6ICgpID0+IHZvaWQpOiBBdG9tQ29yZS5EaXNwb3NhYmxlO1xufVxuXG5leHBvcnQgY2xhc3MgQ29tbWFuZE1hbmFnZXIge1xuICAgIGFkZChzZWxlY3Rvcjogc3RyaW5nLCB0eXBlOiBzdHJpbmcsIGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHJldHVybiBhdG9tLmNvbW1hbmRzLmFkZChzZWxlY3RvciwgdHlwZSwgY2FsbGJhY2spO1xuICAgIH1cbn1cblxuZXhwb3J0IHZhciBjb21tYW5kcyA9IG5ldyBDb21tYW5kTWFuYWdlcigpOyJdfQ==\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar UI = __webpack_require__(5);\n\tvar SC = __webpack_require__(6);\n\tvar CompositeDisposable = UI.CompositeDisposable;\n\tvar details = __webpack_require__(8);\n\tvar editorTools = __webpack_require__(1);\n\tvar ramlServer = __webpack_require__(17);\n\tvar reconciler_1 = __webpack_require__(25);\n\tvar RamlDetails = /** @class */ (function (_super) {\n\t    __extends(RamlDetails, _super);\n\t    function RamlDetails(allowStructureChanges) {\n\t        if (allowStructureChanges === void 0) { allowStructureChanges = true; }\n\t        var _this = _super.call(this) || this;\n\t        _this.allowStructureChanges = allowStructureChanges;\n\t        _this.disposables = new CompositeDisposable();\n\t        _this.addClass('raml-details');\n\t        var connection = ramlServer.getNodeClientConnection();\n\t        connection.onDetailsReport(function (report) { return _this.onDetailsReport(report); });\n\t        _this.reconciler = new reconciler_1.Reconciler(connection, 800);\n\t        return _this;\n\t    }\n\t    RamlDetails.prototype.getTitle = function () {\n\t        return \"Details\";\n\t    };\n\t    RamlDetails.prototype.attached = function () {\n\t        try {\n\t            this.element.innerHTML = \"<div></div>\";\n\t            this._children = [];\n\t            this.container = UI.vc();\n\t            this.addChild(this.container);\n\t            this.ui().appendChild(this.container.ui());\n\t            _super.prototype.attached.call(this);\n\t        }\n\t        catch (e) {\n\t        }\n\t    };\n\t    RamlDetails.prototype.setResource = function (detailsNode, context) {\n\t        if (this.wasSchema) {\n\t            this.schemaView.dispose();\n\t            this.schemaView = null;\n\t        }\n\t        this.wasSchema = false;\n\t        window[\"detailsnode\"] = detailsNode;\n\t        window[\"detailscontext\"] = context;\n\t        if (detailsNode == null)\n\t            this.displayEmpty();\n\t        details.updateDetailsPanel(detailsNode, context, this.container, true);\n\t    };\n\t    RamlDetails.prototype.update = function () {\n\t        if (window[\"detailsnode\"]) {\n\t            this.setResource(window[\"detailsnode\"], window[\"detailscontext\"]);\n\t        }\n\t    };\n\t    RamlDetails.prototype.displayEmpty = function () {\n\t        this.container.clear();\n\t        // if (!editorTools.aquireManager().ast) {\n\t        //     this.container.addChild(UI.h3(\"Our API is fabulously empty\").margin(8, 8, 20, 8));\n\t        //     var create = new UI.Button(\"Create new API\", UI.ButtonSizes.LARGE, UI.ButtonHighlights.SUCCESS, UI.Icon.REPO_CLONE, ()=>dialogs.newApi());\n\t        //     create.margin(8, 8, 20, 0);\n\t        //     this.container.addChild(create);\n\t        // }\n\t    };\n\t    RamlDetails.prototype.destroy = function () {\n\t        editorTools.aquireManager()._details = null;\n\t        this.disposables.dispose();\n\t        this._unitPath = null;\n\t        this._position = null;\n\t        this.container.dispose();\n\t        this.container = null;\n\t        window[\"detailsnode\"] = null;\n\t        window[\"detailscontext\"] = null;\n\t        this._children = [];\n\t        if (details.oldItem) {\n\t            details.oldItem.detach();\n\t        }\n\t        if (this.wasSchema) {\n\t            this.schemaView.dispose();\n\t            this.schemaView = null;\n\t        }\n\t        details.oldItem = null;\n\t    };\n\t    RamlDetails.prototype.show = function (unitPath, position, force) {\n\t        var _this = this;\n\t        if (force === void 0) { force = false; }\n\t        if (!force && this._unitPath == unitPath && this._position === position)\n\t            return;\n\t        this._unitPath = unitPath;\n\t        this._position = position;\n\t        var reconciler = this.reconciler;\n\t        try {\n\t            // if (isSchema(node))\n\t            //     this.setSchema(this._node);\n\t            // else\n\t            //     this.setResource(node);\n\t            ramlServer.getNodeClientConnection().getDetails(unitPath, position).then(function (detailsNode) {\n\t                _this.setResource(detailsNode, {\n\t                    uri: unitPath,\n\t                    position: position,\n\t                    localModel: false,\n\t                    reconciler: reconciler\n\t                });\n\t            });\n\t        }\n\t        catch (e) { }\n\t    };\n\t    RamlDetails.prototype.onDetailsReport = function (report) {\n\t        var _this = this;\n\t        if (report.uri != this._unitPath)\n\t            return;\n\t        var reconciler = this.reconciler;\n\t        //if (this._position == report.position) return;\n\t        ramlServer.getNodeClientConnection().getLatestVersion(report.uri).then(function (latestVersion) {\n\t            //ignoring outdated reports\n\t            if (report.version != null && report.version < latestVersion)\n\t                return;\n\t            _this.setResource(report.details, {\n\t                uri: report.uri,\n\t                position: report.position,\n\t                localModel: false,\n\t                reconciler: reconciler,\n\t            });\n\t        });\n\t    };\n\t    return RamlDetails;\n\t}(SC.Scrollable));\n\texports.RamlDetails = RamlDetails;\n\t// function isSchema(p: hl.IHighLevelNode) {\n\t//     if (!p){\n\t//         return false;\n\t//     }\n\t//     return universeHelpers.isGlobalSchemaType(p.definition());\n\t// } \n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"atom-ui-lib\");\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t/**\n\t * Created by kor on 22/06/15.\n\t */\n\tvar SpacePenViews = __webpack_require__(7);\n\tvar Scrollable = /** @class */ (function (_super) {\n\t    __extends(Scrollable, _super);\n\t    function Scrollable() {\n\t        var _this = _super.call(this) || this;\n\t        _this._children = [];\n\t        return _this;\n\t    }\n\t    Scrollable.content = function () {\n\t        var v = this.div({ class: 'scrollpad pane-item padded', tabindex: -1, style: \"overflow:scroll;\" });\n\t        return v;\n\t    };\n\t    Scrollable.prototype.dispose = function () {\n\t    };\n\t    Scrollable.prototype.caption = function () { return \"\"; };\n\t    Scrollable.prototype.scroll = function (top, left) {\n\t        this.element.scrollTop = top;\n\t        this.element.scrollLeft = left;\n\t    };\n\t    Scrollable.prototype.size = function () {\n\t        return {\n\t            top: this.element.scrollTop,\n\t            left: this.element.scrollLeft,\n\t            bottom: this.element.scrollTop + this.element.clientHeight,\n\t            right: this.element.scrollLeft + this.element.clientWidth\n\t        };\n\t    };\n\t    Scrollable.prototype.changed = function () { };\n\t    Scrollable.prototype.refresh = function () { };\n\t    Scrollable.prototype.ui = function () {\n\t        return this.element;\n\t    };\n\t    Scrollable.prototype.setParent = function (p) {\n\t        if (this._parent != null)\n\t            this._parent.removeChild(this);\n\t        this._parent = p;\n\t    };\n\t    //TODO REMOVE COPY PASTE\n\t    Scrollable.prototype.addChild = function (child) {\n\t        child.setParent(this);\n\t        this._children.push(child);\n\t        //this.changed();\n\t    };\n\t    Scrollable.prototype.removeChild = function (child) {\n\t        this._children = this._children.filter(function (x) { return x != child; });\n\t        // this.changed();\n\t    };\n\t    Scrollable.prototype.doRender = function () {\n\t        return this.innerRenderUI();\n\t    };\n\t    /**\n\t     *\n\t     * @returns not null element;\n\t     */\n\t    Scrollable.prototype.selfRender = function () {\n\t        return document.createElement(\"div\");\n\t    };\n\t    Scrollable.prototype.attached = function () {\n\t        this.html(this.innerRenderUI());\n\t    };\n\t    Scrollable.prototype.innerRenderUI = function () {\n\t        var start = this.selfRender();\n\t        this._children.forEach(function (x) {\n\t            var el = x.renderUI();\n\t            if (el) {\n\t                start.appendChild(el);\n\t            }\n\t        });\n\t        return start;\n\t    };\n\t    Scrollable.prototype.renderUI = function () {\n\t        return this.element;\n\t    };\n\t    Scrollable.prototype.parent = function () {\n\t        return null;\n\t    };\n\t    Scrollable.prototype.children = function () {\n\t        return this._children;\n\t    };\n\t    Scrollable.prototype.isAttached = function () {\n\t        return true;\n\t    };\n\t    return Scrollable;\n\t}(SpacePenViews.ScrollView));\n\texports.Scrollable = Scrollable;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL3V0aWwvU2Nyb2xsVmlld1VJLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOztHQUVHO0FBQ0gsb0RBQXVEO0FBRXZEO0lBQWdDLDhCQUF3QjtJQUlwRDtRQUFBLFlBQ0ksaUJBQU8sU0FDVjtRQUpBLGVBQVMsR0FBcUIsRUFBRSxDQUFBOztJQUlqQyxDQUFDO0lBQ00sa0JBQU8sR0FBZDtRQUNJLElBQUksQ0FBQyxHQUFTLElBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsNEJBQTRCLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUE7UUFFekcsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNiLENBQUM7SUFDRCw0QkFBTyxHQUFQO0lBRUEsQ0FBQztJQUlELDRCQUFPLEdBQVAsY0FBWSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV4QiwyQkFBTSxHQUFOLFVBQU8sR0FBVyxFQUFFLElBQVk7UUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUNuQyxDQUFDO0lBRUQseUJBQUksR0FBSjtRQUNJLE1BQU0sQ0FBQztZQUNILEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVM7WUFDM0IsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVTtZQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZO1lBQzFELEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVc7U0FDNUQsQ0FBQTtJQUNMLENBQUM7SUFFRCw0QkFBTyxHQUFQLGNBQVksQ0FBQztJQUNiLDRCQUFPLEdBQVAsY0FBWSxDQUFDO0lBR2IsdUJBQUUsR0FBRjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFJRCw4QkFBUyxHQUFULFVBQVUsQ0FBaUI7UUFDdkIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVELHdCQUF3QjtJQUN4Qiw2QkFBUSxHQUFSLFVBQVMsS0FBNEM7UUFDakQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixpQkFBaUI7SUFDckIsQ0FBQztJQUNELGdDQUFXLEdBQVgsVUFBWSxLQUFxQjtRQUM3QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFHLE9BQUEsQ0FBQyxJQUFJLEtBQUssRUFBVixDQUFVLENBQUMsQ0FBQztRQUN2RCxrQkFBa0I7SUFDdEIsQ0FBQztJQUNELDZCQUFRLEdBQVI7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFDRDs7O09BR0c7SUFDSywrQkFBVSxHQUFsQjtRQUNJLE1BQU0sQ0FBTSxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCw2QkFBUSxHQUFSO1FBQ1UsSUFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0lBRUQsa0NBQWEsR0FBYjtRQUNJLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7WUFDcEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFBO1lBQ3JCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxQixDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCw2QkFBUSxHQUFSO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELDJCQUFNLEdBQU47UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCw2QkFBUSxHQUFSO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELCtCQUFVLEdBQVY7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDTCxpQkFBQztBQUFELENBdkdBLEFBdUdDLENBdkcrQixhQUFhLENBQUMsVUFBVSxHQXVHdkQ7QUF2R1ksZ0NBQVUiLCJmaWxlIjoic3JjL2F0b20vdXRpbC9TY3JvbGxWaWV3VUkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkga29yIG9uIDIyLzA2LzE1LlxuICovXG5pbXBvcnQgU3BhY2VQZW5WaWV3cyA9IHJlcXVpcmUoJ2F0b20tc3BhY2UtcGVuLXZpZXdzJyk7XG5pbXBvcnQgVUkgPSByZXF1aXJlKFwiYXRvbS11aS1saWJcIilcbmV4cG9ydCBjbGFzcyBTY3JvbGxhYmxlIGV4dGVuZHMgU3BhY2VQZW5WaWV3cy5TY3JvbGxWaWV3IGltcGxlbWVudHMgVUkuVUlDb21wb25lbnQge1xuXG4gICAgIF9jaGlsZHJlbjogVUkuVUlDb21wb25lbnRbXSA9IFtdXG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgc3RhdGljIGNvbnRlbnQoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICB2YXIgdiA9ICg8YW55PnRoaXMpLmRpdih7IGNsYXNzOiAnc2Nyb2xscGFkIHBhbmUtaXRlbSBwYWRkZWQnLCB0YWJpbmRleDogLTEsIHN0eWxlOiBcIm92ZXJmbG93OnNjcm9sbDtcIiB9KVxuXG4gICAgICAgIHJldHVybiB2O1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuXG4gICAgfVxuICAgIGVsZW1lbnQ6SFRNTEVsZW1lbnRcblxuXG4gICAgY2FwdGlvbigpIHsgcmV0dXJuIFwiXCI7IH1cblxuICAgIHNjcm9sbCh0b3A6IG51bWJlciwgbGVmdDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zY3JvbGxUb3AgPSB0b3A7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zY3JvbGxMZWZ0ID0gbGVmdDsgICAgXG4gICAgfVxuICAgIFxuICAgIHNpemUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IHRoaXMuZWxlbWVudC5zY3JvbGxUb3AsXG4gICAgICAgICAgICBsZWZ0OiB0aGlzLmVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICAgICAgICAgIGJvdHRvbTogdGhpcy5lbGVtZW50LnNjcm9sbFRvcCArIHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgICAgICByaWdodDogdGhpcy5lbGVtZW50LnNjcm9sbExlZnQgKyB0aGlzLmVsZW1lbnQuY2xpZW50V2lkdGhcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoYW5nZWQoKSB7IH1cbiAgICByZWZyZXNoKCkgeyB9XG5cbiAgICBwcml2YXRlIF91aTogVUkuSFRNTFR5cGVzO1xuICAgIHVpKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xuICAgIH1cblxuICAgIHByaXZhdGUgX3BhcmVudDogVUkuVUlDb21wb25lbnQ7XG5cbiAgICBzZXRQYXJlbnQocDogVUkuVUlDb21wb25lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3BhcmVudCAhPSBudWxsKVxuICAgICAgICAgICAgdGhpcy5fcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHA7XG4gICAgfVxuXG4gICAgLy9UT0RPIFJFTU9WRSBDT1BZIFBBU1RFXG4gICAgYWRkQ2hpbGQoY2hpbGQ6IFVJLlVJQ29tcG9uZW50fFVJLkJhc2ljQ29tcG9uZW50PGFueT4pIHtcbiAgICAgICAgY2hpbGQuc2V0UGFyZW50KHRoaXMpO1xuICAgICAgICB0aGlzLl9jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgICAgLy90aGlzLmNoYW5nZWQoKTtcbiAgICB9XG4gICAgcmVtb3ZlQ2hpbGQoY2hpbGQ6IFVJLlVJQ29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMuX2NoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW4uZmlsdGVyKHg9PiB4ICE9IGNoaWxkKTtcbiAgICAgICAgLy8gdGhpcy5jaGFuZ2VkKCk7XG4gICAgfVxuICAgIGRvUmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbm5lclJlbmRlclVJKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHJldHVybnMgbm90IG51bGwgZWxlbWVudDtcbiAgICAgKi9cbiAgICBwcml2YXRlIHNlbGZSZW5kZXIoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gPGFueT5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIH1cblxuICAgIGF0dGFjaGVkKCkge1xuICAgICAgICAoPGFueT50aGlzKS5odG1sKHRoaXMuaW5uZXJSZW5kZXJVSSgpKVxuICAgIH1cblxuICAgIGlubmVyUmVuZGVyVUkoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNlbGZSZW5kZXIoKTtcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4uZm9yRWFjaCh4PT4ge1xuICAgICAgICAgICAgdmFyIGVsID0geC5yZW5kZXJVSSgpXG4gICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICBzdGFydC5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzdGFydDtcbiAgICB9XG5cbiAgICByZW5kZXJVSSgpOiBVSS5IVE1MVHlwZXMge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xuICAgIH1cblxuICAgIHBhcmVudCgpOiBhbnkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjaGlsZHJlbigpOiBVSS5VSUNvbXBvbmVudFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuO1xuICAgIH1cblxuICAgIGlzQXR0YWNoZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn0iXX0=\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"atom-space-pen-views\");\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar UI = __webpack_require__(5);\n\tvar detailElements = __webpack_require__(9);\n\tvar HTTPANDHTTPS = \"HTTP, HTTPS\";\n\tvar HTTPHTTPS = \"HTTP/HTTPS\";\n\texports.nodes = {\n\t    Api: {\n\t        properties: [\"title\", \"version\", \"baseUri\", \"mediaType\", \"protocols\"],\n\t        actions: []\n\t    },\n\t    Resource: {\n\t        properties: [\"relativeUri\", \"displayName\", \"description\", \"is\", \"type\"]\n\t    },\n\t    Method: {\n\t        properties: [\"method\", \"displayName\", \"description\", \"is\", \"type\", \"protocols\", \"securedBy\"]\n\t    },\n\t    DataElement: {\n\t        properties: [\"name\", \"displayName\", \"description\", \"default\", \"required\"]\n\t    },\n\t    Response: {\n\t        properties: [\"code\", \"description\"]\n\t    }\n\t};\n\texports.filterOut = {\n\t    properties: [\"location\", \"annotations\", \"repeat\", \"locationKind\", \"signature\"]\n\t};\n\tvar focusedPropertyName = null;\n\tvar focusedPosition = -1;\n\tvar toFocus = null;\n\tfunction updateDetailsPanel(detailsReport, context, panel, updateTextOnDone) {\n\t    if (updateTextOnDone === void 0) { updateTextOnDone = false; }\n\t    panel.clear();\n\t    var cfg = atom.config;\n\t    var l = atom.styles.emitter.handlersByEventName;\n\t    var sadd = [].concat(l['did-add-style-element']);\n\t    var sremove = [].concat(l['did-remove-style-element']);\n\t    var schange = [].concat(l['did-update-style-element']);\n\t    var cfgCh = [].concat(cfg.emitter.handlersByEventName['did-change']);\n\t    var grammars = (atom.grammars.emitter || atom.grammars.textmateRegistry.emitter);\n\t    var addGrammar = [].concat(grammars[\"did-add-grammar\"]);\n\t    var updateGrammar = [].concat(grammars[\"did-update-grammar\"]);\n\t    var emptyGrammarListeners = [].concat(atom.grammars.nullGrammar.emitter.handlersByEventName[\"did-update\"]);\n\t    try {\n\t        var empty = true;\n\t        var item = detailElements.buildItem(detailsReport, context, false);\n\t        // item.addListener(x=> {\n\t        //     editorTools.aquireManager().updateText(null);\n\t        // })\n\t        var rend;\n\t        try {\n\t            rend = item.render({});\n\t        }\n\t        finally {\n\t            if (exports.oldItem) {\n\t                exports.oldItem.detach();\n\t            }\n\t            exports.oldItem = item;\n\t            if (rend) {\n\t                panel.addChild(rend);\n\t            }\n\t            empty = false;\n\t        }\n\t        if (toFocus) {\n\t            var field = toFocus.getActualField().ui();\n\t            field.focus();\n\t            field.getModel().setCursorBufferPosition(focusedPosition);\n\t            toFocus = null;\n\t            focusedPosition = null;\n\t            focusedPropertyName = null;\n\t        }\n\t        if (empty) {\n\t            var errLabel = UI.h3(\"Object has no additional properties.\");\n\t            UI.applyStyling(UI.TextClasses.WARNING, errLabel);\n\t            errLabel.setStyle(\"text-align\", \"center\").margin(0, 0, 24, 12);\n\t            panel.addChild(errLabel);\n\t        }\n\t    }\n\t    catch (Error) {\n\t        throw Error;\n\t    }\n\t    finally {\n\t        cfg.emitter.handlersByEventName['did-change'] = cfgCh;\n\t        l['did-add-style-element'] = sadd;\n\t        l['did-remove-style-element'] = sremove;\n\t        l['did-update-style-element'] = schange;\n\t        grammars[\"did-add-grammar\"] = addGrammar;\n\t        grammars[\"did-update-grammar\"] = updateGrammar;\n\t        atom.grammars.nullGrammar.emitter.handlersByEventName[\"did-update\"] = emptyGrammarListeners;\n\t    }\n\t}\n\texports.updateDetailsPanel = updateDetailsPanel;\n\t// function getSchemaType(value: string)\n\t// {\n\t//     var schema = schemautil.createSchema(value, null);\n\t//     if (!schema || !schema.getType) return \"Invalid\";\n\t//     switch (schema.getType()) {\n\t//         case \"source.json\":\n\t//             return \"JSON\";\n\t//         case \"text.xml\":\n\t//             return \"XML\";\n\t//         default :\n\t//             return \"Unknown type\";\n\t//     }\n\t// }\n\t// export function getStringValue(x : string | hl.IStructuredValue) : string {\n\t//     if (typeof x ===\"object\") return (<hl.IStructuredValue>x).valueName();\n\t//     else return <string>x;\n\t// }\n\t//\n\t// export function propertyInfo(node: hl.IHighLevelNode, name: string) {\n\t//     var prop = node.definition().property(name);\n\t//     if (prop.isValueProperty() == false) return null;\n\t//     var isMulti = prop.isMultiValue();\n\t//     var required = prop.isRequired();\n\t//     var value : string;\n\t//     var values = [];\n\t//     var type : string;\n\t//     var ipath: string;\n\t//     var rangeName = prop.range().nameId();\n\t//\n\t//     if (isMulti) {\n\t//         values = node.attributes(name).map(x=>x.value());\n\t//         value = values.map(x=>getStringValue(x)).join(\", \");\n\t//         switch (rangeName) {\n\t//             case \"StringType\":\n\t//                 type = 'enum';\n\t//                 if (!node.definition().getAdapter(def.RAMLService).isUserDefined()&&name==\"protocols\"){\n\t//                     type=\"protocols\"\n\t//                 }\n\t//                 break;\n\t//             case \"TraitRef\":\n\t//                 type = 'trait';\n\t//                 break;\n\t//             default:\n\t//                 type = 'unknown';\n\t//         }\n\t//     } else {\n\t//         var attr = node.attr(name);\n\t//         value = attr && attr.value() ? attr.value() : \"\";\n\t//\n\t//         switch (rangeName) {\n\t//             case \"MarkdownString\":\n\t//                 type = 'markdown';\n\t//                 values = value.split(\"\\n\");\n\t//                 value =  values[0];\n\t//                 break;\n\t//             case \"SchemaString\":\n\t//                 type = 'schema';\n\t//                 if (value.indexOf(\"\\n\") >= 0) {\n\t//                     values = [value];\n\t//                     value = \"(\" + getSchemaType(value) + \" Schema)\";\n\t//                 }\n\t//                 break;\n\t//             case \"ExampleString\":\n\t//                 type = 'schexample';\n\t//                 try {\n\t//                     ipath = attr.lowLevel().includePath();\n\t//                 } catch(e) { ipath = \"\"; }\n\t//                 values = [value, ipath];\n\t//                 value =  \"Example\" + (ipath != \"\" ? \" (referenced from \" + ipath + \")\" : \"\");\n\t//                 break;\n\t//             case \"ResourceTypeRef\":\n\t//                 type = \"type\";\n\t//                 break;\n\t//             default:\n\t//                 type = 'string';\n\t//         }\n\t//         if (type == \"string\") {\n\t//             if (value.indexOf(\"\\n\") >= 0) {\n\t//                 values = value.split(\"\\n\");\n\t//                 value = \"(\" + values.length + \" lines) \" + values[0].substring(0, 20) + \" ...\";\n\t//                 type = \"multiline\";\n\t//             }\n\t//             if (attr)\n\t//                 ipath = attr.lowLevel().includePath();\n\t//\n\t//             if (ipath) {\n\t//                 value = \"(included from \" + ipath +\")\";\n\t//                 type = \"include\";\n\t//             }\n\t//         }\n\t//     }\n\t//     var ret = {\n\t//         value: value,\n\t//         values: values,\n\t//         type: type,\n\t//         include: ipath,\n\t//         required: required,\n\t//     };\n\t//     return ret;\n\t// }\n\t// export function stringView(node: hl.IHighLevelNode, name: string) {\n\t//     return getStringValue(propertyInfo(node, name).value);\n\t// } \n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar _ = __webpack_require__(10);\n\tvar UI = __webpack_require__(5);\n\t//import contextActions = require(\"raml-actions\")\n\tvar assistUtils = __webpack_require__(11);\n\tvar ramlServer = __webpack_require__(17);\n\tvar assist_utils_1 = __webpack_require__(11);\n\tvar contextMenuImpl_1 = __webpack_require__(19);\n\tvar lastSelectedCaption;\n\tvar inRender = false;\n\t/**\n\t * Runnable that updates details values remotely\n\t */\n\tvar UpdateModelRunnable = /** @class */ (function () {\n\t    function UpdateModelRunnable(context, item, newValue) {\n\t        this.context = context;\n\t        this.item = item;\n\t        this.newValue = newValue;\n\t        this.cancelled = false;\n\t    }\n\t    /**\n\t     * Performs the actual business logics.\n\t     * Should resolve the promise when finished.\n\t     */\n\t    UpdateModelRunnable.prototype.run = function () {\n\t        if (this.context.localModel) {\n\t            this.context.localModel[this.item.id] = this.newValue;\n\t            return Promise.resolve([]);\n\t        }\n\t        var connection = ramlServer.getNodeClientConnection();\n\t        return connection.changeDetailValue(this.context.uri, this.context.position, this.item.id, this.newValue);\n\t    };\n\t    /**\n\t     * Whether two runnable conflict with each other.\n\t     * Must work fast as its called often.\n\t     * @param other\n\t     */\n\t    UpdateModelRunnable.prototype.conflicts = function (other) {\n\t        if (isUpdateModelRunnable(other)) {\n\t            return this.getUri() === other.getUri();\n\t        }\n\t        return false;\n\t    };\n\t    /**\n\t     * Cancels the runnable. run() method should do nothing if launched later,\n\t     * if cancel is called during the run() method execution, run() should stop as soon as it can.\n\t     */\n\t    UpdateModelRunnable.prototype.cancel = function () {\n\t        this.cancelled = true;\n\t    };\n\t    /**\n\t     * Whether cancel() method was called at least once.\n\t     */\n\t    UpdateModelRunnable.prototype.isCanceled = function () {\n\t        return this.cancelled;\n\t    };\n\t    UpdateModelRunnable.prototype.getUri = function () {\n\t        return this.context.uri;\n\t    };\n\t    return UpdateModelRunnable;\n\t}());\n\t/**\n\t * Instanceof for UpdateModelRunnable\n\t * @param runnable\n\t */\n\tfunction isUpdateModelRunnable(runnable) {\n\t    return runnable.getUri != null;\n\t}\n\tvar Item = /** @class */ (function () {\n\t    function Item(_title, description) {\n\t        if (description === void 0) { description = \"\"; }\n\t        this._title = _title;\n\t        this.description = description;\n\t        this.listeners = [];\n\t    }\n\t    Item.prototype.needsSeparateLabel = function () {\n\t        return false;\n\t    };\n\t    Item.prototype.detach = function () {\n\t        this.dispose();\n\t        this.children().forEach(function (x) {\n\t            if (x.detach)\n\t                x.detach();\n\t        });\n\t    };\n\t    Item.prototype.addListener = function (r) {\n\t        this.listeners.push(r);\n\t    };\n\t    Item.prototype.removeListener = function (r) {\n\t        this.listeners = this.listeners.filter(function (x) { return x != r; });\n\t    };\n\t    Item.prototype.add = function (i) {\n\t        throw new Error(\"Not supported\");\n\t    };\n\t    Item.prototype.root = function () {\n\t        if (this.parent) {\n\t            return this.parent.root();\n\t        }\n\t        return this;\n\t    };\n\t    Item.prototype.title = function () {\n\t        return this._title;\n\t    };\n\t    Item.prototype.children = function () {\n\t        return [];\n\t    };\n\t    Item.prototype.setDescription = function (desc) {\n\t        this.description = desc;\n\t    };\n\t    Item.prototype.setTitle = function (t) {\n\t        this._title = t;\n\t    };\n\t    Item.prototype.render = function (r) {\n\t        if (r === void 0) { r = {}; }\n\t        throw new Error(\"Not Implemented\");\n\t    };\n\t    Item.prototype.item = function (name) {\n\t        return null;\n\t    };\n\t    Item.prototype.setError = function (text) {\n\t    };\n\t    Item.prototype.clearErrors = function () {\n\t    };\n\t    return Item;\n\t}());\n\texports.Item = Item;\n\tvar TypeDisplayItem = /** @class */ (function (_super) {\n\t    __extends(TypeDisplayItem, _super);\n\t    function TypeDisplayItem(detailsNode, context) {\n\t        var _this = _super.call(this, \"Type \" + detailsNode.title, \"\") || this;\n\t        _this.detailsNode = detailsNode;\n\t        _this.context = context;\n\t        return _this;\n\t    }\n\t    TypeDisplayItem.prototype.render = function (r) {\n\t        var container = new UI.WrapPanel();\n\t        container.setCaption(this.title());\n\t        return container;\n\t        //return typeDisplay.render(this.detailsNode);\n\t    };\n\t    TypeDisplayItem.prototype.dispose = function () {\n\t    };\n\t    return TypeDisplayItem;\n\t}(Item));\n\texports.TypeDisplayItem = TypeDisplayItem;\n\tvar Category = /** @class */ (function (_super) {\n\t    __extends(Category, _super);\n\t    function Category() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        _this._children = [];\n\t        return _this;\n\t    }\n\t    Category.prototype.add = function (i) {\n\t        i.parent = this;\n\t        this._children.push(i);\n\t    };\n\t    Category.prototype.children = function () {\n\t        return this._children;\n\t    };\n\t    Category.prototype.plainChildren = function () {\n\t        return this._children.filter(function (x) { return !(x instanceof Category); });\n\t    };\n\t    Category.prototype.categories = function () {\n\t        return this._children.filter(function (x) { return (x instanceof Category); });\n\t    };\n\t    Category.prototype.item = function (name) {\n\t        var it;\n\t        this._children.forEach(function (x) {\n\t            if (x.title() == name) {\n\t                it = x;\n\t            }\n\t            var rr = x.item(name);\n\t            if (rr) {\n\t                it = rr;\n\t            }\n\t        });\n\t        return it;\n\t    };\n\t    Category.prototype.render = function (r) {\n\t        var _this = this;\n\t        if (r === void 0) { r = {}; }\n\t        var section = this.createSection(r);\n\t        this._result = section;\n\t        if (this.description && r.showDescription) {\n\t            this.descriptionLabel = UI.label(this.description);\n\t            section.addChild(this.descriptionLabel);\n\t        }\n\t        this.contributeTop(section);\n\t        this.plainChildren().forEach(function (x) { return _this.addChild(section, x); });\n\t        var wrappedChild = this.createWrappedChild(section);\n\t        this.subCategories = wrappedChild;\n\t        var cats = this.categories();\n\t        var remap = {};\n\t        cats.forEach(function (x) { return remap[x.title()] = x; });\n\t        var newCats = [];\n\t        if (remap[\"General\"]) {\n\t            newCats.push(remap[\"General\"]);\n\t            delete remap[\"General\"];\n\t        }\n\t        if (remap[\"Facets\"]) {\n\t            newCats.push(remap[\"Facets\"]);\n\t            delete remap[\"Facets\"];\n\t        }\n\t        for (var c in remap) {\n\t            newCats.push(remap[c]);\n\t        }\n\t        newCats.forEach(function (x) { return _this.addChild(wrappedChild, x); });\n\t        return section;\n\t    };\n\t    Category.prototype.detach = function () {\n\t        _super.prototype.detach.call(this);\n\t        this._result.dispose();\n\t    };\n\t    Category.prototype.createSection = function (r) {\n\t        if (r.showHeader) {\n\t            return new UI.Section(UI.h3(this.title()), false);\n\t        }\n\t        var pnl = new UI.Panel();\n\t        pnl.setCaption(this.title());\n\t        return pnl;\n\t    };\n\t    Category.prototype.createWrappedChild = function (section) {\n\t        return section;\n\t    };\n\t    Category.prototype.addChild = function (section, item) {\n\t        var child = item.render();\n\t        if (section instanceof UI.TabFolder) {\n\t            var tf = section;\n\t            tf.add(child.caption(), UI.Icon.NONE, child);\n\t        }\n\t        else {\n\t            if (item.needsSeparateLabel()) {\n\t                var firstLabel = UI.label(item.title());\n\t                firstLabel.margin(0, 5, 0, 0);\n\t                section.addChild(firstLabel);\n\t                section.addChild(UI.label(item.description));\n\t            }\n\t            section.addChild(child);\n\t        }\n\t    };\n\t    Category.prototype.contributeTop = function (section) {\n\t    };\n\t    Category.prototype.dispose = function () {\n\t    };\n\t    Category.prototype.setError = function (text) {\n\t    };\n\t    Category.prototype.clearErrors = function () {\n\t        this._children.forEach(function (x) { return x.clearErrors(); });\n\t    };\n\t    Category.prototype.update = function (i) {\n\t    };\n\t    return Category;\n\t}(Item));\n\tvar TopLevelNode = /** @class */ (function (_super) {\n\t    __extends(TopLevelNode, _super);\n\t    function TopLevelNode(detailsNode, context) {\n\t        var _this = _super.call(this, detailsNode ? detailsNode.title : \"API\", detailsNode ? detailsNode.description : \"\") || this;\n\t        _this.detailsNode = detailsNode;\n\t        _this.context = context;\n\t        _this.ep = null;\n\t        return _this;\n\t    }\n\t    TopLevelNode.prototype.detach = function () {\n\t        _super.prototype.detach.call(this);\n\t        this._result.dispose();\n\t    };\n\t    TopLevelNode.prototype.createWrappedChild = function (section) {\n\t        var tf = new UI.TabFolder();\n\t        tf.setOnSelected(function () {\n\t            if (!inRender) {\n\t                lastSelectedCaption = (tf.selectedComponent().caption());\n\t            }\n\t        });\n\t        section.addChild(tf);\n\t        return tf;\n\t    };\n\t    TopLevelNode.prototype.subCategoryByNameOrCreate = function (name) {\n\t        var item = _.find(this.children(), function (x) { return x.title() == name; });\n\t        if (!item) {\n\t            var rs = new Category(name);\n\t            this.add(rs);\n\t            return rs;\n\t        }\n\t        return item;\n\t    };\n\t    TopLevelNode.prototype.addItemToCategory = function (name, it) {\n\t        if (name == null) {\n\t            this._children.push(it);\n\t            it.parent = this;\n\t            return;\n\t        }\n\t        this.subCategoryByNameOrCreate(name).add(it);\n\t    };\n\t    TopLevelNode.prototype.contributeTop = function (section) {\n\t        this.errorLabel = UI.label(\"\", UI.Icon.BUG, UI.TextClasses.ERROR);\n\t        this.ep = UI.hc(this.errorLabel);\n\t        this.ep.setDisplay(false);\n\t        section.addChild(this.ep);\n\t    };\n\t    TopLevelNode.prototype.render = function (r) {\n\t        if (r === void 0) { r = {}; }\n\t        inRender = true;\n\t        try {\n\t            var result = _super.prototype.render.call(this, r);\n\t            this._options = r;\n\t            this._panel = result;\n\t            var tf = this.subCategories;\n\t            for (var n = 0; n < tf.tabsCount(); n++) {\n\t                var item = tf.get(n);\n\t                if (item.header == lastSelectedCaption) {\n\t                    tf.setSelectedIndex(n);\n\t                    return result;\n\t                }\n\t            }\n\t            var documentation = \"\";\n\t            if (this.detailsNode.description) {\n\t                documentation = this.detailsNode.description;\n\t            }\n\t            if (documentation.length && !r.showDescription) {\n\t                result.addChild(UI.html(\"<hr/>\"));\n\t                result.addChild(UI.label(documentation, UI.Icon.INBOX, UI.TextClasses.SUBTLE));\n\t            }\n\t            this.update(this);\n\t            return result;\n\t        }\n\t        finally {\n\t            inRender = false;\n\t        }\n\t    };\n\t    TopLevelNode.prototype.dispose = function () {\n\t        this.detailsNode = null;\n\t    };\n\t    TopLevelNode.prototype.update = function (i) {\n\t        // if (!this._panel){\n\t        //     return;\n\t        // }\n\t        // if (i instanceof PropertyEditorInfo){\n\t        //     var prInfo=<PropertyEditorInfo>i;\n\t        //     if (prInfo.property.getAdapter(def.RAMLPropertyService).isTypeExpr()||prInfo.property.isDescriminator()){\n\t        //         rp.utils.updateType(this.node);\n\t        //         var extras=<Category>this.item(\"Facets\");\n\t        //         if (extras&&extras._result) {\n\t        //             extras._result.clear();\n\t        //         }\n\t        //\n\t        //         var item=buildItem(this.node,false);\n\t        //         var newExtras=<Category>item.item(\"Facets\");\n\t        //         if (newExtras) {\n\t        //             if (extras&&extras._result) {\n\t        //                 extras._children = newExtras._children;\n\t        //                 extras._children.forEach(x=>x.parent = extras);\n\t        //                 if (extras._children.length > 0) {\n\t        //                     extras._result.setDisplay(true);\n\t        //                     //workaroung events flow issue in UI.ts\n\t        //                 }\n\t        //                 newExtras.children().forEach(x=> {\n\t        //                     extras._result.addChild(x.render(this._options))\n\t        //                 })\n\t        //             }\n\t        //             else{\n\t        //                 this._children.push(newExtras);\n\t        //                 if (this._panel) {\n\t        //                     this._panel.addChild(newExtras.render(this._options))\n\t        //                 }\n\t        //             }\n\t        //         }\n\t        //         else{\n\t        //             if (extras&&extras._result) {\n\t        //                 extras._result.setDisplay(false);\n\t        //             }\n\t        //         }\n\t        //     }\n\t        // }\n\t        // var kp=null;\n\t        // this.node.definition().allProperties().forEach(x=>{\n\t        //     if (x.getAdapter(def.RAMLPropertyService).isKey()){\n\t        //         kp=x;\n\t        //     }\n\t        // })\n\t        // if (kp){\n\t        //     var keyItem=<PropertyEditorInfo>this.item(kp.nameId());\n\t        //     if (keyItem){\n\t        //         var m=keyItem.fld;\n\t        //         var vl=m.getBinding().get();\n\t        //         if ((!vl)||vl.trim().length==0){\n\t        //             this._panel.getBinding().setStatus(UI.errorStatus(\"\"));\n\t        //         }\n\t        //         else{\n\t        //             this._panel.getBinding().setStatus(UI.okStatus());\n\t        //         }\n\t        //     }\n\t        // }\n\t        //\n\t        // var errors;\n\t        //\n\t        // if(this.node.property() && universehelpers.isExampleProperty(this.node.property())) {\n\t        //     var parent = this.node.parent()\n\t        //\n\t        //     if(parent) {\n\t        //         var parsed = parent.parsedType();\n\t        //\n\t        //         var exampleMeta =  _.find((<any>parsed).metaInfo || [], (meta: any): boolean => {\n\t        //             return meta && meta._name === 'example';\n\t        //         });\n\t        //\n\t        //         if(exampleMeta) {\n\t        //             var validateObject = exampleMeta.validateSelf(this.node.types().getAnnotationTypeRegistry());\n\t        //\n\t        //             errors = ((validateObject && validateObject.getErrors()) || []).map(error => {\n\t        //                 return this.node.createIssue(error);\n\t        //             });\n\t        //         }\n\t        //     }\n\t        // } else {\n\t        //     errors = this.node.errors();\n\t        // }\n\t        //\n\t        // this.clearErrors();\n\t        // this.ep.setDisplay(false)\n\t        // if (!resourceRegistry.hasAsyncRequests() && errors&&errors.length>0){\n\t        //     var notFound=[];\n\t        //     errors.forEach(error=>{\n\t        //         if (error.extras&&error.extras.length>0){\n\t        //             error=error.extras[0];\n\t        //         }\n\t        //         var item = error.node && this.item(error.node.name());\n\t        //         if (item){\n\t        //             item.setError(error.message);\n\t        //         }\n\t        //         else{notFound.push(error);}\n\t        //     })\n\t        //     if (notFound.length>0){\n\t        //         this.errorLabel.setIcon(UI.Icon.BUG)\n\t        //         var et=notFound.map(x=>x.node.name()+\":\"+x.message).join(\",\");\n\t        //         if (et.length>100){\n\t        //             et=et.substring(0,100)+\"...\";\n\t        //         }\n\t        //         this.errorLabel.setText(et)\n\t        //         this.ep.setDisplay(true);\n\t        //     }\n\t        //     else{\n\t        //         this.ep.setDisplay(false);\n\t        //     }\n\t        // }\n\t    };\n\t    return TopLevelNode;\n\t}(Category));\n\tvar CheckBox2 = /** @class */ (function (_super) {\n\t    __extends(CheckBox2, _super);\n\t    function CheckBox2() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    CheckBox2.prototype.setLabelWidth = function (n) {\n\t        this.setStyle(\"margin-left\", (n + 2) + \"ch\");\n\t    };\n\t    return CheckBox2;\n\t}(UI.CheckBox));\n\tvar PropertyEditorInfo = /** @class */ (function (_super) {\n\t    __extends(PropertyEditorInfo, _super);\n\t    function PropertyEditorInfo(outlineNode, context) {\n\t        var _this = _super.call(this, outlineNode ? outlineNode.title : \"\", outlineNode ? outlineNode.description : \"\") || this;\n\t        _this.outlineNode = outlineNode;\n\t        _this.context = context;\n\t        _this.rendered = false;\n\t        _this.update = function (newValue, oldValue) {\n\t            if (!_this.rendered) {\n\t                return;\n\t            }\n\t            _this.fromEditorToModel(newValue, oldValue);\n\t        };\n\t        return _this;\n\t    }\n\t    PropertyEditorInfo.prototype.dispose = function () {\n\t        this.outlineNode = null;\n\t        if (!this.fld) {\n\t            return;\n\t        }\n\t        this.fld.getBinding().removeListener(this.update);\n\t    };\n\t    PropertyEditorInfo.prototype.clearErrors = function () {\n\t        this.setError(null);\n\t    };\n\t    PropertyEditorInfo.prototype.setError = function (text) {\n\t        if (text) {\n\t            this.errorLabel.setText(text);\n\t            this.errorLabel.setDisplay(true);\n\t        }\n\t        else {\n\t            if (this.errorLabel) {\n\t                this.errorLabel.setDisplay(false);\n\t            }\n\t        }\n\t    };\n\t    PropertyEditorInfo.prototype.fromEditorToModel = function (newValue, oldValue) {\n\t        var detailsChangeRunnable = new UpdateModelRunnable(this.context, this.outlineNode, newValue);\n\t        var context = this.context;\n\t        context.reconciler.schedule(detailsChangeRunnable).then(function (changedDocuments) {\n\t            if (context.localModel) {\n\t                return;\n\t            }\n\t            assistUtils.applyChangedDocuments(changedDocuments);\n\t            assistUtils.gotoPosition(context.position);\n\t        });\n\t    };\n\t    PropertyEditorInfo.prototype.toLocalValue = function (inputValue) {\n\t        return inputValue;\n\t    };\n\t    PropertyEditorInfo.prototype.toUIValue = function (value) {\n\t        return value;\n\t    };\n\t    PropertyEditorInfo.prototype.fromModelToEditor = function () {\n\t        if (this.fld) {\n\t            this.fld.getBinding().set(this.outlineNode.valueText);\n\t        }\n\t    };\n\t    PropertyEditorInfo.prototype.render = function () {\n\t        var container = new UI.WrapPanel();\n\t        this.errorLabel = UI.label(\"\", UI.Icon.BUG, UI.TextClasses.ERROR);\n\t        this.errorLabel.setDisplay(false);\n\t        this.errorLabel.setStyle(\"margin-left\", (this._title.length + 1) + \"ch\");\n\t        var field = this.createField();\n\t        this.fld = field;\n\t        if (field) {\n\t            field.getBinding().addListener(this.update);\n\t        }\n\t        container.setCaption(this.title());\n\t        this.fromModelToEditor();\n\t        if (field) {\n\t            container.addChild(field);\n\t        }\n\t        container.addChild(this.errorLabel);\n\t        this.rendered = true;\n\t        return container;\n\t    };\n\t    PropertyEditorInfo.prototype.createField = function () {\n\t        return UI.texfField(this.needsSeparateLabel() ? \"\" : this.outlineNode.title, \"\", function (x) { });\n\t    };\n\t    return PropertyEditorInfo;\n\t}(Item));\n\tvar SimpleMultiEditor = /** @class */ (function (_super) {\n\t    __extends(SimpleMultiEditor, _super);\n\t    function SimpleMultiEditor() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    // fromEditorToModel(){\n\t    //     // var field=this.fld;\n\t    //     // var vl=field.getBinding().get();\n\t    //     // if (vl==null){\n\t    //     //     vl=\"\";\n\t    //     // }\n\t    //     // var attrs=this.node.attributes(this.property.nameId());\n\t    //     // var av=attrs.map(x=>escapeValue(\"\"+x.value())).join(\", \");\n\t    //     // if (av==vl){\n\t    //     //     return;\n\t    //     // }\n\t    //     // var ww=vl.split(\",\");\n\t    //     // var vl=ww.filter(x=>x.trim().length>0).map(x=>x.trim());\n\t    //     //\n\t    //     // if(this.node.lowLevel().includePath() && !this.node.lowLevel().unit().resolve(this.node.lowLevel().includePath())) {\n\t    //     //     return;\n\t    //     // }\n\t    //     //\n\t    //     // var attribute = this.node.attrOrCreate(this.property.nameId());\n\t    //     // attribute.setValues(vl)\n\t    //     //\n\t    //     // var root=this.root()\n\t    //     // if (root){\n\t    //     //     root.update(this);\n\t    //     // }\n\t    // }\n\t    SimpleMultiEditor.prototype.fromModelToEditor = function () {\n\t        if (!this.fld) {\n\t            return;\n\t        }\n\t        this.fld.getBinding().set(this.outlineNode.valueText);\n\t    };\n\t    return SimpleMultiEditor;\n\t}(PropertyEditorInfo));\n\tfunction escapeValue(v) {\n\t    if (v.length > 0) {\n\t        if (v.charAt(0) == \"'\") {\n\t            return '\"' + v + '\"';\n\t        }\n\t        if (v.charAt(0) == '\"') {\n\t            return '\"' + v + '\"';\n\t        }\n\t    }\n\t    if (v.indexOf(' ') != -1 || v.indexOf(',') != -1) {\n\t        if (v.indexOf('\"') == -1) {\n\t            return '\"' + v + '\"';\n\t        }\n\t        if (v.indexOf(\"'\") == -1) {\n\t            return \"'\" + v + \"'\";\n\t        }\n\t    }\n\t    return v;\n\t}\n\tvar CheckBoxField = /** @class */ (function (_super) {\n\t    __extends(CheckBoxField, _super);\n\t    function CheckBoxField() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    CheckBoxField.prototype.createField = function () {\n\t        return new CheckBox2(this.outlineNode.title, UI.Icon.NONE, function (x) { });\n\t    };\n\t    CheckBoxField.prototype.toUIValue = function (value) {\n\t        if (!value) {\n\t            return false;\n\t        }\n\t        if (value === true || value.trim() === 'true') {\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    CheckBoxField.prototype.toLocalValue = function (value) {\n\t        return value + \"\";\n\t    };\n\t    return CheckBoxField;\n\t}(PropertyEditorInfo));\n\t// class ActionsItem extends Item{\n\t//\n\t//     constructor(private node:hl.IHighLevelNode){\n\t//         super(\"Actions\",\"\");\n\t//     }\n\t//     render(r:RenderingOptions){\n\t//         return suggestions.generateSuggestionsPanel(this.node);\n\t//     }\n\t//     dispose(){\n\t//         this.node=null;\n\t//     }\n\t//\n\t// }\n\t// class ContextActionsItem extends Item{\n\t//     constructor(node:hl.IHighLevelNode,name:string,private actions:contextActions.IContextDependedAction[]){\n\t//         super(name,\"\");\n\t//     }\n\t//     dispose(){\n\t//\n\t//     }\n\t//\n\t//     render(r:RenderingOptions){\n\t//         var result=UI.hc();\n\t//         result.addChild(UI.h3(this.title()))\n\t//         this.actions.forEach(x=>{\n\t//             result.addChild(UI.button(x.name,UI.ButtonSizes.EXTRA_SMALL,UI.ButtonHighlights.SUCCESS,UI.Icon.CHECKLIST,a=>x.onClick()).margin(3,3,3,3))\n\t//         })\n\t//         return result;\n\t//     }\n\t// }\n\tvar MarkdownFieldUI = /** @class */ (function (_super) {\n\t    __extends(MarkdownFieldUI, _super);\n\t    function MarkdownFieldUI(text, onchange) {\n\t        var _this = _super.call(this, text, onchange) || this;\n\t        _this.margin(0, 0, 6, 12);\n\t        _this.setMini(false);\n\t        _this.setStyle(\"min-height\", \"100px\");\n\t        //this.setStyle(\"max-height\",\"200px\");\n\t        _this.setStyle(\"border\", \"solid\");\n\t        _this.setStyle(\"border-width\", \"1px\");\n\t        _this.setStyle(\"border-radius\", \"2px\");\n\t        _this.setStyle(\"font-size\", \"1.15em\");\n\t        _this.setStyle(\"border-color\", \"rgba(0,0,0,0.2)\");\n\t        _this.setGrammar('source.mdcustom');\n\t        return _this;\n\t    }\n\t    MarkdownFieldUI.prototype.setLabelWidth = function () {\n\t    };\n\t    MarkdownFieldUI.prototype.setLabelHeight = function () {\n\t    };\n\t    MarkdownFieldUI.prototype.setRequired = function (v) {\n\t    };\n\t    return MarkdownFieldUI;\n\t}(UI.AtomEditorElement));\n\tvar XMLField = /** @class */ (function (_super) {\n\t    __extends(XMLField, _super);\n\t    function XMLField(text, onchange) {\n\t        var _this = _super.call(this, text, onchange) || this;\n\t        _this.margin(0, 0, 6, 12);\n\t        _this.setMini(false);\n\t        _this.setStyle(\"min-height\", \"100px\");\n\t        //this.setStyle(\"max-height\",\"200px\");\n\t        _this.setStyle(\"border\", \"solid\");\n\t        _this.setStyle(\"border-width\", \"1px\");\n\t        _this.setStyle(\"border-radius\", \"2px\");\n\t        _this.setStyle(\"font-size\", \"1.15em\");\n\t        _this.setStyle(\"border-color\", \"rgba(0,0,0,0.2)\");\n\t        _this.setGrammar('text.xml');\n\t        return _this;\n\t    }\n\t    XMLField.prototype.setLabelWidth = function () {\n\t    };\n\t    XMLField.prototype.setLabelHeight = function () {\n\t    };\n\t    XMLField.prototype.setRequired = function (v) {\n\t    };\n\t    return XMLField;\n\t}(UI.AtomEditorElement));\n\tvar JSONField = /** @class */ (function (_super) {\n\t    __extends(JSONField, _super);\n\t    function JSONField(text, onchange) {\n\t        var _this = _super.call(this, text, onchange) || this;\n\t        _this.margin(0, 0, 6, 12);\n\t        _this.setMini(false);\n\t        _this.setStyle(\"min-height\", \"100px\");\n\t        //this.setStyle(\"max-height\",\"200px\");\n\t        _this.setStyle(\"border\", \"solid\");\n\t        _this.setStyle(\"border-width\", \"1px\");\n\t        _this.setStyle(\"border-radius\", \"2px\");\n\t        _this.setStyle(\"font-size\", \"1.15em\");\n\t        _this.setStyle(\"border-color\", \"rgba(0,0,0,0.2)\");\n\t        _this.setGrammar('source.json');\n\t        return _this;\n\t    }\n\t    JSONField.prototype.setLabelWidth = function () {\n\t    };\n\t    JSONField.prototype.setLabelHeight = function () {\n\t    };\n\t    JSONField.prototype.setRequired = function (v) {\n\t    };\n\t    return JSONField;\n\t}(UI.AtomEditorElement));\n\tvar MarkdownField = /** @class */ (function (_super) {\n\t    __extends(MarkdownField, _super);\n\t    function MarkdownField() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    MarkdownField.prototype.createField = function () {\n\t        var editor = new MarkdownFieldUI(\"\", function (x) { });\n\t        return editor;\n\t    };\n\t    MarkdownField.prototype.needsSeparateLabel = function () {\n\t        return true;\n\t    };\n\t    return MarkdownField;\n\t}(PropertyEditorInfo));\n\tvar ExampleField = /** @class */ (function (_super) {\n\t    __extends(ExampleField, _super);\n\t    function ExampleField(outlineNode, context) {\n\t        return _super.call(this, outlineNode, context) || this;\n\t    }\n\t    ExampleField.prototype.createField = function () {\n\t        var editor = new JSONField(this.outlineNode.valueText, function (x) { });\n\t        return editor;\n\t    };\n\t    ExampleField.prototype.needsSeparateLabel = function () {\n\t        return true;\n\t    };\n\t    ExampleField.prototype.fromModelToEditor = function () {\n\t    };\n\t    ExampleField.prototype.fromEditorToModel = function (newValue, oldValue) {\n\t    };\n\t    return ExampleField;\n\t}(PropertyEditorInfo));\n\tvar XMLExampleField = /** @class */ (function (_super) {\n\t    __extends(XMLExampleField, _super);\n\t    function XMLExampleField(outlineNode, context) {\n\t        return _super.call(this, outlineNode, context) || this;\n\t    }\n\t    XMLExampleField.prototype.createField = function () {\n\t        var editor = new XMLField(this.outlineNode.valueText, function (x) { });\n\t        return editor;\n\t    };\n\t    XMLExampleField.prototype.needsSeparateLabel = function () {\n\t        return true;\n\t    };\n\t    XMLExampleField.prototype.fromModelToEditor = function () {\n\t    };\n\t    XMLExampleField.prototype.fromEditorToModel = function (newValue, oldValue) {\n\t    };\n\t    return XMLExampleField;\n\t}(PropertyEditorInfo));\n\tvar XMLSchemaField = /** @class */ (function (_super) {\n\t    __extends(XMLSchemaField, _super);\n\t    function XMLSchemaField() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    XMLSchemaField.prototype.createField = function () {\n\t        var editor = new XMLField(\"\", function (x) { });\n\t        return editor;\n\t    };\n\t    XMLSchemaField.prototype.needsSeparateLabel = function () {\n\t        return true;\n\t    };\n\t    return XMLSchemaField;\n\t}(PropertyEditorInfo));\n\tvar JSONSchemaField = /** @class */ (function (_super) {\n\t    __extends(JSONSchemaField, _super);\n\t    function JSONSchemaField() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    JSONSchemaField.prototype.createField = function () {\n\t        var editor = new JSONField(\"\", function (x) { });\n\t        return editor;\n\t    };\n\t    JSONSchemaField.prototype.needsSeparateLabel = function () {\n\t        return true;\n\t    };\n\t    return JSONSchemaField;\n\t}(PropertyEditorInfo));\n\tvar SelectBox = /** @class */ (function (_super) {\n\t    __extends(SelectBox, _super);\n\t    function SelectBox(outlineNode, context) {\n\t        var _this = _super.call(this, outlineNode, context) || this;\n\t        _this.outlineNode = outlineNode;\n\t        return _this;\n\t    }\n\t    SelectBox.prototype.createField = function () {\n\t        var options = this.outlineNode.options ? this.outlineNode.options : [];\n\t        var select = new UI.SelectField(this.outlineNode.title, function (x) { }, \"\", UI.Icon.NONE, options);\n\t        select.getActualField().setOptions(options);\n\t        return select;\n\t    };\n\t    return SelectBox;\n\t}(PropertyEditorInfo));\n\tvar TypeSelectBox = /** @class */ (function (_super) {\n\t    __extends(TypeSelectBox, _super);\n\t    function TypeSelectBox() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    TypeSelectBox.prototype.fromEditorToModel = function (newValue, oldValue) {\n\t        // //current implementation only allows changing the facets of certain types for safety\n\t        // //TODO change this to arbitrary facets (remove type filtering)\n\t        //\n\t        // var oldNames : string[] = [];\n\t        // var savedAttrs = [];\n\t        // if (newValue && oldValue) {\n\t        //     try {\n\t        //         this.node.definition().allSuperTypes().forEach(superType=> {\n\t        //             if (this.isAllowedTypeToReplaceFacets(superType)) {\n\t        //                 this.addTypeFacets(superType, oldNames)\n\t        //             }\n\t        //         })\n\t        //\n\t        //         savedAttrs = [].concat(this.node.attrs())\n\t        //     } catch (err) {console.log(err)}\n\t        // }\n\t        //\n\t        // super.fromEditorToModel();\n\t        //\n\t        // if (newValue && oldValue) {\n\t        //     try {\n\t        //         //collecting facets allowed to remove\n\t        //         var currentUniverse = this.node.definition().universe();\n\t        //         var names : string[] = [];\n\t        //\n\t        //         this.node.definition().allSuperTypes().forEach(superType=>{\n\t        //             if (this.isAllowedTypeToReplaceFacets(superType)) {\n\t        //                 this.addTypeFacets(superType, names)\n\t        //             }\n\t        //         })\n\t        //\n\t        //         if (oldNames.length > 0 && names.length > 0) {\n\t        //             savedAttrs.forEach(attribute => {\n\t        //                 if (_.find(oldNames, facetName => facetName == attribute.name())\n\t        //                     && !_.find(names, facetName => facetName == attribute.name())) {\n\t        //\n\t        //                     this.node.remove(attribute)\n\t        //                 }\n\t        //             })\n\t        //         }\n\t        //     } catch (err) {console.log(err)}\n\t        // }\n\t    };\n\t    return TypeSelectBox;\n\t}(SelectBox));\n\tvar TreeField = /** @class */ (function (_super) {\n\t    __extends(TreeField, _super);\n\t    function TreeField(outlineNode, context) {\n\t        var _this = _super.call(this) || this;\n\t        _this.context = context;\n\t        var renderer = {\n\t            render: function (node) {\n\t                var left = UI.label(node.title, UI.Icon.CIRCUIT_BOARD, UI.TextClasses.HIGHLIGHT);\n\t                var right = UI.label(node.valueText ? (\":\" + node.valueText) : \"\", UI.Icon.NONE, UI.TextClasses.SUCCESS);\n\t                var result = UI.hc(left, right);\n\t                return result;\n\t            }\n\t        };\n\t        var getChildren = function (node) {\n\t            return node.children ? node.children : [];\n\t        };\n\t        var viewer = UI.treeViewer(getChildren, renderer, function (x) { return x.title; });\n\t        var inputValue = {\n\t            children: [outlineNode]\n\t        };\n\t        viewer.setInput(inputValue);\n\t        _this.addChild(UI.label(outlineNode.title));\n\t        _this.addChild(viewer);\n\t        return _this;\n\t    }\n\t    TreeField.prototype.setLabelWidth = function () {\n\t    };\n\t    TreeField.prototype.setLabelHeight = function () {\n\t    };\n\t    TreeField.prototype.setRequired = function (v) {\n\t    };\n\t    return TreeField;\n\t}(UI.Panel));\n\tvar StructuredField = /** @class */ (function (_super) {\n\t    __extends(StructuredField, _super);\n\t    function StructuredField() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    StructuredField.prototype.createField = function () {\n\t        var children = this.outlineNode.children;\n\t        if (!children || children.length != 1)\n\t            return null;\n\t        var tm = new TreeField(children[0], this.context);\n\t        return tm;\n\t    };\n\t    return StructuredField;\n\t}(PropertyEditorInfo));\n\tvar LowLevelTreeField = /** @class */ (function (_super) {\n\t    __extends(LowLevelTreeField, _super);\n\t    function LowLevelTreeField() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    LowLevelTreeField.prototype.createField = function () {\n\t        var children = this.outlineNode.children;\n\t        if (!children || children.length != 1)\n\t            return null;\n\t        var tm = new TreeField(children[0], this.context);\n\t        return tm;\n\t    };\n\t    return LowLevelTreeField;\n\t}(PropertyEditorInfo));\n\tvar ActionsItem = /** @class */ (function (_super) {\n\t    __extends(ActionsItem, _super);\n\t    function ActionsItem(context) {\n\t        var _this = _super.call(this, \"Actions\", \"\") || this;\n\t        _this.context = context;\n\t        _this.nodes = [];\n\t        return _this;\n\t    }\n\t    ActionsItem.prototype.addNode = function (node) {\n\t        this.nodes.push(node);\n\t    };\n\t    ActionsItem.prototype.render = function (r) {\n\t        var _this = this;\n\t        var result = UI.vc();\n\t        var hc = UI.hc();\n\t        result.addChild(UI.h3(\"Insertions and Delete: \"));\n\t        result.addChild(hc);\n\t        this.nodes.forEach(function (node) {\n\t            if (node.subType == \"INSERT\") {\n\t                hc.addChild(UI.button(node.title, UI.ButtonSizes.EXTRA_SMALL, UI.ButtonHighlights.INFO, UI.Icon.NONE, function (x) {\n\t                    _this.run(node.id);\n\t                }).margin(3, 3, 3, 3));\n\t            }\n\t        });\n\t        this.nodes.forEach(function (node) {\n\t            if (node.subType == \"INSERT_VALUE\") {\n\t                hc.addChild(UI.button(node.title, UI.ButtonSizes.EXTRA_SMALL, UI.ButtonHighlights.WARNING, UI.Icon.NONE, function (x) {\n\t                    _this.run(node.id);\n\t                }).margin(3, 3, 3, 3));\n\t            }\n\t        });\n\t        this.nodes.forEach(function (node) {\n\t            if (node.subType == \"DELETE\") {\n\t                hc.addChild(UI.button(node.title, UI.ButtonSizes.EXTRA_SMALL, UI.ButtonHighlights.ERROR, UI.Icon.NONE, function (x) {\n\t                    _this.run(node.id);\n\t                }).margin(3, 3, 3, 3));\n\t            }\n\t        });\n\t        return result;\n\t    };\n\t    ActionsItem.prototype.run = function (actionID) {\n\t        var connection = ramlServer.getNodeClientConnection();\n\t        connection.executeDetailsAction(this.context.uri, actionID, this.context.position).then((function (changedDocuments) {\n\t            assist_utils_1.applyChangedDocuments(changedDocuments);\n\t        }));\n\t    };\n\t    ActionsItem.prototype.dispose = function () {\n\t    };\n\t    return ActionsItem;\n\t}(Item));\n\t/**\n\t * Instanceof check for ActionsItem.\n\t * @param item\n\t * @return {boolean}\n\t */\n\tfunction isInstanceOfActionsItem(item) {\n\t    return item.addNode != null;\n\t}\n\tvar CustomActionsItem = /** @class */ (function (_super) {\n\t    __extends(CustomActionsItem, _super);\n\t    function CustomActionsItem(context) {\n\t        var _this = _super.call(this, \"Actions\", \"\") || this;\n\t        _this.context = context;\n\t        _this.nodes = [];\n\t        return _this;\n\t    }\n\t    CustomActionsItem.prototype.addAction = function (node) {\n\t        this.nodes.push(node);\n\t    };\n\t    CustomActionsItem.prototype.render = function (r) {\n\t        var _this = this;\n\t        var result = UI.vc();\n\t        var hc = UI.hc();\n\t        result.addChild(UI.h3(\"Custom Actions: \"));\n\t        result.addChild(hc);\n\t        this.nodes.forEach(function (node) {\n\t            hc.addChild(UI.button(node.title, UI.ButtonSizes.EXTRA_SMALL, UI.ButtonHighlights.INFO, UI.Icon.NONE, function (x) {\n\t                _this.run(node.id);\n\t            }).margin(3, 3, 3, 3));\n\t        });\n\t        return result;\n\t    };\n\t    CustomActionsItem.prototype.run = function (actionID) {\n\t        contextMenuImpl_1.launchServerActionByID(this.context.uri, actionID, this.context.position);\n\t    };\n\t    CustomActionsItem.prototype.dispose = function () {\n\t    };\n\t    return CustomActionsItem;\n\t}(Item));\n\t/**\n\t * Instanceof check for ActionsItem.\n\t * @param item\n\t * @return {boolean}\n\t */\n\tfunction isInstanceOfCustomActionsItem(item) {\n\t    return item.addAction != null;\n\t}\n\t// function category(p:hl.IProperty,node:hl.IHighLevelNode):string{\n\t//     if (p.getAdapter(def.RAMLPropertyService).isKey()||p.isRequired()){\n\t//         return null;\n\t//     }\n\t//     if (p.domain()&&!p.domain().getAdapter(def.RAMLService).isUserDefined()) {\n\t//         if (universehelpers.isDocumentationProperty(p) ||\n\t//             universehelpers.isUsageProperty(p) ||\n\t//             universehelpers.isDescriptionProperty(p) ||\n\t//             universehelpers.isDisplayNameProperty(p) ||\n\t//             universehelpers.isTitleProperty(p)) {\n\t//             return \"Documentation\";\n\t//         }\n\t//         if (universehelpers.isAnnotationsProperty(p) ||\n\t//             universehelpers.isIsProperty(p) ||\n\t//             universehelpers.isSecuredByProperty(p) ||\n\t//             (universehelpers.isTypeProperty(p)&&!p.getAdapter(def.RAMLPropertyService).isTypeExpr())) {\n\t//             return \"References\";\n\t//         }\n\t//         if (universehelpers.isProtocolsProperty(p)){\n\t//             return \"General\";\n\t//         }\n\t//     }\n\t//\n\t//     if (universehelpers.isTypeProperty(p)){\n\t//         if (p.domain()&&!p.domain().getAdapter(def.RAMLService).isUserDefined()){\n\t//             return null;\n\t//         }\n\t//     }\n\t//     if (node.property()) {\n\t//         if (p.domain() && p.domain() != node.property().range()) {\n\t//             return \"Facets\";\n\t//         }\n\t//     }\n\t//     return \"General\";\n\t// }\n\t//\n\t// var valueOptions = function (x:hl.IProperty, node:hl.IHighLevelNode):string[] {\n\t//     var vls = search.enumValues(x,node);\n\t//     if (universehelpers.isNameProperty(x)){\n\t//         if (node.definition().isAssignableFrom(universe.Universe10.TypeDeclaration.name)){\n\t//             if (node.property()&&universehelpers.isBodyProperty(node.property())){\n\t//                 if (!(node.property() instanceof def.UserDefinedProp)) {\n\t//                     if (node.parent()&&\n\t//                         universehelpers.isMethodType(node.parent().definition())){\n\t//                         return [\"application/json\", \"application/xml\",\"multipart/form-data\",\"application/x-www-form-urlencoded\"]\n\t//                     }\n\t//                     return [\"application/json\", \"application/xml\"]\n\t//                 }\n\t//             }\n\t//         }\n\t//     }\n\t//     if ((!vls) || vls.length == 0) {\n\t//         var sug = (<def.Property>x).suggester()\n\t//         if (sug) {\n\t//             vls = sug(node);\n\t//\n\t//         }\n\t//         if ((!vls) || vls.length == 0) {\n\t//             vls = (<def.Property>x).getOftenKeys();\n\t//\n\t//         }\n\t//     }\n\t//     return _.unique(vls);\n\t// };\n\t//\n\t// function addExampleControl(property: hl.IProperty, node : hl.IHighLevelNode,\n\t//                            exampleElement : hl.IHighLevelNode, example : def.rt.nominalTypes.IExpandableExample,\n\t//                            container : TopLevelNode) {\n\t//\n\t//     if (example.isYAML()) {\n\t//         container.addItemToCategory(category(property, node),\n\t//             new LowLevelTreeField(property, node, exampleElement.lowLevel(), example.name()));\n\t//     } else if (example.isJSONString()) {\n\t//         container.addItemToCategory(category(property, node),\n\t//             new ExampleField(property, node, example.asString(), example.name()));\n\t//     } else if (example.isXMLString()) {\n\t//         container.addItemToCategory(category(property, node),\n\t//             new XMLExampleField(property, node, example.asString(), example.name()));\n\t//     }\n\t// }\n\tfunction buildItem(detailsNode, context, dialog) {\n\t    var root = new TopLevelNode(detailsNode, context);\n\t    try {\n\t        if (detailsNode && detailsNode.children) {\n\t            for (var _i = 0, _a = detailsNode.children; _i < _a.length; _i++) {\n\t                var child = _a[_i];\n\t                if (child.type == \"CATEGORY\") {\n\t                    var categoryName = child.title;\n\t                    if (child.children) {\n\t                        for (var _b = 0, _c = child.children; _b < _c.length; _b++) {\n\t                            var childOfChild = _c[_b];\n\t                            buildItemInCategory(childOfChild, root, categoryName, context);\n\t                        }\n\t                    }\n\t                }\n\t                else {\n\t                    buildItemInCategory(child, root, null, context);\n\t                }\n\t            }\n\t        }\n\t    }\n\t    catch (error) {\n\t        console.log(error);\n\t    }\n\t    return root;\n\t}\n\texports.buildItem = buildItem;\n\tfunction buildItemInCategory(detailsNode, root, categoryName, context) {\n\t    var item = null;\n\t    try {\n\t        if (detailsNode.type == \"CHECKBOX\") {\n\t            item = new CheckBoxField(detailsNode, context);\n\t        }\n\t        else if (detailsNode.type == \"JSONSCHEMA\"\n\t            && detailsNode.valueText !== null) {\n\t            item = new JSONSchemaField(detailsNode, context);\n\t        }\n\t        else if (detailsNode.type == \"XMLSCHEMA\"\n\t            && detailsNode.valueText !== null) {\n\t            item = new XMLSchemaField(detailsNode, context);\n\t        }\n\t        else if (detailsNode.type == \"MARKDOWN\") {\n\t            item = new MarkdownField(detailsNode, context);\n\t        }\n\t        else if (detailsNode.type == \"SELECTBOX\"\n\t            && detailsNode.options !== null) {\n\t            item = new SelectBox(detailsNode, context);\n\t        }\n\t        else if (detailsNode.type == \"MULTIEDITOR\") {\n\t            item = new SimpleMultiEditor(detailsNode, context);\n\t        }\n\t        else if (detailsNode.type == \"TREE\") {\n\t            item = new LowLevelTreeField(detailsNode, context);\n\t        }\n\t        else if (detailsNode.type == \"STRUCTURED\") {\n\t            item = new StructuredField(detailsNode, context);\n\t        }\n\t        else if (detailsNode.type == \"TYPEDISPLAY\") {\n\t            item = new TypeDisplayItem(detailsNode, context);\n\t        }\n\t        else if (detailsNode.type == \"TYPESELECT\") {\n\t            item = new TypeSelectBox(detailsNode, context);\n\t        }\n\t        else if (detailsNode.type == \"JSONEXAMPLE\"\n\t            && detailsNode.valueText !== null) {\n\t            item = new ExampleField(detailsNode, context);\n\t        }\n\t        else if (detailsNode.type == \"XMLEXAMPLE\"\n\t            && detailsNode.valueText !== null) {\n\t            item = new XMLExampleField(detailsNode, context);\n\t        }\n\t        else if (detailsNode.type == \"ATTRIBUTETEXT\") {\n\t            item = new PropertyEditorInfo(detailsNode, context);\n\t        }\n\t        else if (detailsNode.type == \"DETAILS_ACTION\") {\n\t            if (detailsNode.subType != \"CUSTOM_ACTION\") {\n\t                var actionItem = findOrCreateActionItemInCategory(root, categoryName, context);\n\t                actionItem.addNode(detailsNode);\n\t            }\n\t            else {\n\t                var customActionItem = findOrCreateCustomActionItemInCategory(root, categoryName, context);\n\t                customActionItem.addAction(detailsNode);\n\t            }\n\t        }\n\t    }\n\t    catch (error) {\n\t        console.log(error);\n\t    }\n\t    if (item != null) {\n\t        root.addItemToCategory(categoryName, item);\n\t    }\n\t    else {\n\t        console.log(\"Can not recognize element \" + detailsNode.type);\n\t    }\n\t}\n\tfunction findOrCreateActionItemInCategory(root, categoryName, context) {\n\t    var category = root.subCategoryByNameOrCreate(categoryName);\n\t    for (var _i = 0, _a = category.children(); _i < _a.length; _i++) {\n\t        var child = _a[_i];\n\t        if (isInstanceOfActionsItem(child)) {\n\t            return child;\n\t        }\n\t    }\n\t    var actionsItem = new ActionsItem(context);\n\t    category.children().unshift(actionsItem);\n\t    return actionsItem;\n\t}\n\tfunction findActionItemInCategory(root, categoryName, context) {\n\t    var category = root.subCategoryByNameOrCreate(categoryName);\n\t    for (var _i = 0, _a = category.children(); _i < _a.length; _i++) {\n\t        var child = _a[_i];\n\t        if (isInstanceOfActionsItem(child)) {\n\t            return child;\n\t        }\n\t    }\n\t    return null;\n\t}\n\tfunction findOrCreateCustomActionItemInCategory(root, categoryName, context) {\n\t    var category = root.subCategoryByNameOrCreate(categoryName);\n\t    for (var _i = 0, _a = category.children(); _i < _a.length; _i++) {\n\t        var child = _a[_i];\n\t        if (isInstanceOfCustomActionsItem(child)) {\n\t            return child;\n\t        }\n\t    }\n\t    var customActionsItem = new CustomActionsItem(context);\n\t    var inserterActionsItem = findActionItemInCategory(root, categoryName, context);\n\t    if (inserterActionsItem) {\n\t        category.children().splice(1, 0, customActionsItem);\n\t    }\n\t    else {\n\t        category.children().unshift(customActionsItem);\n\t    }\n\t    return customActionsItem;\n\t}\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2VkaXRvci10b29scy9kZXRhaWxFbGVtZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsbURBQW1EOzs7Ozs7Ozs7Ozs7QUFNbkQsOEJBQThCO0FBRTlCLGdDQUFnQztBQUtoQyxpREFBaUQ7QUFDakQscURBQXdEO0FBQ3hELGdEQUFtRDtBQUtuRCx3REFBOEQ7QUFDOUQsbUVBRXdDO0FBRXhDLElBQUksbUJBQTBCLENBQUM7QUFDL0IsSUFBSSxRQUFRLEdBQVMsS0FBSyxDQUFDO0FBZTNCOztHQUVHO0FBQ0g7SUFJSSw2QkFBb0IsT0FBdUIsRUFBVSxJQUFnQyxFQUNqRSxRQUFpQztRQURqQyxZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQUFVLFNBQUksR0FBSixJQUFJLENBQTRCO1FBQ2pFLGFBQVEsR0FBUixRQUFRLENBQXlCO1FBSDdDLGNBQVMsR0FBRyxLQUFLLENBQUM7SUFLMUIsQ0FBQztJQUVEOzs7T0FHRztJQUNILGlDQUFHLEdBQUg7UUFDSSxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBRXRELE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9CLENBQUM7UUFFRCxJQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUV4RCxNQUFNLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUN2RSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVEOzs7O09BSUc7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QUNqQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUM7S0FDSjtJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUVELGdEQUFnRCxJQUFrQixFQUFFLFlBQW9CLEVBQ3hDLE9BQXVCO0lBQ25FLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM5RCxHQUFHLENBQUMsQ0FBZ0IsVUFBbUIsRUFBbkIsS0FBQSxRQUFRLENBQUMsUUFBUSxFQUFFLEVBQW5CLGNBQW1CLEVBQW5CLElBQW1CO1FBQWxDLElBQU0sS0FBSyxTQUFBO1FBQ1osRUFBRSxDQUFDLENBQUMsNkJBQTZCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQztLQUNKO0lBRUQsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXpELElBQU0sbUJBQW1CLEdBQUcsd0JBQXdCLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUVsRixFQUFFLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7UUFDdEIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ0osUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxNQUFNLENBQUMsaUJBQWlCLENBQUM7QUFDN0IsQ0FBQyIsImZpbGUiOiJzcmMvYXRvbS9lZGl0b3ItdG9vbHMvZGV0YWlsRWxlbWVudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy9tYWluLmQudHNcIiAvPlxuXG5pbXBvcnQgZnMgPSByZXF1aXJlICgnZnMnKVxuaW1wb3J0IHBhdGggPSByZXF1aXJlICgncGF0aCcpXG5cblxuaW1wb3J0IF89cmVxdWlyZShcInVuZGVyc2NvcmVcIilcbmltcG9ydCBwcm92aWRlcj1yZXF1aXJlKFwiLi4vc3VnZ2VzdGlvbi9wcm92aWRlclwiKVxuaW1wb3J0IFVJPXJlcXVpcmUoXCJhdG9tLXVpLWxpYlwiKVxuaW1wb3J0IHhtbHV0aWw9cmVxdWlyZShcIi4uLy4uL3V0aWwveG1sdXRpbFwiKVxuaW1wb3J0IHNoZW1hZ2VuPXJlcXVpcmUoXCIuLi8uLi91dGlsL3NjaGVtYUdlbmVyYXRvclwiKVxuaW1wb3J0IFNwYWNlUGVuVmlld3MgPSByZXF1aXJlKCdhdG9tLXNwYWNlLXBlbi12aWV3cycpXG5pbXBvcnQgdG9vbHRpcD1yZXF1aXJlKFwiLi4vY29yZS90b29sdGlwLW1hbmFnZXJcIilcbi8vaW1wb3J0IGNvbnRleHRBY3Rpb25zID0gcmVxdWlyZShcInJhbWwtYWN0aW9uc1wiKVxuaW1wb3J0IGFzc2lzdFV0aWxzID0gcmVxdWlyZShcIi4uL2RpYWxvZ3MvYXNzaXN0LXV0aWxzXCIpO1xuaW1wb3J0IHJhbWxTZXJ2ZXIgPSByZXF1aXJlKFwiYXBpLWxhbmd1YWdlLXNlcnZlclwiKTtcbmltcG9ydCB7XG4gICAgUnVubmFibGUsXG4gICAgUmVjb25jaWxlclxufSBmcm9tIFwiLi9yZWNvbmNpbGVyXCJcbmltcG9ydCB7YXBwbHlDaGFuZ2VkRG9jdW1lbnRzfSBmcm9tIFwiLi4vZGlhbG9ncy9hc3Npc3QtdXRpbHNcIjtcbmltcG9ydCB7XG4gICAgbGF1bmNoU2VydmVyQWN0aW9uQnlJRFxufSBmcm9tIFwiLi4vY29udGV4dC1tZW51L2NvbnRleHRNZW51SW1wbFwiXG5cbnZhciBsYXN0U2VsZWN0ZWRDYXB0aW9uOnN0cmluZztcbnZhciBpblJlbmRlcjpib29sZWFuPWZhbHNlO1xuXG5pbnRlcmZhY2UgUmVuZGVyaW5nT3B0aW9uc3tcbiAgICBzaG93RGVzY3JpcHRpb24/OmJvb2xlYW47XG4gICAgc2hvd0hlYWRlcj86Ym9vbGVhbjtcbiAgICBjb2xsYXBzaWJsZT86Ym9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZXRhaWxzQ29udGV4dCB7XG4gICAgdXJpOiBzdHJpbmcsXG4gICAgcG9zaXRpb246IG51bWJlcixcbiAgICByZWNvbmNpbGVyOiBSZWNvbmNpbGVyLFxuICAgIGxvY2FsTW9kZWw6IGFueVxufVxuXG4vKipcbiAqIFJ1bm5hYmxlIHRoYXQgdXBkYXRlcyBkZXRhaWxzIHZhbHVlcyByZW1vdGVseVxuICovXG5jbGFzcyBVcGRhdGVNb2RlbFJ1bm5hYmxlIGltcGxlbWVudHMgUnVubmFibGU8cmFtbFNlcnZlci5JQ2hhbmdlZERvY3VtZW50W10+IHtcblxuICAgIHByaXZhdGUgY2FuY2VsbGVkID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRleHQ6IERldGFpbHNDb250ZXh0LCBwcml2YXRlIGl0ZW06IHJhbWxTZXJ2ZXIuRGV0YWlsc0l0ZW1KU09OLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbmV3VmFsdWU6IHN0cmluZ3wgbnVtYmVyfCBib29sZWFuKSB7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyB0aGUgYWN0dWFsIGJ1c2luZXNzIGxvZ2ljcy5cbiAgICAgKiBTaG91bGQgcmVzb2x2ZSB0aGUgcHJvbWlzZSB3aGVuIGZpbmlzaGVkLlxuICAgICAqL1xuICAgIHJ1bigpOiBQcm9taXNlPHJhbWxTZXJ2ZXIuSUNoYW5nZWREb2N1bWVudFtdPiB7XG4gICAgICAgIGlmKHRoaXMuY29udGV4dC5sb2NhbE1vZGVsKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQubG9jYWxNb2RlbFt0aGlzLml0ZW0uaWRdID0gdGhpcy5uZXdWYWx1ZTtcblxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gcmFtbFNlcnZlci5nZXROb2RlQ2xpZW50Q29ubmVjdGlvbigpO1xuXG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uLmNoYW5nZURldGFpbFZhbHVlKHRoaXMuY29udGV4dC51cmksIHRoaXMuY29udGV4dC5wb3NpdGlvbixcbiAgICAgICAgICAgIHRoaXMuaXRlbS5pZCwgdGhpcy5uZXdWYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0d28gcnVubmFibGUgY29uZmxpY3Qgd2l0aCBlYWNoIG90aGVyLlxuICAgICAqIE11c3Qgd29yayBmYXN0IGFzIGl0cyBjYWxsZWQgb2Z0ZW4uXG4gICAgICogQHBhcmFtIG90aGVyXG4gICAgICovXG4gICAgY29uZmxpY3RzKG90aGVyOiBSdW5uYWJsZTxhbnk+KTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChpc1VwZGF0ZU1vZGVsUnVubmFibGUob3RoZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRVcmkoKSA9PT0gb3RoZXIuZ2V0VXJpKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FuY2VscyB0aGUgcnVubmFibGUuIHJ1bigpIG1ldGhvZCBzaG91bGQgZG8gbm90aGluZyBpZiBsYXVuY2hlZCBsYXRlcixcbiAgICAgKiBpZiBjYW5jZWwgaXMgY2FsbGVkIGR1cmluZyB0aGUgcnVuKCkgbWV0aG9kIGV4ZWN1dGlvbiwgcnVuKCkgc2hvdWxkIHN0b3AgYXMgc29vbiBhcyBpdCBjYW4uXG4gICAgICovXG4gICAgY2FuY2VsKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBjYW5jZWwoKSBtZXRob2Qgd2FzIGNhbGxlZCBhdCBsZWFzdCBvbmNlLlxuICAgICAqL1xuICAgIGlzQ2FuY2VsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbmNlbGxlZDtcbiAgICB9XG5cbiAgICBnZXRVcmkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQudXJpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBJbnN0YW5jZW9mIGZvciBVcGRhdGVNb2RlbFJ1bm5hYmxlXG4gKiBAcGFyYW0gcnVubmFibGVcbiAqL1xuZnVuY3Rpb24gaXNVcGRhdGVNb2RlbFJ1bm5hYmxlKHJ1bm5hYmxlOiBSdW5uYWJsZTxhbnk+KSA6IHJ1bm5hYmxlIGlzIFVwZGF0ZU1vZGVsUnVubmFibGUge1xuICAgIHJldHVybiAocnVubmFibGUgYXMgVXBkYXRlTW9kZWxSdW5uYWJsZSkuZ2V0VXJpICE9IG51bGw7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJdGVte1xuXG4gICAgcGFyZW50Okl0ZW07XG5cbiAgICBsaXN0ZW5lcnM6KChpOkl0ZW0pPT52b2lkKSBbXSA9W11cblxuICAgIGFic3RyYWN0IGRpc3Bvc2UoKTp2b2lkXG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgX3RpdGxlOnN0cmluZyxwdWJsaWMgZGVzY3JpcHRpb246c3RyaW5nPVwiXCIpe1xuXG4gICAgfVxuXG4gICAgbmVlZHNTZXBhcmF0ZUxhYmVsKCl7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBkZXRhY2goKXtcbiAgICAgICAgdGhpcy5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4oKS5mb3JFYWNoKHg9PntcbiAgICAgICAgICAgIGlmICh4LmRldGFjaCl4LmRldGFjaCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGRMaXN0ZW5lcihyOihpOkl0ZW0pPT52b2lkKXtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaChyKTtcbiAgICB9XG5cbiAgICByZW1vdmVMaXN0ZW5lcihyOihpOkl0ZW0pPT52b2lkKXtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnM9dGhpcy5saXN0ZW5lcnMuZmlsdGVyKHg9PnghPXIpO1xuICAgIH1cblxuICAgIGFkZChpOkl0ZW0pe1xuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBzdXBwb3J0ZWRcIilcbiAgICB9XG5cbiAgICByb290KCl7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQucm9vdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRpdGxlKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl90aXRsZTtcbiAgICB9XG5cbiAgICBjaGlsZHJlbigpOkl0ZW1bXXtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHNldERlc2NyaXB0aW9uKGRlc2M6c3RyaW5nKXtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbj1kZXNjO1xuICAgIH1cblxuICAgIHNldFRpdGxlKHQ6c3RyaW5nKXtcbiAgICAgICAgdGhpcy5fdGl0bGU9dDtcbiAgICB9XG5cbiAgICByZW5kZXIocjpSZW5kZXJpbmdPcHRpb25zPXt9KTpVSS5VSUNvbXBvbmVudHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IEltcGxlbWVudGVkXCIpXG4gICAgfVxuXG4gICAgaXRlbShuYW1lOnN0cmluZyk6SXRlbXtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc2V0RXJyb3IodGV4dDpzdHJpbmcpe1xuXG4gICAgfVxuXG4gICAgY2xlYXJFcnJvcnMoKXtcblxuICAgIH1cblxufVxuXG5leHBvcnQgY2xhc3MgVHlwZURpc3BsYXlJdGVtIGV4dGVuZHMgSXRlbXtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZGV0YWlsc05vZGU6cmFtbFNlcnZlci5EZXRhaWxzSXRlbUpTT04sIHByb3RlY3RlZCBjb250ZXh0OiBEZXRhaWxzQ29udGV4dCl7XG4gICAgICAgIHN1cGVyKFwiVHlwZSBcIiArIGRldGFpbHNOb2RlLnRpdGxlLFwiXCIpO1xuICAgIH1cbiAgICByZW5kZXIocjpSZW5kZXJpbmdPcHRpb25zKXtcbiAgICAgICAgbGV0IGNvbnRhaW5lcj1uZXcgVUkuV3JhcFBhbmVsKCk7XG5cbiAgICAgICAgY29udGFpbmVyLnNldENhcHRpb24odGhpcy50aXRsZSgpKTtcblxuICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgICAgICAvL3JldHVybiB0eXBlRGlzcGxheS5yZW5kZXIodGhpcy5kZXRhaWxzTm9kZSk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKXtcblxuICAgIH1cbn1cbmNsYXNzIENhdGVnb3J5IGV4dGVuZHMgSXRlbXtcblxuICAgIF9jaGlsZHJlbjpJdGVtW109W11cbiAgICBkZXNjcmlwdGlvbkxhYmVsOlVJLlVJQ29tcG9uZW50O1xuICAgIHN1YkNhdGVnb3JpZXM6IFVJLlVJQ29tcG9uZW50O1xuICAgIF9yZXN1bHQ6VUkuUGFuZWw7XG5cbiAgICBhZGQoaTpJdGVtKXtcbiAgICAgICAgaS5wYXJlbnQ9dGhpcztcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4ucHVzaChpKTtcbiAgICB9XG5cbiAgICBjaGlsZHJlbigpe1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW47XG4gICAgfVxuICAgIHBsYWluQ2hpbGRyZW4oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuLmZpbHRlcih4PT4hKHggaW5zdGFuY2VvZiBDYXRlZ29yeSkpO1xuICAgIH1cbiAgICBjYXRlZ29yaWVzKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbi5maWx0ZXIoeD0+KHggaW5zdGFuY2VvZiBDYXRlZ29yeSkpO1xuICAgIH1cblxuICAgIGl0ZW0obmFtZTpzdHJpbmcpOkl0ZW17XG4gICAgICAgIHZhciBpdDpJdGVtO1xuICAgICAgICB0aGlzLl9jaGlsZHJlbi5mb3JFYWNoKHg9PntcbiAgICAgICAgICAgIGlmICh4LnRpdGxlKCk9PW5hbWUpe1xuICAgICAgICAgICAgICAgIGl0PXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcnI9eC5pdGVtKG5hbWUpO1xuICAgICAgICAgICAgaWYgKHJyKXtcbiAgICAgICAgICAgICAgICBpdD1ycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBpdDtcbiAgICB9XG5cbiAgICByZW5kZXIocjpSZW5kZXJpbmdPcHRpb25zPXt9KTpVSS5VSUNvbXBvbmVudHtcbiAgICAgICAgdmFyIHNlY3Rpb249dGhpcy5jcmVhdGVTZWN0aW9uKHIpO1xuICAgICAgICB0aGlzLl9yZXN1bHQ9c2VjdGlvbjtcbiAgICAgICAgaWYgKHRoaXMuZGVzY3JpcHRpb24mJnIuc2hvd0Rlc2NyaXB0aW9uKXtcbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb25MYWJlbD1VSS5sYWJlbCh0aGlzLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHNlY3Rpb24uYWRkQ2hpbGQodGhpcy5kZXNjcmlwdGlvbkxhYmVsKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRyaWJ1dGVUb3Aoc2VjdGlvbik7XG4gICAgICAgIHRoaXMucGxhaW5DaGlsZHJlbigpLmZvckVhY2goeD0+dGhpcy5hZGRDaGlsZChzZWN0aW9uLHgpKTtcblxuICAgICAgICB2YXIgd3JhcHBlZENoaWxkPXRoaXMuY3JlYXRlV3JhcHBlZENoaWxkKHNlY3Rpb24pO1xuICAgICAgICB0aGlzLnN1YkNhdGVnb3JpZXM9d3JhcHBlZENoaWxkO1xuICAgICAgICB2YXIgY2F0cz10aGlzLmNhdGVnb3JpZXMoKVxuICAgICAgICB2YXIgcmVtYXA9e31cbiAgICAgICAgY2F0cy5mb3JFYWNoKHg9PnJlbWFwW3gudGl0bGUoKV09eCk7XG4gICAgICAgIHZhciBuZXdDYXRzPVtdO1xuICAgICAgICBpZiAocmVtYXBbXCJHZW5lcmFsXCJdKXtcbiAgICAgICAgICAgIG5ld0NhdHMucHVzaChyZW1hcFtcIkdlbmVyYWxcIl0pO1xuICAgICAgICAgICAgZGVsZXRlIHJlbWFwW1wiR2VuZXJhbFwiXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVtYXBbXCJGYWNldHNcIl0pe1xuICAgICAgICAgICAgbmV3Q2F0cy5wdXNoKHJlbWFwW1wiRmFjZXRzXCJdKTtcbiAgICAgICAgICAgIGRlbGV0ZSByZW1hcFtcIkZhY2V0c1wiXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBjIGluIHJlbWFwKXtcbiAgICAgICAgICAgIG5ld0NhdHMucHVzaChyZW1hcFtjXSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3Q2F0cy5mb3JFYWNoKHg9PnRoaXMuYWRkQ2hpbGQod3JhcHBlZENoaWxkLHgpKTtcbiAgICAgICAgcmV0dXJuIHNlY3Rpb247XG4gICAgfVxuXG4gICAgZGV0YWNoKCl7XG4gICAgICAgIHN1cGVyLmRldGFjaCgpO1xuICAgICAgICB0aGlzLl9yZXN1bHQuZGlzcG9zZSgpO1xuICAgIH1cblxuICAgIGNyZWF0ZVNlY3Rpb24ocjpSZW5kZXJpbmdPcHRpb25zKTpVSS5QYW5lbHtcbiAgICAgICAgaWYgKHIuc2hvd0hlYWRlcikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVSS5TZWN0aW9uKDxhbnk+VUkuaDModGhpcy50aXRsZSgpKSwgZmFsc2UpXG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBubD1uZXcgVUkuUGFuZWwoKTtcbiAgICAgICAgcG5sLnNldENhcHRpb24odGhpcy50aXRsZSgpKTtcbiAgICAgICAgcmV0dXJuIHBubDtcbiAgICB9XG5cbiAgICBjcmVhdGVXcmFwcGVkQ2hpbGQoc2VjdGlvbjpVSS5VSUNvbXBvbmVudCl7XG4gICAgICAgIHJldHVybiBzZWN0aW9uO1xuICAgIH1cblxuICAgIGFkZENoaWxkKHNlY3Rpb246VUkuVUlDb21wb25lbnQsIGl0ZW06SXRlbSl7XG4gICAgICAgIHZhciBjaGlsZD1pdGVtLnJlbmRlcigpO1xuICAgICAgICBpZiAoc2VjdGlvbiBpbnN0YW5jZW9mIFVJLlRhYkZvbGRlcil7XG4gICAgICAgICAgICB2YXIgdGY9PFVJLlRhYkZvbGRlcj5zZWN0aW9uO1xuICAgICAgICAgICAgdGYuYWRkKGNoaWxkLmNhcHRpb24oKSxVSS5JY29uLk5PTkUsY2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGl0ZW0ubmVlZHNTZXBhcmF0ZUxhYmVsKCkpe1xuICAgICAgICAgICAgICAgIHZhciBmaXJzdExhYmVsID0gVUkubGFiZWwoaXRlbS50aXRsZSgpKTtcblxuICAgICAgICAgICAgICAgIGZpcnN0TGFiZWwubWFyZ2luKDAsIDUsIDAsIDApO1xuXG4gICAgICAgICAgICAgICAgc2VjdGlvbi5hZGRDaGlsZChmaXJzdExhYmVsKTtcbiAgICAgICAgICAgICAgICBzZWN0aW9uLmFkZENoaWxkKFVJLmxhYmVsKGl0ZW0uZGVzY3JpcHRpb24pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlY3Rpb24uYWRkQ2hpbGQoY2hpbGQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29udHJpYnV0ZVRvcChzZWN0aW9uOlVJLlBhbmVsKXtcblxuICAgIH1cblxuICAgIGRpc3Bvc2UoKTp2b2lke1xuXG4gICAgfVxuXG4gICAgc2V0RXJyb3IodGV4dDpzdHJpbmcpe1xuXG4gICAgfVxuXG4gICAgY2xlYXJFcnJvcnMoKXtcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4uZm9yRWFjaCh4PT54LmNsZWFyRXJyb3JzKCkpXG4gICAgfVxuXG4gICAgdXBkYXRlKGk6SXRlbSl7XG5cbiAgICB9XG59XG5cbmNsYXNzIFRvcExldmVsTm9kZSBleHRlbmRzIENhdGVnb3J5e1xuXG4gICAgZXJyb3JMYWJlbDpVSS5UZXh0RWxlbWVudDxhbnk+XG4gICAgZXA6VUkuUGFuZWw9bnVsbDtcbiAgICBfcGFuZWw6VUkuUGFuZWw7XG4gICAgX29wdGlvbnM6UmVuZGVyaW5nT3B0aW9ucztcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBkZXRhaWxzTm9kZTpyYW1sU2VydmVyLkRldGFpbHNJdGVtSlNPTixcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgY29udGV4dDogRGV0YWlsc0NvbnRleHQpe1xuICAgICAgICBzdXBlcihkZXRhaWxzTm9kZT9kZXRhaWxzTm9kZS50aXRsZTpcIkFQSVwiLGRldGFpbHNOb2RlP2RldGFpbHNOb2RlLmRlc2NyaXB0aW9uOlwiXCIpO1xuICAgIH1cblxuICAgIGRldGFjaCgpe1xuICAgICAgICBzdXBlci5kZXRhY2goKTtcbiAgICAgICAgdGhpcy5fcmVzdWx0LmRpc3Bvc2UoKTtcbiAgICB9XG5cbiAgICBjcmVhdGVXcmFwcGVkQ2hpbGQoc2VjdGlvbjpVSS5VSUNvbXBvbmVudCl7XG4gICAgICAgIHZhciB0Zj1uZXcgVUkuVGFiRm9sZGVyKClcbiAgICAgICAgdGYuc2V0T25TZWxlY3RlZCgoKT0+e1xuICAgICAgICAgICAgaWYgKCFpblJlbmRlcikge1xuICAgICAgICAgICAgICAgIGxhc3RTZWxlY3RlZENhcHRpb24gPSAodGYuc2VsZWN0ZWRDb21wb25lbnQoKS5jYXB0aW9uKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc2VjdGlvbi5hZGRDaGlsZCh0Zik7XG4gICAgICAgIHJldHVybiB0ZjtcbiAgICB9XG5cbiAgICBzdWJDYXRlZ29yeUJ5TmFtZU9yQ3JlYXRlKG5hbWU6c3RyaW5nKXtcbiAgICAgICAgdmFyIGl0ZW09Xy5maW5kKHRoaXMuY2hpbGRyZW4oKSx4PT54LnRpdGxlKCk9PW5hbWUpO1xuICAgICAgICBpZiAoIWl0ZW0pe1xuICAgICAgICAgICAgdmFyIHJzPW5ldyBDYXRlZ29yeShuYW1lKTtcbiAgICAgICAgICAgIHRoaXMuYWRkKHJzKTtcbiAgICAgICAgICAgIHJldHVybiBycztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG5cbiAgICBhZGRJdGVtVG9DYXRlZ29yeShuYW1lOnN0cmluZyxpdDpJdGVtKXtcbiAgICAgICAgaWYgKG5hbWU9PW51bGwpe1xuICAgICAgICAgICAgdGhpcy5fY2hpbGRyZW4ucHVzaChpdCk7XG4gICAgICAgICAgICBpdC5wYXJlbnQ9dGhpcztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN1YkNhdGVnb3J5QnlOYW1lT3JDcmVhdGUobmFtZSkuYWRkKGl0KTtcbiAgICB9XG5cbiAgICBjb250cmlidXRlVG9wKHNlY3Rpb246VUkuUGFuZWwpe1xuICAgICAgICB0aGlzLmVycm9yTGFiZWw9VUkubGFiZWwoXCJcIixVSS5JY29uLkJVRyxVSS5UZXh0Q2xhc3Nlcy5FUlJPUik7XG4gICAgICAgIHRoaXMuZXA9VUkuaGModGhpcy5lcnJvckxhYmVsKTtcbiAgICAgICAgdGhpcy5lcC5zZXREaXNwbGF5KGZhbHNlKVxuICAgICAgICBzZWN0aW9uLmFkZENoaWxkKHRoaXMuZXApO1xuICAgIH1cblxuICAgIHJlbmRlcihyOiBSZW5kZXJpbmdPcHRpb25zPXt9KXtcbiAgICAgICAgaW5SZW5kZXI9dHJ1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBzdXBlci5yZW5kZXIocik7XG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zID0gcjtcbiAgICAgICAgICAgIHRoaXMuX3BhbmVsID0gPGFueT5yZXN1bHQ7XG4gICAgICAgICAgICB2YXIgdGYgPSA8VUkuVGFiRm9sZGVyPnRoaXMuc3ViQ2F0ZWdvcmllcztcbiAgICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgdGYudGFic0NvdW50KCk7IG4rKykge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gdGYuZ2V0KG4pO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLmhlYWRlciA9PSBsYXN0U2VsZWN0ZWRDYXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRmLnNldFNlbGVjdGVkSW5kZXgobik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRvY3VtZW50YXRpb249XCJcIjtcbiAgICAgICAgICAgIGlmICh0aGlzLmRldGFpbHNOb2RlLmRlc2NyaXB0aW9uKXtcbiAgICAgICAgICAgICAgICBkb2N1bWVudGF0aW9uPXRoaXMuZGV0YWlsc05vZGUuZGVzY3JpcHRpb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkb2N1bWVudGF0aW9uLmxlbmd0aCYmIXIuc2hvd0Rlc2NyaXB0aW9uKXtcbiAgICAgICAgICAgICAgICByZXN1bHQuYWRkQ2hpbGQoVUkuaHRtbChcIjxoci8+XCIpKVxuICAgICAgICAgICAgICAgIHJlc3VsdC5hZGRDaGlsZChVSS5sYWJlbChkb2N1bWVudGF0aW9uLFVJLkljb24uSU5CT1gsVUkuVGV4dENsYXNzZXMuU1VCVExFKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGluUmVuZGVyPWZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGlzcG9zZSgpOnZvaWR7XG4gICAgICAgIHRoaXMuZGV0YWlsc05vZGU9bnVsbDtcbiAgICB9XG5cbiAgICB1cGRhdGUoaTpJdGVtKXtcbiAgICAgICAgLy8gaWYgKCF0aGlzLl9wYW5lbCl7XG4gICAgICAgIC8vICAgICByZXR1cm47XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gaWYgKGkgaW5zdGFuY2VvZiBQcm9wZXJ0eUVkaXRvckluZm8pe1xuICAgICAgICAvLyAgICAgdmFyIHBySW5mbz08UHJvcGVydHlFZGl0b3JJbmZvPmk7XG4gICAgICAgIC8vICAgICBpZiAocHJJbmZvLnByb3BlcnR5LmdldEFkYXB0ZXIoZGVmLlJBTUxQcm9wZXJ0eVNlcnZpY2UpLmlzVHlwZUV4cHIoKXx8cHJJbmZvLnByb3BlcnR5LmlzRGVzY3JpbWluYXRvcigpKXtcbiAgICAgICAgLy8gICAgICAgICBycC51dGlscy51cGRhdGVUeXBlKHRoaXMubm9kZSk7XG4gICAgICAgIC8vICAgICAgICAgdmFyIGV4dHJhcz08Q2F0ZWdvcnk+dGhpcy5pdGVtKFwiRmFjZXRzXCIpO1xuICAgICAgICAvLyAgICAgICAgIGlmIChleHRyYXMmJmV4dHJhcy5fcmVzdWx0KSB7XG4gICAgICAgIC8vICAgICAgICAgICAgIGV4dHJhcy5fcmVzdWx0LmNsZWFyKCk7XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgIHZhciBpdGVtPWJ1aWxkSXRlbSh0aGlzLm5vZGUsZmFsc2UpO1xuICAgICAgICAvLyAgICAgICAgIHZhciBuZXdFeHRyYXM9PENhdGVnb3J5Pml0ZW0uaXRlbShcIkZhY2V0c1wiKTtcbiAgICAgICAgLy8gICAgICAgICBpZiAobmV3RXh0cmFzKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgIGlmIChleHRyYXMmJmV4dHJhcy5fcmVzdWx0KSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBleHRyYXMuX2NoaWxkcmVuID0gbmV3RXh0cmFzLl9jaGlsZHJlbjtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGV4dHJhcy5fY2hpbGRyZW4uZm9yRWFjaCh4PT54LnBhcmVudCA9IGV4dHJhcyk7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBpZiAoZXh0cmFzLl9jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZXh0cmFzLl9yZXN1bHQuc2V0RGlzcGxheSh0cnVlKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAvL3dvcmthcm91bmcgZXZlbnRzIGZsb3cgaXNzdWUgaW4gVUkudHNcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIG5ld0V4dHJhcy5jaGlsZHJlbigpLmZvckVhY2goeD0+IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBleHRyYXMuX3Jlc3VsdC5hZGRDaGlsZCh4LnJlbmRlcih0aGlzLl9vcHRpb25zKSlcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIC8vICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuLnB1c2gobmV3RXh0cmFzKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wYW5lbCkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhbmVsLmFkZENoaWxkKG5ld0V4dHJhcy5yZW5kZXIodGhpcy5fb3B0aW9ucykpXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgZWxzZXtcbiAgICAgICAgLy8gICAgICAgICAgICAgaWYgKGV4dHJhcyYmZXh0cmFzLl9yZXN1bHQpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGV4dHJhcy5fcmVzdWx0LnNldERpc3BsYXkoZmFsc2UpO1xuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vIHZhciBrcD1udWxsO1xuICAgICAgICAvLyB0aGlzLm5vZGUuZGVmaW5pdGlvbigpLmFsbFByb3BlcnRpZXMoKS5mb3JFYWNoKHg9PntcbiAgICAgICAgLy8gICAgIGlmICh4LmdldEFkYXB0ZXIoZGVmLlJBTUxQcm9wZXJ0eVNlcnZpY2UpLmlzS2V5KCkpe1xuICAgICAgICAvLyAgICAgICAgIGtwPXg7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0pXG4gICAgICAgIC8vIGlmIChrcCl7XG4gICAgICAgIC8vICAgICB2YXIga2V5SXRlbT08UHJvcGVydHlFZGl0b3JJbmZvPnRoaXMuaXRlbShrcC5uYW1lSWQoKSk7XG4gICAgICAgIC8vICAgICBpZiAoa2V5SXRlbSl7XG4gICAgICAgIC8vICAgICAgICAgdmFyIG09a2V5SXRlbS5mbGQ7XG4gICAgICAgIC8vICAgICAgICAgdmFyIHZsPW0uZ2V0QmluZGluZygpLmdldCgpO1xuICAgICAgICAvLyAgICAgICAgIGlmICgoIXZsKXx8dmwudHJpbSgpLmxlbmd0aD09MCl7XG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMuX3BhbmVsLmdldEJpbmRpbmcoKS5zZXRTdGF0dXMoVUkuZXJyb3JTdGF0dXMoXCJcIikpO1xuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICBlbHNle1xuICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLl9wYW5lbC5nZXRCaW5kaW5nKCkuc2V0U3RhdHVzKFVJLm9rU3RhdHVzKCkpO1xuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfVxuICAgICAgICAvL1xuICAgICAgICAvLyB2YXIgZXJyb3JzO1xuICAgICAgICAvL1xuICAgICAgICAvLyBpZih0aGlzLm5vZGUucHJvcGVydHkoKSAmJiB1bml2ZXJzZWhlbHBlcnMuaXNFeGFtcGxlUHJvcGVydHkodGhpcy5ub2RlLnByb3BlcnR5KCkpKSB7XG4gICAgICAgIC8vICAgICB2YXIgcGFyZW50ID0gdGhpcy5ub2RlLnBhcmVudCgpXG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICBpZihwYXJlbnQpIHtcbiAgICAgICAgLy8gICAgICAgICB2YXIgcGFyc2VkID0gcGFyZW50LnBhcnNlZFR5cGUoKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgICAgICB2YXIgZXhhbXBsZU1ldGEgPSAgXy5maW5kKCg8YW55PnBhcnNlZCkubWV0YUluZm8gfHwgW10sIChtZXRhOiBhbnkpOiBib29sZWFuID0+IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgcmV0dXJuIG1ldGEgJiYgbWV0YS5fbmFtZSA9PT0gJ2V4YW1wbGUnO1xuICAgICAgICAvLyAgICAgICAgIH0pO1xuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgIGlmKGV4YW1wbGVNZXRhKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgIHZhciB2YWxpZGF0ZU9iamVjdCA9IGV4YW1wbGVNZXRhLnZhbGlkYXRlU2VsZih0aGlzLm5vZGUudHlwZXMoKS5nZXRBbm5vdGF0aW9uVHlwZVJlZ2lzdHJ5KCkpO1xuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgICAgICBlcnJvcnMgPSAoKHZhbGlkYXRlT2JqZWN0ICYmIHZhbGlkYXRlT2JqZWN0LmdldEVycm9ycygpKSB8fCBbXSkubWFwKGVycm9yID0+IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5vZGUuY3JlYXRlSXNzdWUoZXJyb3IpO1xuICAgICAgICAvLyAgICAgICAgICAgICB9KTtcbiAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgIC8vICAgICBlcnJvcnMgPSB0aGlzLm5vZGUuZXJyb3JzKCk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gdGhpcy5jbGVhckVycm9ycygpO1xuICAgICAgICAvLyB0aGlzLmVwLnNldERpc3BsYXkoZmFsc2UpXG4gICAgICAgIC8vIGlmICghcmVzb3VyY2VSZWdpc3RyeS5oYXNBc3luY1JlcXVlc3RzKCkgJiYgZXJyb3JzJiZlcnJvcnMubGVuZ3RoPjApe1xuICAgICAgICAvLyAgICAgdmFyIG5vdEZvdW5kPVtdO1xuICAgICAgICAvLyAgICAgZXJyb3JzLmZvckVhY2goZXJyb3I9PntcbiAgICAgICAgLy8gICAgICAgICBpZiAoZXJyb3IuZXh0cmFzJiZlcnJvci5leHRyYXMubGVuZ3RoPjApe1xuICAgICAgICAvLyAgICAgICAgICAgICBlcnJvcj1lcnJvci5leHRyYXNbMF07XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgIHZhciBpdGVtID0gZXJyb3Iubm9kZSAmJiB0aGlzLml0ZW0oZXJyb3Iubm9kZS5uYW1lKCkpO1xuICAgICAgICAvLyAgICAgICAgIGlmIChpdGVtKXtcbiAgICAgICAgLy8gICAgICAgICAgICAgaXRlbS5zZXRFcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgZWxzZXtub3RGb3VuZC5wdXNoKGVycm9yKTt9XG4gICAgICAgIC8vICAgICB9KVxuICAgICAgICAvLyAgICAgaWYgKG5vdEZvdW5kLmxlbmd0aD4wKXtcbiAgICAgICAgLy8gICAgICAgICB0aGlzLmVycm9yTGFiZWwuc2V0SWNvbihVSS5JY29uLkJVRylcbiAgICAgICAgLy8gICAgICAgICB2YXIgZXQ9bm90Rm91bmQubWFwKHg9Pngubm9kZS5uYW1lKCkrXCI6XCIreC5tZXNzYWdlKS5qb2luKFwiLFwiKTtcbiAgICAgICAgLy8gICAgICAgICBpZiAoZXQubGVuZ3RoPjEwMCl7XG4gICAgICAgIC8vICAgICAgICAgICAgIGV0PWV0LnN1YnN0cmluZygwLDEwMCkrXCIuLi5cIjtcbiAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgdGhpcy5lcnJvckxhYmVsLnNldFRleHQoZXQpXG4gICAgICAgIC8vICAgICAgICAgdGhpcy5lcC5zZXREaXNwbGF5KHRydWUpO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyAgICAgZWxzZXtcbiAgICAgICAgLy8gICAgICAgICB0aGlzLmVwLnNldERpc3BsYXkoZmFsc2UpO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9XG4gICAgfVxufVxuXG5jbGFzcyBDaGVja0JveDIgZXh0ZW5kcyBVSS5DaGVja0JveCBpbXBsZW1lbnRzIFVJLklGaWVsZDxhbnk+e1xuXG4gICAgc2V0TGFiZWxXaWR0aChuOm51bWJlcil7XG4gICAgICAgIHRoaXMuc2V0U3R5bGUoXCJtYXJnaW4tbGVmdFwiLChuKzIpK1wiY2hcIik7XG4gICAgfVxufVxuY2xhc3MgUHJvcGVydHlFZGl0b3JJbmZvIGV4dGVuZHMgSXRlbXtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBvdXRsaW5lTm9kZSA6IHJhbWxTZXJ2ZXIuRGV0YWlsc1ZhbHVlZEl0ZW1KU09OLFxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCBjb250ZXh0OiBEZXRhaWxzQ29udGV4dCl7XG4gICAgICAgIHN1cGVyKG91dGxpbmVOb2RlP291dGxpbmVOb2RlLnRpdGxlOlwiXCIsb3V0bGluZU5vZGU/b3V0bGluZU5vZGUuZGVzY3JpcHRpb246XCJcIik7XG4gICAgfVxuXG4gICAgZGlzcG9zZSgpe1xuICAgICAgICB0aGlzLm91dGxpbmVOb2RlPW51bGw7XG5cbiAgICAgICAgaWYoIXRoaXMuZmxkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZsZC5nZXRCaW5kaW5nKCkucmVtb3ZlTGlzdGVuZXIodGhpcy51cGRhdGUpXG4gICAgfVxuXG4gICAgLy8gZ2V0RGVmYXVsdFZhbHVlKCkge1xuICAgIC8vICAgICByZXR1cm4gZGVmYXVsdFZhbHVlcy5nZXREZWZhdWx0VmFsdWUodGhpcy5ub2RlLCB0aGlzLnByb3BlcnR5KTtcbiAgICAvLyB9XG4gICAgLy9cbiAgICAvLyBoYXNEZWZhdWx0KCkge1xuICAgIC8vICAgICByZXR1cm4gZGVmYXVsdFZhbHVlcy5oYXNEZWZhdWx0KHRoaXMucHJvcGVydHkpO1xuICAgIC8vIH1cblxuICAgIGVycm9yTGFiZWw6VUkuVGV4dEVsZW1lbnQ8YW55PlxuICAgIGRlc2NMYWJlbDpVSS5UZXh0RWxlbWVudDxhbnk+XG5cbiAgICBmbGQ6VUkuQmFzaWNDb21wb25lbnQ8YW55PjtcbiAgICBjbGVhckVycm9ycygpe1xuICAgICAgICB0aGlzLnNldEVycm9yKG51bGwpO1xuICAgIH1cbiAgICBzZXRFcnJvcih0ZXh0OnN0cmluZyl7XG4gICAgICAgIGlmICh0ZXh0KXtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JMYWJlbC5zZXRUZXh0KHRleHQpO1xuICAgICAgICAgICAgdGhpcy5lcnJvckxhYmVsLnNldERpc3BsYXkodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGlmICh0aGlzLmVycm9yTGFiZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yTGFiZWwuc2V0RGlzcGxheShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmcm9tRWRpdG9yVG9Nb2RlbChuZXdWYWx1ZT8gOiBhbnksIG9sZFZhbHVlPyA6IGFueSl7XG4gICAgICAgIGNvbnN0IGRldGFpbHNDaGFuZ2VSdW5uYWJsZSA9XG4gICAgICAgICAgICBuZXcgVXBkYXRlTW9kZWxSdW5uYWJsZSh0aGlzLmNvbnRleHQsIHRoaXMub3V0bGluZU5vZGUsIG5ld1ZhbHVlKTtcblxuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgICAgIGNvbnRleHQucmVjb25jaWxlci5zY2hlZHVsZShkZXRhaWxzQ2hhbmdlUnVubmFibGUpLnRoZW4oKGNoYW5nZWREb2N1bWVudHMpID0+IHtcbiAgICAgICAgICAgIGlmKGNvbnRleHQubG9jYWxNb2RlbCkge1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhc3Npc3RVdGlscy5hcHBseUNoYW5nZWREb2N1bWVudHMoY2hhbmdlZERvY3VtZW50cyk7XG4gICAgICAgICAgICBhc3Npc3RVdGlscy5nb3RvUG9zaXRpb24oY29udGV4dC5wb3NpdGlvbik7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgdG9Mb2NhbFZhbHVlKGlucHV0VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0VmFsdWU7XG4gICAgfVxuXG4gICAgdG9VSVZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBmcm9tTW9kZWxUb0VkaXRvcigpIHtcbiAgICAgICAgaWYodGhpcy5mbGQpIHtcbiAgICAgICAgICAgIHRoaXMuZmxkLmdldEJpbmRpbmcoKS5zZXQodGhpcy5vdXRsaW5lTm9kZS52YWx1ZVRleHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbmRlcmVkOmJvb2xlYW49ZmFsc2VcbiAgICB1cGRhdGU9KG5ld1ZhbHVlLCBvbGRWYWx1ZSk9PntcbiAgICAgICAgaWYoIXRoaXMucmVuZGVyZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZnJvbUVkaXRvclRvTW9kZWwobmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKXtcbiAgICAgICAgdmFyIGNvbnRhaW5lcj1uZXcgVUkuV3JhcFBhbmVsKCk7XG5cbiAgICAgICAgdGhpcy5lcnJvckxhYmVsPVVJLmxhYmVsKFwiXCIsVUkuSWNvbi5CVUcsVUkuVGV4dENsYXNzZXMuRVJST1IpO1xuICAgICAgICB0aGlzLmVycm9yTGFiZWwuc2V0RGlzcGxheShmYWxzZSk7XG4gICAgICAgIHRoaXMuZXJyb3JMYWJlbC5zZXRTdHlsZShcIm1hcmdpbi1sZWZ0XCIsKHRoaXMuX3RpdGxlLmxlbmd0aCsxKStcImNoXCIpXG5cbiAgICAgICAgdmFyIGZpZWxkPXRoaXMuY3JlYXRlRmllbGQoKTtcblxuICAgICAgICB0aGlzLmZsZD08VUkuQmFzaWNDb21wb25lbnQ8YW55Pj5maWVsZDtcblxuICAgICAgICBpZihmaWVsZCkge1xuICAgICAgICAgICAgZmllbGQuZ2V0QmluZGluZygpLmFkZExpc3RlbmVyKHRoaXMudXBkYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRhaW5lci5zZXRDYXB0aW9uKHRoaXMudGl0bGUoKSk7XG5cbiAgICAgICAgdGhpcy5mcm9tTW9kZWxUb0VkaXRvcigpO1xuXG4gICAgICAgIGlmKGZpZWxkKSB7XG4gICAgICAgICAgICBjb250YWluZXIuYWRkQ2hpbGQoZmllbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGFpbmVyLmFkZENoaWxkKHRoaXMuZXJyb3JMYWJlbCk7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJlZCA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICBjcmVhdGVGaWVsZCgpOlVJLklGaWVsZDxhbnk+e1xuICAgICAgICByZXR1cm4gVUkudGV4ZkZpZWxkKHRoaXMubmVlZHNTZXBhcmF0ZUxhYmVsKCk/XCJcIjp0aGlzLm91dGxpbmVOb2RlLnRpdGxlLFwiXCIseD0+e30pO1xuICAgIH1cbn1cblxuY2xhc3MgU2ltcGxlTXVsdGlFZGl0b3IgZXh0ZW5kcyBQcm9wZXJ0eUVkaXRvckluZm97XG4gICAgLy8gZnJvbUVkaXRvclRvTW9kZWwoKXtcbiAgICAvLyAgICAgLy8gdmFyIGZpZWxkPXRoaXMuZmxkO1xuICAgIC8vICAgICAvLyB2YXIgdmw9ZmllbGQuZ2V0QmluZGluZygpLmdldCgpO1xuICAgIC8vICAgICAvLyBpZiAodmw9PW51bGwpe1xuICAgIC8vICAgICAvLyAgICAgdmw9XCJcIjtcbiAgICAvLyAgICAgLy8gfVxuICAgIC8vICAgICAvLyB2YXIgYXR0cnM9dGhpcy5ub2RlLmF0dHJpYnV0ZXModGhpcy5wcm9wZXJ0eS5uYW1lSWQoKSk7XG4gICAgLy8gICAgIC8vIHZhciBhdj1hdHRycy5tYXAoeD0+ZXNjYXBlVmFsdWUoXCJcIit4LnZhbHVlKCkpKS5qb2luKFwiLCBcIik7XG4gICAgLy8gICAgIC8vIGlmIChhdj09dmwpe1xuICAgIC8vICAgICAvLyAgICAgcmV0dXJuO1xuICAgIC8vICAgICAvLyB9XG4gICAgLy8gICAgIC8vIHZhciB3dz12bC5zcGxpdChcIixcIik7XG4gICAgLy8gICAgIC8vIHZhciB2bD13dy5maWx0ZXIoeD0+eC50cmltKCkubGVuZ3RoPjApLm1hcCh4PT54LnRyaW0oKSk7XG4gICAgLy8gICAgIC8vXG4gICAgLy8gICAgIC8vIGlmKHRoaXMubm9kZS5sb3dMZXZlbCgpLmluY2x1ZGVQYXRoKCkgJiYgIXRoaXMubm9kZS5sb3dMZXZlbCgpLnVuaXQoKS5yZXNvbHZlKHRoaXMubm9kZS5sb3dMZXZlbCgpLmluY2x1ZGVQYXRoKCkpKSB7XG4gICAgLy8gICAgIC8vICAgICByZXR1cm47XG4gICAgLy8gICAgIC8vIH1cbiAgICAvLyAgICAgLy9cbiAgICAvLyAgICAgLy8gdmFyIGF0dHJpYnV0ZSA9IHRoaXMubm9kZS5hdHRyT3JDcmVhdGUodGhpcy5wcm9wZXJ0eS5uYW1lSWQoKSk7XG4gICAgLy8gICAgIC8vIGF0dHJpYnV0ZS5zZXRWYWx1ZXModmwpXG4gICAgLy8gICAgIC8vXG4gICAgLy8gICAgIC8vIHZhciByb290PXRoaXMucm9vdCgpXG4gICAgLy8gICAgIC8vIGlmIChyb290KXtcbiAgICAvLyAgICAgLy8gICAgIHJvb3QudXBkYXRlKHRoaXMpO1xuICAgIC8vICAgICAvLyB9XG4gICAgLy8gfVxuICAgIGZyb21Nb2RlbFRvRWRpdG9yKCkge1xuICAgICAgICBpZighdGhpcy5mbGQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZmxkLmdldEJpbmRpbmcoKS5zZXQodGhpcy5vdXRsaW5lTm9kZS52YWx1ZVRleHQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVzY2FwZVZhbHVlKHY6c3RyaW5nKXtcbiAgICBpZiAodi5sZW5ndGg+MCkge1xuICAgICAgICBpZiAodi5jaGFyQXQoMCkgPT0gXCInXCIpIHtcbiAgICAgICAgICAgIHJldHVybiAnXCInICsgdiArICdcIic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHYuY2hhckF0KDApID09ICdcIicpIHtcbiAgICAgICAgICAgIHJldHVybiAnXCInICsgdiArICdcIic7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHYuaW5kZXhPZignICcpIT0tMXx8di5pbmRleE9mKCcsJykhPS0xKXtcbiAgICAgICAgaWYgKHYuaW5kZXhPZignXCInKT09LTEpe1xuICAgICAgICAgICAgcmV0dXJuICdcIicrdisnXCInXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHYuaW5kZXhPZihcIidcIik9PS0xKXtcbiAgICAgICAgICAgIHJldHVybiBcIidcIit2K1wiJ1wiXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHY7XG59XG5cbmNsYXNzIENoZWNrQm94RmllbGQgZXh0ZW5kcyBQcm9wZXJ0eUVkaXRvckluZm97XG4gICAgY3JlYXRlRmllbGQoKXtcbiAgICAgICAgcmV0dXJuIG5ldyBDaGVja0JveDIodGhpcy5vdXRsaW5lTm9kZS50aXRsZSxVSS5JY29uLk5PTkUseD0+e30pO1xuICAgIH1cblxuICAgIHRvVUlWYWx1ZSh2YWx1ZTogc3RyaW5nKTogYW55IHtcbiAgICAgICAgaWYoIXZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZigoPGFueT52YWx1ZSkgPT09IHRydWUgfHwgdmFsdWUudHJpbSgpID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRvTG9jYWxWYWx1ZSh2YWx1ZTogYW55KTogYW55IHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICsgXCJcIjtcbiAgICB9XG59XG5cbi8vIGNsYXNzIEFjdGlvbnNJdGVtIGV4dGVuZHMgSXRlbXtcbi8vXG4vLyAgICAgY29uc3RydWN0b3IocHJpdmF0ZSBub2RlOmhsLklIaWdoTGV2ZWxOb2RlKXtcbi8vICAgICAgICAgc3VwZXIoXCJBY3Rpb25zXCIsXCJcIik7XG4vLyAgICAgfVxuLy8gICAgIHJlbmRlcihyOlJlbmRlcmluZ09wdGlvbnMpe1xuLy8gICAgICAgICByZXR1cm4gc3VnZ2VzdGlvbnMuZ2VuZXJhdGVTdWdnZXN0aW9uc1BhbmVsKHRoaXMubm9kZSk7XG4vLyAgICAgfVxuLy8gICAgIGRpc3Bvc2UoKXtcbi8vICAgICAgICAgdGhpcy5ub2RlPW51bGw7XG4vLyAgICAgfVxuLy9cbi8vIH1cbi8vIGNsYXNzIENvbnRleHRBY3Rpb25zSXRlbSBleHRlbmRzIEl0ZW17XG4vLyAgICAgY29uc3RydWN0b3Iobm9kZTpobC5JSGlnaExldmVsTm9kZSxuYW1lOnN0cmluZyxwcml2YXRlIGFjdGlvbnM6Y29udGV4dEFjdGlvbnMuSUNvbnRleHREZXBlbmRlZEFjdGlvbltdKXtcbi8vICAgICAgICAgc3VwZXIobmFtZSxcIlwiKTtcbi8vICAgICB9XG4vLyAgICAgZGlzcG9zZSgpe1xuLy9cbi8vICAgICB9XG4vL1xuLy8gICAgIHJlbmRlcihyOlJlbmRlcmluZ09wdGlvbnMpe1xuLy8gICAgICAgICB2YXIgcmVzdWx0PVVJLmhjKCk7XG4vLyAgICAgICAgIHJlc3VsdC5hZGRDaGlsZChVSS5oMyh0aGlzLnRpdGxlKCkpKVxuLy8gICAgICAgICB0aGlzLmFjdGlvbnMuZm9yRWFjaCh4PT57XG4vLyAgICAgICAgICAgICByZXN1bHQuYWRkQ2hpbGQoVUkuYnV0dG9uKHgubmFtZSxVSS5CdXR0b25TaXplcy5FWFRSQV9TTUFMTCxVSS5CdXR0b25IaWdobGlnaHRzLlNVQ0NFU1MsVUkuSWNvbi5DSEVDS0xJU1QsYT0+eC5vbkNsaWNrKCkpLm1hcmdpbigzLDMsMywzKSlcbi8vICAgICAgICAgfSlcbi8vICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbi8vICAgICB9XG4vLyB9XG5cbmNsYXNzIE1hcmtkb3duRmllbGRVSSBleHRlbmRzIFVJLkF0b21FZGl0b3JFbGVtZW50IGltcGxlbWVudHMgVUkuSUZpZWxkPGFueT57XG5cbiAgICBjb25zdHJ1Y3Rvcih0ZXh0OnN0cmluZywgb25jaGFuZ2U6VUkuRXZlbnRIYW5kbGVyKSB7XG4gICAgICAgIHN1cGVyKHRleHQsIG9uY2hhbmdlKTtcbiAgICAgICAgdGhpcy5tYXJnaW4oMCwgMCwgNiwgMTIpO1xuICAgICAgICB0aGlzLnNldE1pbmkoZmFsc2UpO1xuICAgICAgICB0aGlzLnNldFN0eWxlKFwibWluLWhlaWdodFwiLFwiMTAwcHhcIik7XG4gICAgICAgIC8vdGhpcy5zZXRTdHlsZShcIm1heC1oZWlnaHRcIixcIjIwMHB4XCIpO1xuICAgICAgICB0aGlzLnNldFN0eWxlKFwiYm9yZGVyXCIsXCJzb2xpZFwiKTtcbiAgICAgICAgdGhpcy5zZXRTdHlsZShcImJvcmRlci13aWR0aFwiLFwiMXB4XCIpXG4gICAgICAgIHRoaXMuc2V0U3R5bGUoXCJib3JkZXItcmFkaXVzXCIsXCIycHhcIik7XG4gICAgICAgIHRoaXMuc2V0U3R5bGUoXCJmb250LXNpemVcIixcIjEuMTVlbVwiKVxuICAgICAgICB0aGlzLnNldFN0eWxlKFwiYm9yZGVyLWNvbG9yXCIsXCJyZ2JhKDAsMCwwLDAuMilcIik7XG4gICAgICAgIHRoaXMuc2V0R3JhbW1hcignc291cmNlLm1kY3VzdG9tJyk7XG4gICAgfVxuXG4gICAgc2V0TGFiZWxXaWR0aCgpe1xuXG4gICAgfVxuICAgIHNldExhYmVsSGVpZ2h0KCl7XG5cbiAgICB9XG4gICAgc2V0UmVxdWlyZWQodjpib29sZWFuKXtcblxuICAgIH1cbn1cbmNsYXNzIFhNTEZpZWxkIGV4dGVuZHMgVUkuQXRvbUVkaXRvckVsZW1lbnQgaW1wbGVtZW50cyBVSS5JRmllbGQ8YW55PntcblxuICAgIGNvbnN0cnVjdG9yKHRleHQ6c3RyaW5nLCBvbmNoYW5nZTpVSS5FdmVudEhhbmRsZXIpIHtcbiAgICAgICAgc3VwZXIodGV4dCwgb25jaGFuZ2UpO1xuICAgICAgICB0aGlzLm1hcmdpbigwLCAwLCA2LCAxMik7XG4gICAgICAgIHRoaXMuc2V0TWluaShmYWxzZSk7XG4gICAgICAgIHRoaXMuc2V0U3R5bGUoXCJtaW4taGVpZ2h0XCIsXCIxMDBweFwiKTtcbiAgICAgICAgLy90aGlzLnNldFN0eWxlKFwibWF4LWhlaWdodFwiLFwiMjAwcHhcIik7XG5cbiAgICAgICAgdGhpcy5zZXRTdHlsZShcImJvcmRlclwiLFwic29saWRcIik7XG4gICAgICAgIHRoaXMuc2V0U3R5bGUoXCJib3JkZXItd2lkdGhcIixcIjFweFwiKVxuICAgICAgICB0aGlzLnNldFN0eWxlKFwiYm9yZGVyLXJhZGl1c1wiLFwiMnB4XCIpO1xuICAgICAgICB0aGlzLnNldFN0eWxlKFwiZm9udC1zaXplXCIsXCIxLjE1ZW1cIilcbiAgICAgICAgdGhpcy5zZXRTdHlsZShcImJvcmRlci1jb2xvclwiLFwicmdiYSgwLDAsMCwwLjIpXCIpO1xuICAgICAgICB0aGlzLnNldEdyYW1tYXIoJ3RleHQueG1sJyk7XG4gICAgfVxuXG5cblxuICAgIHNldExhYmVsV2lkdGgoKXtcblxuICAgIH1cbiAgICBzZXRMYWJlbEhlaWdodCgpe1xuXG4gICAgfVxuICAgIHNldFJlcXVpcmVkKHY6Ym9vbGVhbil7XG5cbiAgICB9XG59XG5jbGFzcyBKU09ORmllbGQgZXh0ZW5kcyBVSS5BdG9tRWRpdG9yRWxlbWVudCBpbXBsZW1lbnRzIFVJLklGaWVsZDxhbnk+e1xuXG4gICAgY29uc3RydWN0b3IodGV4dDpzdHJpbmcsIG9uY2hhbmdlOlVJLkV2ZW50SGFuZGxlcikge1xuICAgICAgICBzdXBlcih0ZXh0LCBvbmNoYW5nZSk7XG4gICAgICAgIHRoaXMubWFyZ2luKDAsIDAsIDYsIDEyKTtcbiAgICAgICAgdGhpcy5zZXRNaW5pKGZhbHNlKTtcbiAgICAgICAgdGhpcy5zZXRTdHlsZShcIm1pbi1oZWlnaHRcIixcIjEwMHB4XCIpO1xuICAgICAgICAvL3RoaXMuc2V0U3R5bGUoXCJtYXgtaGVpZ2h0XCIsXCIyMDBweFwiKTtcblxuICAgICAgICB0aGlzLnNldFN0eWxlKFwiYm9yZGVyXCIsXCJzb2xpZFwiKTtcbiAgICAgICAgdGhpcy5zZXRTdHlsZShcImJvcmRlci13aWR0aFwiLFwiMXB4XCIpXG4gICAgICAgIHRoaXMuc2V0U3R5bGUoXCJib3JkZXItcmFkaXVzXCIsXCIycHhcIik7XG4gICAgICAgIHRoaXMuc2V0U3R5bGUoXCJmb250LXNpemVcIixcIjEuMTVlbVwiKVxuICAgICAgICB0aGlzLnNldFN0eWxlKFwiYm9yZGVyLWNvbG9yXCIsXCJyZ2JhKDAsMCwwLDAuMilcIik7XG4gICAgICAgIHRoaXMuc2V0R3JhbW1hcignc291cmNlLmpzb24nKTtcbiAgICB9XG5cblxuXG4gICAgc2V0TGFiZWxXaWR0aCgpe1xuXG4gICAgfVxuICAgIHNldExhYmVsSGVpZ2h0KCl7XG5cbiAgICB9XG4gICAgc2V0UmVxdWlyZWQodjpib29sZWFuKXtcblxuICAgIH1cbn1cbmNsYXNzIE1hcmtkb3duRmllbGQgZXh0ZW5kcyBQcm9wZXJ0eUVkaXRvckluZm97XG4gICAgY3JlYXRlRmllbGQoKXtcbiAgICAgICAgdmFyIGVkaXRvciA9IG5ldyBNYXJrZG93bkZpZWxkVUkoXCJcIix4PT57fSk7XG4gICAgICAgIHJldHVybiBlZGl0b3I7XG4gICAgfVxuXG4gICAgbmVlZHNTZXBhcmF0ZUxhYmVsKCl7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxufVxuY2xhc3MgRXhhbXBsZUZpZWxkIGV4dGVuZHMgUHJvcGVydHlFZGl0b3JJbmZve1xuICAgIGNvbnN0cnVjdG9yKG91dGxpbmVOb2RlOiByYW1sU2VydmVyLkRldGFpbHNWYWx1ZWRJdGVtSlNPTiwgY29udGV4dDogRGV0YWlsc0NvbnRleHQpIHtcbiAgICAgICAgc3VwZXIob3V0bGluZU5vZGUsIGNvbnRleHQpO1xuICAgIH1cblxuICAgIGNyZWF0ZUZpZWxkKCl7XG4gICAgICAgIHZhciBlZGl0b3IgPSBuZXcgSlNPTkZpZWxkKHRoaXMub3V0bGluZU5vZGUudmFsdWVUZXh0LHg9Pnt9KTtcbiAgICAgICAgcmV0dXJuIGVkaXRvcjtcbiAgICB9XG5cbiAgICBuZWVkc1NlcGFyYXRlTGFiZWwoKXtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnJvbU1vZGVsVG9FZGl0b3IoKXtcblxuICAgIH1cblxuICAgIGZyb21FZGl0b3JUb01vZGVsKG5ld1ZhbHVlPyA6IGFueSwgb2xkVmFsdWU/IDogYW55KXtcblxuICAgIH1cbn1cbmNsYXNzIFhNTEV4YW1wbGVGaWVsZCBleHRlbmRzIFByb3BlcnR5RWRpdG9ySW5mb3tcblxuICAgIGNvbnN0cnVjdG9yKG91dGxpbmVOb2RlOiByYW1sU2VydmVyLkRldGFpbHNWYWx1ZWRJdGVtSlNPTiwgY29udGV4dDogRGV0YWlsc0NvbnRleHQpIHtcbiAgICAgICAgc3VwZXIob3V0bGluZU5vZGUsIGNvbnRleHQpO1xuICAgIH1cblxuICAgIGNyZWF0ZUZpZWxkKCl7XG4gICAgICAgIHZhciBlZGl0b3IgPSBuZXcgWE1MRmllbGQodGhpcy5vdXRsaW5lTm9kZS52YWx1ZVRleHQseD0+e30pO1xuICAgICAgICByZXR1cm4gZWRpdG9yO1xuICAgIH1cblxuICAgIG5lZWRzU2VwYXJhdGVMYWJlbCgpe1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmcm9tTW9kZWxUb0VkaXRvcigpe1xuXG4gICAgfVxuXG4gICAgZnJvbUVkaXRvclRvTW9kZWwobmV3VmFsdWU/IDogYW55LCBvbGRWYWx1ZT8gOiBhbnkpe1xuXG4gICAgfVxufVxuY2xhc3MgWE1MU2NoZW1hRmllbGQgZXh0ZW5kcyBQcm9wZXJ0eUVkaXRvckluZm97XG4gICAgY3JlYXRlRmllbGQoKXtcbiAgICAgICAgdmFyIGVkaXRvciA9IG5ldyBYTUxGaWVsZChcIlwiLHg9Pnt9KTtcbiAgICAgICAgcmV0dXJuIGVkaXRvcjtcbiAgICB9XG5cbiAgICBuZWVkc1NlcGFyYXRlTGFiZWwoKXtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuY2xhc3MgSlNPTlNjaGVtYUZpZWxkIGV4dGVuZHMgUHJvcGVydHlFZGl0b3JJbmZve1xuICAgIGNyZWF0ZUZpZWxkKCl7XG4gICAgICAgIGxldCBlZGl0b3IgPSBuZXcgSlNPTkZpZWxkKFwiXCIseD0+e30pO1xuICAgICAgICByZXR1cm4gZWRpdG9yO1xuICAgIH1cblxuICAgIG5lZWRzU2VwYXJhdGVMYWJlbCgpe1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5jbGFzcyBTZWxlY3RCb3ggZXh0ZW5kcyBQcm9wZXJ0eUVkaXRvckluZm97XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgb3V0bGluZU5vZGUgOiByYW1sU2VydmVyLkRldGFpbHNJdGVtV2l0aE9wdGlvbnNKU09OLCBjb250ZXh0OiBEZXRhaWxzQ29udGV4dCkge1xuICAgICAgICBzdXBlcihvdXRsaW5lTm9kZSwgY29udGV4dClcbiAgICB9XG5cbiAgICBjcmVhdGVGaWVsZCgpe1xuICAgICAgICBsZXQgb3B0aW9ucz0gdGhpcy5vdXRsaW5lTm9kZS5vcHRpb25zP3RoaXMub3V0bGluZU5vZGUub3B0aW9uczpbXTtcblxuICAgICAgICBsZXQgc2VsZWN0PSBuZXcgVUkuU2VsZWN0RmllbGQodGhpcy5vdXRsaW5lTm9kZS50aXRsZSx4PT57fSxcIlwiLFVJLkljb24uTk9ORSxvcHRpb25zKTtcblxuICAgICAgICBzZWxlY3QuZ2V0QWN0dWFsRmllbGQoKS5zZXRPcHRpb25zKG9wdGlvbnMpXG5cbiAgICAgICAgcmV0dXJuIHNlbGVjdDtcbiAgICB9XG5cbn1cblxuY2xhc3MgVHlwZVNlbGVjdEJveCBleHRlbmRzIFNlbGVjdEJveCB7XG5cbiAgICBmcm9tRWRpdG9yVG9Nb2RlbChuZXdWYWx1ZT8gOiBhbnksIG9sZFZhbHVlPyA6IGFueSl7XG4gICAgICAgIC8vIC8vY3VycmVudCBpbXBsZW1lbnRhdGlvbiBvbmx5IGFsbG93cyBjaGFuZ2luZyB0aGUgZmFjZXRzIG9mIGNlcnRhaW4gdHlwZXMgZm9yIHNhZmV0eVxuICAgICAgICAvLyAvL1RPRE8gY2hhbmdlIHRoaXMgdG8gYXJiaXRyYXJ5IGZhY2V0cyAocmVtb3ZlIHR5cGUgZmlsdGVyaW5nKVxuICAgICAgICAvL1xuICAgICAgICAvLyB2YXIgb2xkTmFtZXMgOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAvLyB2YXIgc2F2ZWRBdHRycyA9IFtdO1xuICAgICAgICAvLyBpZiAobmV3VmFsdWUgJiYgb2xkVmFsdWUpIHtcbiAgICAgICAgLy8gICAgIHRyeSB7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy5ub2RlLmRlZmluaXRpb24oKS5hbGxTdXBlclR5cGVzKCkuZm9yRWFjaChzdXBlclR5cGU9PiB7XG4gICAgICAgIC8vICAgICAgICAgICAgIGlmICh0aGlzLmlzQWxsb3dlZFR5cGVUb1JlcGxhY2VGYWNldHMoc3VwZXJUeXBlKSkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgdGhpcy5hZGRUeXBlRmFjZXRzKHN1cGVyVHlwZSwgb2xkTmFtZXMpXG4gICAgICAgIC8vICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICB9KVxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgIHNhdmVkQXR0cnMgPSBbXS5jb25jYXQodGhpcy5ub2RlLmF0dHJzKCkpXG4gICAgICAgIC8vICAgICB9IGNhdGNoIChlcnIpIHtjb25zb2xlLmxvZyhlcnIpfVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vXG4gICAgICAgIC8vIHN1cGVyLmZyb21FZGl0b3JUb01vZGVsKCk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGlmIChuZXdWYWx1ZSAmJiBvbGRWYWx1ZSkge1xuICAgICAgICAvLyAgICAgdHJ5IHtcbiAgICAgICAgLy8gICAgICAgICAvL2NvbGxlY3RpbmcgZmFjZXRzIGFsbG93ZWQgdG8gcmVtb3ZlXG4gICAgICAgIC8vICAgICAgICAgdmFyIGN1cnJlbnRVbml2ZXJzZSA9IHRoaXMubm9kZS5kZWZpbml0aW9uKCkudW5pdmVyc2UoKTtcbiAgICAgICAgLy8gICAgICAgICB2YXIgbmFtZXMgOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgIHRoaXMubm9kZS5kZWZpbml0aW9uKCkuYWxsU3VwZXJUeXBlcygpLmZvckVhY2goc3VwZXJUeXBlPT57XG4gICAgICAgIC8vICAgICAgICAgICAgIGlmICh0aGlzLmlzQWxsb3dlZFR5cGVUb1JlcGxhY2VGYWNldHMoc3VwZXJUeXBlKSkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgdGhpcy5hZGRUeXBlRmFjZXRzKHN1cGVyVHlwZSwgbmFtZXMpXG4gICAgICAgIC8vICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICB9KVxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgIGlmIChvbGROYW1lcy5sZW5ndGggPiAwICYmIG5hbWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgc2F2ZWRBdHRycy5mb3JFYWNoKGF0dHJpYnV0ZSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBpZiAoXy5maW5kKG9sZE5hbWVzLCBmYWNldE5hbWUgPT4gZmFjZXROYW1lID09IGF0dHJpYnV0ZS5uYW1lKCkpXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgJiYgIV8uZmluZChuYW1lcywgZmFjZXROYW1lID0+IGZhY2V0TmFtZSA9PSBhdHRyaWJ1dGUubmFtZSgpKSkge1xuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRoaXMubm9kZS5yZW1vdmUoYXR0cmlidXRlKVxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgICAgICB9KVxuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH0gY2F0Y2ggKGVycikge2NvbnNvbGUubG9nKGVycil9XG4gICAgICAgIC8vIH1cbiAgICB9XG5cbiAgICAvLyBwcml2YXRlIGlzQWxsb3dlZFR5cGVUb1JlcGxhY2VGYWNldHMoY3VycmVudFR5cGVEZWYgOiBobC5JVHlwZURlZmluaXRpb24pIDogYm9vbGVhbiB7XG4gICAgLy8gICAgIHJldHVybiBjdXJyZW50VHlwZURlZi5rZXkoKSA9PSB1bml2ZXJzZS5Vbml2ZXJzZTEwLlN0cmluZ1R5cGVEZWNsYXJhdGlvbiB8fFxuICAgIC8vICAgICAgICAgY3VycmVudFR5cGVEZWYua2V5KCkgPT0gdW5pdmVyc2UuVW5pdmVyc2UxMC5Cb29sZWFuVHlwZURlY2xhcmF0aW9uIHx8XG4gICAgLy8gICAgICAgICBjdXJyZW50VHlwZURlZi5rZXkoKSA9PSB1bml2ZXJzZS5Vbml2ZXJzZTEwLk51bWJlclR5cGVEZWNsYXJhdGlvbiB8fFxuICAgIC8vICAgICAgICAgY3VycmVudFR5cGVEZWYua2V5KCkgPT0gdW5pdmVyc2UuVW5pdmVyc2UxMC5JbnRlZ2VyVHlwZURlY2xhcmF0aW9uO1xuICAgIC8vIH1cblxuICAgIC8vIHByaXZhdGUgYWRkVHlwZUZhY2V0cyhjdXJyZW50VHlwZURlZiA6IGhsLklUeXBlRGVmaW5pdGlvbiAsIG5hbWVzIDogc3RyaW5nW10pIDogdm9pZCB7XG4gICAgLy8gICAgIGN1cnJlbnRUeXBlRGVmLnByb3BlcnRpZXMoKS5tYXAocHJvcGVydHk9PnByb3BlcnR5Lm5hbWVJZCgpKS5mb3JFYWNoKG5hbWU9Pm5hbWVzLnB1c2gobmFtZSkpO1xuICAgIC8vIH1cbn1cblxuY2xhc3MgVHJlZUZpZWxkIGV4dGVuZHMgVUkuUGFuZWwgaW1wbGVtZW50cyBVSS5JRmllbGQ8YW55PntcblxuICAgIGNvbnN0cnVjdG9yKG91dGxpbmVOb2RlIDogcmFtbFNlcnZlci5EZXRhaWxzSXRlbUpTT04sIHByb3RlY3RlZCBjb250ZXh0OiBEZXRhaWxzQ29udGV4dCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHZhciByZW5kZXJlcj17XG5cblxuICAgICAgICAgICAgcmVuZGVyKG5vZGUgOiByYW1sU2VydmVyLkRldGFpbHNWYWx1ZWRJdGVtSlNPTil7XG5cbiAgICAgICAgICAgICAgICB2YXIgbGVmdD1VSS5sYWJlbChub2RlLnRpdGxlLFVJLkljb24uQ0lSQ1VJVF9CT0FSRCxVSS5UZXh0Q2xhc3Nlcy5ISUdITElHSFQpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJpZ2h0PVVJLmxhYmVsKG5vZGUudmFsdWVUZXh0PyhcIjpcIitub2RlLnZhbHVlVGV4dCk6XCJcIixcbiAgICAgICAgICAgICAgICAgICAgVUkuSWNvbi5OT05FLFVJLlRleHRDbGFzc2VzLlNVQ0NFU1MpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdD1VSS5oYyhsZWZ0LHJpZ2h0KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldENoaWxkcmVuID0gKG5vZGUgOiByYW1sU2VydmVyLkRldGFpbHNWYWx1ZWRJdGVtSlNPTikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUuY2hpbGRyZW4/bm9kZS5jaGlsZHJlbjpbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB2aWV3ZXI9VUkudHJlZVZpZXdlcihnZXRDaGlsZHJlbiwgcmVuZGVyZXIsIHggPT4geC50aXRsZSk7XG5cbiAgICAgICAgdmFyIGlucHV0VmFsdWU9e1xuICAgICAgICAgICAgY2hpbGRyZW46W291dGxpbmVOb2RlXVxuICAgICAgICB9XG5cbiAgICAgICAgdmlld2VyLnNldElucHV0KDxhbnk+aW5wdXRWYWx1ZSk7XG5cbiAgICAgICAgdGhpcy5hZGRDaGlsZChVSS5sYWJlbChvdXRsaW5lTm9kZS50aXRsZSkpXG5cbiAgICAgICAgdGhpcy5hZGRDaGlsZCh2aWV3ZXIpO1xuICAgIH1cblxuXG5cbiAgICBzZXRMYWJlbFdpZHRoKCl7XG5cbiAgICB9XG4gICAgc2V0TGFiZWxIZWlnaHQoKXtcblxuICAgIH1cbiAgICBzZXRSZXF1aXJlZCh2OmJvb2xlYW4pe1xuXG4gICAgfVxufVxuY2xhc3MgU3RydWN0dXJlZEZpZWxkIGV4dGVuZHMgUHJvcGVydHlFZGl0b3JJbmZve1xuXG4gICAgY3JlYXRlRmllbGQoKXtcblxuICAgICAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLm91dGxpbmVOb2RlLmNoaWxkcmVuO1xuICAgICAgICBpZiAoIWNoaWxkcmVuIHx8IGNoaWxkcmVuLmxlbmd0aCAhPSAxKSByZXR1cm4gbnVsbDtcblxuICAgICAgICB2YXIgdG09IG5ldyBUcmVlRmllbGQoY2hpbGRyZW5bMF0sIHRoaXMuY29udGV4dCk7XG4gICAgICAgIHJldHVybiB0bTtcbiAgICB9XG59XG5cbmNsYXNzIExvd0xldmVsVHJlZUZpZWxkIGV4dGVuZHMgUHJvcGVydHlFZGl0b3JJbmZve1xuXG4gICAgY3JlYXRlRmllbGQoKXtcbiAgICAgICAgbGV0IGNoaWxkcmVuID0gdGhpcy5vdXRsaW5lTm9kZS5jaGlsZHJlbjtcbiAgICAgICAgaWYgKCFjaGlsZHJlbiB8fCBjaGlsZHJlbi5sZW5ndGggIT0gMSkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgdmFyIHRtPSBuZXcgVHJlZUZpZWxkKGNoaWxkcmVuWzBdLCB0aGlzLmNvbnRleHQpO1xuICAgICAgICByZXR1cm4gdG07XG4gICAgfVxufVxuXG5jbGFzcyBBY3Rpb25zSXRlbSBleHRlbmRzIEl0ZW0ge1xuXG4gICAgcHJpdmF0ZSBub2RlczogcmFtbFNlcnZlci5EZXRhaWxzQWN0aW9uSXRlbUpTT05bXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGNvbnRleHQ6IERldGFpbHNDb250ZXh0KXtcbiAgICAgICAgc3VwZXIoXCJBY3Rpb25zXCIsXCJcIik7XG4gICAgfVxuXG4gICAgYWRkTm9kZShub2RlOiByYW1sU2VydmVyLkRldGFpbHNBY3Rpb25JdGVtSlNPTikge1xuICAgICAgICB0aGlzLm5vZGVzLnB1c2gobm9kZSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKHI6UmVuZGVyaW5nT3B0aW9ucyl7XG5cbiAgICAgICAgdmFyIHJlc3VsdD1VSS52YygpO1xuICAgICAgICB2YXIgaGM9VUkuaGMoKTtcbiAgICAgICAgcmVzdWx0LmFkZENoaWxkKFVJLmgzKFwiSW5zZXJ0aW9ucyBhbmQgRGVsZXRlOiBcIikpO1xuICAgICAgICByZXN1bHQuYWRkQ2hpbGQoaGMpXG5cbiAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgICAgICBpZiAobm9kZS5zdWJUeXBlID09IFwiSU5TRVJUXCIpIHtcbiAgICAgICAgICAgICAgICBoYy5hZGRDaGlsZChVSS5idXR0b24oXG4gICAgICAgICAgICAgICAgICAgIG5vZGUudGl0bGUsVUkuQnV0dG9uU2l6ZXMuRVhUUkFfU01BTEwsVUkuQnV0dG9uSGlnaGxpZ2h0cy5JTkZPLFVJLkljb24uTk9ORSx4PT57XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bihub2RlLmlkKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKS5tYXJnaW4oMywzLDMsMykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICAgICAgaWYgKG5vZGUuc3ViVHlwZSA9PSBcIklOU0VSVF9WQUxVRVwiKSB7XG4gICAgICAgICAgICAgICAgaGMuYWRkQ2hpbGQoVUkuYnV0dG9uKFxuICAgICAgICAgICAgICAgICAgICBub2RlLnRpdGxlLFVJLkJ1dHRvblNpemVzLkVYVFJBX1NNQUxMLFVJLkJ1dHRvbkhpZ2hsaWdodHMuV0FSTklORyxVSS5JY29uLk5PTkUseD0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ydW4obm9kZS5pZClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICkubWFyZ2luKDMsMywzLDMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgIGlmIChub2RlLnN1YlR5cGUgPT0gXCJERUxFVEVcIikge1xuICAgICAgICAgICAgICAgIGhjLmFkZENoaWxkKFVJLmJ1dHRvbihcbiAgICAgICAgICAgICAgICAgICAgbm9kZS50aXRsZSxVSS5CdXR0b25TaXplcy5FWFRSQV9TTUFMTCxVSS5CdXR0b25IaWdobGlnaHRzLkVSUk9SLFVJLkljb24uTk9ORSx4PT57XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bihub2RlLmlkKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKS5tYXJnaW4oMywzLDMsMykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBydW4oYWN0aW9uSUQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gcmFtbFNlcnZlci5nZXROb2RlQ2xpZW50Q29ubmVjdGlvbigpO1xuXG4gICAgICAgIGNvbm5lY3Rpb24uZXhlY3V0ZURldGFpbHNBY3Rpb24odGhpcy5jb250ZXh0LnVyaSwgYWN0aW9uSUQsIHRoaXMuY29udGV4dC5wb3NpdGlvblxuICAgICAgICApLnRoZW4oKGNoYW5nZWREb2N1bWVudHMgPT4ge1xuICAgICAgICAgICAgYXBwbHlDaGFuZ2VkRG9jdW1lbnRzKGNoYW5nZWREb2N1bWVudHMpO1xuICAgICAgICB9KSlcbiAgICB9XG5cbiAgICBkaXNwb3NlKCl7XG5cbiAgICB9XG59XG5cbi8qKlxuICogSW5zdGFuY2VvZiBjaGVjayBmb3IgQWN0aW9uc0l0ZW0uXG4gKiBAcGFyYW0gaXRlbVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNJbnN0YW5jZU9mQWN0aW9uc0l0ZW0oaXRlbTogSXRlbSkgOiBpdGVtIGlzIEFjdGlvbnNJdGVtIHtcbiAgICByZXR1cm4gKGl0ZW0gYXMgQWN0aW9uc0l0ZW0pLmFkZE5vZGUgIT0gbnVsbDtcbn1cblxuY2xhc3MgQ3VzdG9tQWN0aW9uc0l0ZW0gZXh0ZW5kcyBJdGVtIHtcblxuICAgIHByaXZhdGUgbm9kZXM6IHJhbWxTZXJ2ZXIuRGV0YWlsc0FjdGlvbkl0ZW1KU09OW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjb250ZXh0OiBEZXRhaWxzQ29udGV4dCl7XG4gICAgICAgIHN1cGVyKFwiQWN0aW9uc1wiLFwiXCIpO1xuICAgIH1cblxuICAgIGFkZEFjdGlvbihub2RlOiByYW1sU2VydmVyLkRldGFpbHNBY3Rpb25JdGVtSlNPTikge1xuICAgICAgICB0aGlzLm5vZGVzLnB1c2gobm9kZSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKHI6UmVuZGVyaW5nT3B0aW9ucyl7XG5cbiAgICAgICAgdmFyIHJlc3VsdD1VSS52YygpO1xuICAgICAgICB2YXIgaGM9VUkuaGMoKTtcbiAgICAgICAgcmVzdWx0LmFkZENoaWxkKFVJLmgzKFwiQ3VzdG9tIEFjdGlvbnM6IFwiKSk7XG4gICAgICAgIHJlc3VsdC5hZGRDaGlsZChoYylcblxuICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgIGhjLmFkZENoaWxkKFVJLmJ1dHRvbihcbiAgICAgICAgICAgICAgICBub2RlLnRpdGxlLFVJLkJ1dHRvblNpemVzLkVYVFJBX1NNQUxMLFVJLkJ1dHRvbkhpZ2hsaWdodHMuSU5GTyxVSS5JY29uLk5PTkUseD0+e1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bihub2RlLmlkKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICkubWFyZ2luKDMsMywzLDMpKTtcbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHByaXZhdGUgcnVuKGFjdGlvbklEOiBzdHJpbmcpIHtcbiAgICAgICAgbGF1bmNoU2VydmVyQWN0aW9uQnlJRCh0aGlzLmNvbnRleHQudXJpLCBhY3Rpb25JRCwgdGhpcy5jb250ZXh0LnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBkaXNwb3NlKCl7XG5cbiAgICB9XG59XG5cbi8qKlxuICogSW5zdGFuY2VvZiBjaGVjayBmb3IgQWN0aW9uc0l0ZW0uXG4gKiBAcGFyYW0gaXRlbVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNJbnN0YW5jZU9mQ3VzdG9tQWN0aW9uc0l0ZW0oaXRlbTogSXRlbSkgOiBpdGVtIGlzIEN1c3RvbUFjdGlvbnNJdGVtIHtcbiAgICByZXR1cm4gKGl0ZW0gYXMgQ3VzdG9tQWN0aW9uc0l0ZW0pLmFkZEFjdGlvbiAhPSBudWxsO1xufVxuXG4vLyBmdW5jdGlvbiBjYXRlZ29yeShwOmhsLklQcm9wZXJ0eSxub2RlOmhsLklIaWdoTGV2ZWxOb2RlKTpzdHJpbmd7XG4vLyAgICAgaWYgKHAuZ2V0QWRhcHRlcihkZWYuUkFNTFByb3BlcnR5U2VydmljZSkuaXNLZXkoKXx8cC5pc1JlcXVpcmVkKCkpe1xuLy8gICAgICAgICByZXR1cm4gbnVsbDtcbi8vICAgICB9XG4vLyAgICAgaWYgKHAuZG9tYWluKCkmJiFwLmRvbWFpbigpLmdldEFkYXB0ZXIoZGVmLlJBTUxTZXJ2aWNlKS5pc1VzZXJEZWZpbmVkKCkpIHtcbi8vICAgICAgICAgaWYgKHVuaXZlcnNlaGVscGVycy5pc0RvY3VtZW50YXRpb25Qcm9wZXJ0eShwKSB8fFxuLy8gICAgICAgICAgICAgdW5pdmVyc2VoZWxwZXJzLmlzVXNhZ2VQcm9wZXJ0eShwKSB8fFxuLy8gICAgICAgICAgICAgdW5pdmVyc2VoZWxwZXJzLmlzRGVzY3JpcHRpb25Qcm9wZXJ0eShwKSB8fFxuLy8gICAgICAgICAgICAgdW5pdmVyc2VoZWxwZXJzLmlzRGlzcGxheU5hbWVQcm9wZXJ0eShwKSB8fFxuLy8gICAgICAgICAgICAgdW5pdmVyc2VoZWxwZXJzLmlzVGl0bGVQcm9wZXJ0eShwKSkge1xuLy8gICAgICAgICAgICAgcmV0dXJuIFwiRG9jdW1lbnRhdGlvblwiO1xuLy8gICAgICAgICB9XG4vLyAgICAgICAgIGlmICh1bml2ZXJzZWhlbHBlcnMuaXNBbm5vdGF0aW9uc1Byb3BlcnR5KHApIHx8XG4vLyAgICAgICAgICAgICB1bml2ZXJzZWhlbHBlcnMuaXNJc1Byb3BlcnR5KHApIHx8XG4vLyAgICAgICAgICAgICB1bml2ZXJzZWhlbHBlcnMuaXNTZWN1cmVkQnlQcm9wZXJ0eShwKSB8fFxuLy8gICAgICAgICAgICAgKHVuaXZlcnNlaGVscGVycy5pc1R5cGVQcm9wZXJ0eShwKSYmIXAuZ2V0QWRhcHRlcihkZWYuUkFNTFByb3BlcnR5U2VydmljZSkuaXNUeXBlRXhwcigpKSkge1xuLy8gICAgICAgICAgICAgcmV0dXJuIFwiUmVmZXJlbmNlc1wiO1xuLy8gICAgICAgICB9XG4vLyAgICAgICAgIGlmICh1bml2ZXJzZWhlbHBlcnMuaXNQcm90b2NvbHNQcm9wZXJ0eShwKSl7XG4vLyAgICAgICAgICAgICByZXR1cm4gXCJHZW5lcmFsXCI7XG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vL1xuLy8gICAgIGlmICh1bml2ZXJzZWhlbHBlcnMuaXNUeXBlUHJvcGVydHkocCkpe1xuLy8gICAgICAgICBpZiAocC5kb21haW4oKSYmIXAuZG9tYWluKCkuZ2V0QWRhcHRlcihkZWYuUkFNTFNlcnZpY2UpLmlzVXNlckRlZmluZWQoKSl7XG4vLyAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vICAgICBpZiAobm9kZS5wcm9wZXJ0eSgpKSB7XG4vLyAgICAgICAgIGlmIChwLmRvbWFpbigpICYmIHAuZG9tYWluKCkgIT0gbm9kZS5wcm9wZXJ0eSgpLnJhbmdlKCkpIHtcbi8vICAgICAgICAgICAgIHJldHVybiBcIkZhY2V0c1wiO1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIHJldHVybiBcIkdlbmVyYWxcIjtcbi8vIH1cbi8vXG4vLyB2YXIgdmFsdWVPcHRpb25zID0gZnVuY3Rpb24gKHg6aGwuSVByb3BlcnR5LCBub2RlOmhsLklIaWdoTGV2ZWxOb2RlKTpzdHJpbmdbXSB7XG4vLyAgICAgdmFyIHZscyA9IHNlYXJjaC5lbnVtVmFsdWVzKHgsbm9kZSk7XG4vLyAgICAgaWYgKHVuaXZlcnNlaGVscGVycy5pc05hbWVQcm9wZXJ0eSh4KSl7XG4vLyAgICAgICAgIGlmIChub2RlLmRlZmluaXRpb24oKS5pc0Fzc2lnbmFibGVGcm9tKHVuaXZlcnNlLlVuaXZlcnNlMTAuVHlwZURlY2xhcmF0aW9uLm5hbWUpKXtcbi8vICAgICAgICAgICAgIGlmIChub2RlLnByb3BlcnR5KCkmJnVuaXZlcnNlaGVscGVycy5pc0JvZHlQcm9wZXJ0eShub2RlLnByb3BlcnR5KCkpKXtcbi8vICAgICAgICAgICAgICAgICBpZiAoIShub2RlLnByb3BlcnR5KCkgaW5zdGFuY2VvZiBkZWYuVXNlckRlZmluZWRQcm9wKSkge1xuLy8gICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5wYXJlbnQoKSYmXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB1bml2ZXJzZWhlbHBlcnMuaXNNZXRob2RUeXBlKG5vZGUucGFyZW50KCkuZGVmaW5pdGlvbigpKSl7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1wiYXBwbGljYXRpb24vanNvblwiLCBcImFwcGxpY2F0aW9uL3htbFwiLFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiLFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCJdXG4vLyAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcImFwcGxpY2F0aW9uL2pzb25cIiwgXCJhcHBsaWNhdGlvbi94bWxcIl1cbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyAgICAgaWYgKCghdmxzKSB8fCB2bHMubGVuZ3RoID09IDApIHtcbi8vICAgICAgICAgdmFyIHN1ZyA9ICg8ZGVmLlByb3BlcnR5PngpLnN1Z2dlc3RlcigpXG4vLyAgICAgICAgIGlmIChzdWcpIHtcbi8vICAgICAgICAgICAgIHZscyA9IHN1Zyhub2RlKTtcbi8vXG4vLyAgICAgICAgIH1cbi8vICAgICAgICAgaWYgKCghdmxzKSB8fCB2bHMubGVuZ3RoID09IDApIHtcbi8vICAgICAgICAgICAgIHZscyA9ICg8ZGVmLlByb3BlcnR5PngpLmdldE9mdGVuS2V5cygpO1xuLy9cbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vICAgICByZXR1cm4gXy51bmlxdWUodmxzKTtcbi8vIH07XG4vL1xuLy8gZnVuY3Rpb24gYWRkRXhhbXBsZUNvbnRyb2wocHJvcGVydHk6IGhsLklQcm9wZXJ0eSwgbm9kZSA6IGhsLklIaWdoTGV2ZWxOb2RlLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhhbXBsZUVsZW1lbnQgOiBobC5JSGlnaExldmVsTm9kZSwgZXhhbXBsZSA6IGRlZi5ydC5ub21pbmFsVHlwZXMuSUV4cGFuZGFibGVFeGFtcGxlLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyIDogVG9wTGV2ZWxOb2RlKSB7XG4vL1xuLy8gICAgIGlmIChleGFtcGxlLmlzWUFNTCgpKSB7XG4vLyAgICAgICAgIGNvbnRhaW5lci5hZGRJdGVtVG9DYXRlZ29yeShjYXRlZ29yeShwcm9wZXJ0eSwgbm9kZSksXG4vLyAgICAgICAgICAgICBuZXcgTG93TGV2ZWxUcmVlRmllbGQocHJvcGVydHksIG5vZGUsIGV4YW1wbGVFbGVtZW50Lmxvd0xldmVsKCksIGV4YW1wbGUubmFtZSgpKSk7XG4vLyAgICAgfSBlbHNlIGlmIChleGFtcGxlLmlzSlNPTlN0cmluZygpKSB7XG4vLyAgICAgICAgIGNvbnRhaW5lci5hZGRJdGVtVG9DYXRlZ29yeShjYXRlZ29yeShwcm9wZXJ0eSwgbm9kZSksXG4vLyAgICAgICAgICAgICBuZXcgRXhhbXBsZUZpZWxkKHByb3BlcnR5LCBub2RlLCBleGFtcGxlLmFzU3RyaW5nKCksIGV4YW1wbGUubmFtZSgpKSk7XG4vLyAgICAgfSBlbHNlIGlmIChleGFtcGxlLmlzWE1MU3RyaW5nKCkpIHtcbi8vICAgICAgICAgY29udGFpbmVyLmFkZEl0ZW1Ub0NhdGVnb3J5KGNhdGVnb3J5KHByb3BlcnR5LCBub2RlKSxcbi8vICAgICAgICAgICAgIG5ldyBYTUxFeGFtcGxlRmllbGQocHJvcGVydHksIG5vZGUsIGV4YW1wbGUuYXNTdHJpbmcoKSwgZXhhbXBsZS5uYW1lKCkpKTtcbi8vICAgICB9XG4vLyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEl0ZW0oZGV0YWlsc05vZGU6cmFtbFNlcnZlci5EZXRhaWxzSXRlbUpTT04sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IERldGFpbHNDb250ZXh0LCBkaWFsb2c6Ym9vbGVhbil7XG5cblxuICAgIGxldCByb290PW5ldyBUb3BMZXZlbE5vZGUoZGV0YWlsc05vZGUsIGNvbnRleHQpO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgaWYoZGV0YWlsc05vZGUgJiYgZGV0YWlsc05vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGZvciAobGV0IGNoaWxkIG9mIGRldGFpbHNOb2RlLmNoaWxkcmVuKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PSBcIkNBVEVHT1JZXCIpIHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgY2F0ZWdvcnlOYW1lID0gY2hpbGQudGl0bGU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgY2hpbGRPZkNoaWxkIG9mIGNoaWxkLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRJdGVtSW5DYXRlZ29yeShjaGlsZE9mQ2hpbGQsIHJvb3QsIGNhdGVnb3J5TmFtZSwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkSXRlbUluQ2F0ZWdvcnkoY2hpbGQsIHJvb3QsIG51bGwsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgIH1cblxuICAgIHJldHVybiByb290O1xufVxuXG5mdW5jdGlvbiBidWlsZEl0ZW1JbkNhdGVnb3J5KFxuICAgIGRldGFpbHNOb2RlOiByYW1sU2VydmVyLkRldGFpbHNJdGVtSlNPTiwgcm9vdDogVG9wTGV2ZWxOb2RlLCBjYXRlZ29yeU5hbWU6c3RyaW5nLFxuICAgIGNvbnRleHQ6IERldGFpbHNDb250ZXh0KSB7XG5cbiAgICBsZXQgaXRlbSA9IG51bGw7XG5cbiAgICB0cnkge1xuICAgICAgICBpZiAoZGV0YWlsc05vZGUudHlwZSA9PSBcIkNIRUNLQk9YXCIpIHtcbiAgICAgICAgICAgIGl0ZW0gPSBuZXcgQ2hlY2tCb3hGaWVsZCg8cmFtbFNlcnZlci5EZXRhaWxzVmFsdWVkSXRlbUpTT04+ZGV0YWlsc05vZGUsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRldGFpbHNOb2RlLnR5cGUgPT0gXCJKU09OU0NIRU1BXCJcbiAgICAgICAgICAgICYmICg8cmFtbFNlcnZlci5EZXRhaWxzVmFsdWVkSXRlbUpTT04+ZGV0YWlsc05vZGUpLnZhbHVlVGV4dCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaXRlbSA9IG5ldyBKU09OU2NoZW1hRmllbGQoPHJhbWxTZXJ2ZXIuRGV0YWlsc1ZhbHVlZEl0ZW1KU09OPmRldGFpbHNOb2RlLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZXRhaWxzTm9kZS50eXBlID09IFwiWE1MU0NIRU1BXCJcbiAgICAgICAgICAgICYmICg8cmFtbFNlcnZlci5EZXRhaWxzVmFsdWVkSXRlbUpTT04+ZGV0YWlsc05vZGUpLnZhbHVlVGV4dCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaXRlbSA9IG5ldyBYTUxTY2hlbWFGaWVsZCg8cmFtbFNlcnZlci5EZXRhaWxzVmFsdWVkSXRlbUpTT04+ZGV0YWlsc05vZGUsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRldGFpbHNOb2RlLnR5cGUgPT0gXCJNQVJLRE9XTlwiKSB7XG4gICAgICAgICAgICBpdGVtID0gbmV3IE1hcmtkb3duRmllbGQoPHJhbWxTZXJ2ZXIuRGV0YWlsc1ZhbHVlZEl0ZW1KU09OPmRldGFpbHNOb2RlLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZXRhaWxzTm9kZS50eXBlID09IFwiU0VMRUNUQk9YXCJcbiAgICAgICAgICAgICYmICg8cmFtbFNlcnZlci5EZXRhaWxzSXRlbVdpdGhPcHRpb25zSlNPTj5kZXRhaWxzTm9kZSkub3B0aW9ucyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaXRlbSA9IG5ldyBTZWxlY3RCb3goPHJhbWxTZXJ2ZXIuRGV0YWlsc0l0ZW1XaXRoT3B0aW9uc0pTT04+ZGV0YWlsc05vZGUsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRldGFpbHNOb2RlLnR5cGUgPT0gXCJNVUxUSUVESVRPUlwiKSB7XG4gICAgICAgICAgICBpdGVtID0gbmV3IFNpbXBsZU11bHRpRWRpdG9yKDxyYW1sU2VydmVyLkRldGFpbHNWYWx1ZWRJdGVtSlNPTj5kZXRhaWxzTm9kZSwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGV0YWlsc05vZGUudHlwZSA9PSBcIlRSRUVcIikge1xuICAgICAgICAgICAgaXRlbSA9IG5ldyBMb3dMZXZlbFRyZWVGaWVsZCg8cmFtbFNlcnZlci5EZXRhaWxzVmFsdWVkSXRlbUpTT04+ZGV0YWlsc05vZGUsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRldGFpbHNOb2RlLnR5cGUgPT0gXCJTVFJVQ1RVUkVEXCIpIHtcbiAgICAgICAgICAgIGl0ZW0gPSBuZXcgU3RydWN0dXJlZEZpZWxkKDxyYW1sU2VydmVyLkRldGFpbHNWYWx1ZWRJdGVtSlNPTj5kZXRhaWxzTm9kZSwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGV0YWlsc05vZGUudHlwZSA9PSBcIlRZUEVESVNQTEFZXCIpIHtcbiAgICAgICAgICAgIGl0ZW0gPSBuZXcgVHlwZURpc3BsYXlJdGVtKGRldGFpbHNOb2RlLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZXRhaWxzTm9kZS50eXBlID09IFwiVFlQRVNFTEVDVFwiKSB7XG4gICAgICAgICAgICBpdGVtID0gbmV3IFR5cGVTZWxlY3RCb3goPHJhbWxTZXJ2ZXIuRGV0YWlsc0l0ZW1XaXRoT3B0aW9uc0pTT04+ZGV0YWlsc05vZGUsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRldGFpbHNOb2RlLnR5cGUgPT0gXCJKU09ORVhBTVBMRVwiXG4gICAgICAgICAgICAmJiAoPHJhbWxTZXJ2ZXIuRGV0YWlsc1ZhbHVlZEl0ZW1KU09OPmRldGFpbHNOb2RlKS52YWx1ZVRleHQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGl0ZW0gPSBuZXcgRXhhbXBsZUZpZWxkKDxyYW1sU2VydmVyLkRldGFpbHNWYWx1ZWRJdGVtSlNPTj5kZXRhaWxzTm9kZSwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGV0YWlsc05vZGUudHlwZSA9PSBcIlhNTEVYQU1QTEVcIlxuICAgICAgICAgICAgJiYgKDxyYW1sU2VydmVyLkRldGFpbHNWYWx1ZWRJdGVtSlNPTj5kZXRhaWxzTm9kZSkudmFsdWVUZXh0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpdGVtID0gbmV3IFhNTEV4YW1wbGVGaWVsZCg8cmFtbFNlcnZlci5EZXRhaWxzVmFsdWVkSXRlbUpTT04+ZGV0YWlsc05vZGUsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRldGFpbHNOb2RlLnR5cGUgPT0gXCJBVFRSSUJVVEVURVhUXCIpIHtcbiAgICAgICAgICAgIGl0ZW0gPSBuZXcgUHJvcGVydHlFZGl0b3JJbmZvKDxyYW1sU2VydmVyLkRldGFpbHNWYWx1ZWRJdGVtSlNPTj5kZXRhaWxzTm9kZSwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGV0YWlsc05vZGUudHlwZSA9PSBcIkRFVEFJTFNfQUNUSU9OXCIpIHtcblxuICAgICAgICAgICAgaWYgKChkZXRhaWxzTm9kZSBhcyByYW1sU2VydmVyLkRldGFpbHNBY3Rpb25JdGVtSlNPTikuc3ViVHlwZSAhPSBcIkNVU1RPTV9BQ1RJT05cIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGlvbkl0ZW0gPSBmaW5kT3JDcmVhdGVBY3Rpb25JdGVtSW5DYXRlZ29yeShyb290LCBjYXRlZ29yeU5hbWUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgICAgICAgYWN0aW9uSXRlbS5hZGROb2RlKGRldGFpbHNOb2RlIGFzIHJhbWxTZXJ2ZXIuRGV0YWlsc0FjdGlvbkl0ZW1KU09OKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VzdG9tQWN0aW9uSXRlbSA9IGZpbmRPckNyZWF0ZUN1c3RvbUFjdGlvbkl0ZW1JbkNhdGVnb3J5KHJvb3QsIGNhdGVnb3J5TmFtZSwgY29udGV4dCk7XG5cbiAgICAgICAgICAgICAgICBjdXN0b21BY3Rpb25JdGVtLmFkZEFjdGlvbihkZXRhaWxzTm9kZSBhcyByYW1sU2VydmVyLkRldGFpbHNBY3Rpb25JdGVtSlNPTik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgICB9XG5cbiAgICBpZiAoaXRlbSAhPSBudWxsKSB7XG4gICAgICAgIHJvb3QuYWRkSXRlbVRvQ2F0ZWdvcnkoY2F0ZWdvcnlOYW1lLCBpdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkNhbiBub3QgcmVjb2duaXplIGVsZW1lbnQgXCIgKyBkZXRhaWxzTm9kZS50eXBlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRPckNyZWF0ZUFjdGlvbkl0ZW1JbkNhdGVnb3J5KHJvb3Q6IFRvcExldmVsTm9kZSwgY2F0ZWdvcnlOYW1lOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBEZXRhaWxzQ29udGV4dCkgOiBBY3Rpb25zSXRlbSB7XG4gICAgY29uc3QgY2F0ZWdvcnkgPSByb290LnN1YkNhdGVnb3J5QnlOYW1lT3JDcmVhdGUoY2F0ZWdvcnlOYW1lKTtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNhdGVnb3J5LmNoaWxkcmVuKCkpIHtcbiAgICAgICAgaWYgKGlzSW5zdGFuY2VPZkFjdGlvbnNJdGVtKGNoaWxkKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgYWN0aW9uc0l0ZW0gPSBuZXcgQWN0aW9uc0l0ZW0oY29udGV4dCk7XG4gICAgY2F0ZWdvcnkuY2hpbGRyZW4oKS51bnNoaWZ0KGFjdGlvbnNJdGVtKTtcblxuICAgIHJldHVybiBhY3Rpb25zSXRlbTtcbn1cblxuZnVuY3Rpb24gZmluZEFjdGlvbkl0ZW1JbkNhdGVnb3J5KHJvb3Q6IFRvcExldmVsTm9kZSwgY2F0ZWdvcnlOYW1lOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogRGV0YWlsc0NvbnRleHQpIHtcbiAgICBjb25zdCBjYXRlZ29yeSA9IHJvb3Quc3ViQ2F0ZWdvcnlCeU5hbWVPckNyZWF0ZShjYXRlZ29yeU5hbWUpO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2F0ZWdvcnkuY2hpbGRyZW4oKSkge1xuICAgICAgICBpZiAoaXNJbnN0YW5jZU9mQWN0aW9uc0l0ZW0oY2hpbGQpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZmluZE9yQ3JlYXRlQ3VzdG9tQWN0aW9uSXRlbUluQ2F0ZWdvcnkocm9vdDogVG9wTGV2ZWxOb2RlLCBjYXRlZ29yeU5hbWU6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IERldGFpbHNDb250ZXh0KSA6IEN1c3RvbUFjdGlvbnNJdGVtIHtcbiAgICBjb25zdCBjYXRlZ29yeSA9IHJvb3Quc3ViQ2F0ZWdvcnlCeU5hbWVPckNyZWF0ZShjYXRlZ29yeU5hbWUpO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2F0ZWdvcnkuY2hpbGRyZW4oKSkge1xuICAgICAgICBpZiAoaXNJbnN0YW5jZU9mQ3VzdG9tQWN0aW9uc0l0ZW0oY2hpbGQpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjdXN0b21BY3Rpb25zSXRlbSA9IG5ldyBDdXN0b21BY3Rpb25zSXRlbShjb250ZXh0KTtcblxuICAgIGNvbnN0IGluc2VydGVyQWN0aW9uc0l0ZW0gPSBmaW5kQWN0aW9uSXRlbUluQ2F0ZWdvcnkocm9vdCwgY2F0ZWdvcnlOYW1lLCBjb250ZXh0KTtcblxuICAgIGlmIChpbnNlcnRlckFjdGlvbnNJdGVtKSB7XG4gICAgICAgIGNhdGVnb3J5LmNoaWxkcmVuKCkuc3BsaWNlKDEsIDAsIGN1c3RvbUFjdGlvbnNJdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjYXRlZ29yeS5jaGlsZHJlbigpLnVuc2hpZnQoY3VzdG9tQWN0aW9uc0l0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiBjdXN0b21BY3Rpb25zSXRlbTtcbn0iXX0=\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"underscore\");\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar fs = __webpack_require__(12);\n\tvar path = __webpack_require__(2);\n\tvar UI = __webpack_require__(5);\n\tvar SpacePenViews = __webpack_require__(7);\n\t// import yaml = require(\"yaml-ast-parser\")\n\tvar linterUI = __webpack_require__(13);\n\tvar editorTools = __webpack_require__(1);\n\tvar ramlServer = __webpack_require__(17);\n\tvar textEditProcessor = ramlServer.textEditProcessor;\n\t// export function createGlobalSchema(attr:hl.IAttribute){\n\t//     var r=attr.parent().root();\n\t//     var t:def.NodeClass=<def.NodeClass>attr.property().range().universe().type(\"GlobalSchema\");\n\t//     var sc=stubs.createStubNode(t,(<any>t.universe().type(\"Api\")).property(\"schemas\"),\"\"+attr.value());\n\t//     sc.attrOrCreate(\"value\").setValue(\"!include \"+\"schemas/\"+attr.value()+\".json\")\n\t//     r.add(sc);\n\t//     var ed=atom.workspace.getActiveTextEditor();\n\t//     ed.getBuffer().setText(r.lowLevel().unit().contents());\n\t//     var sdir=path.resolve(path.dirname(ed.getPath()),\"schemas\");\n\t//     if (!fs.existsSync(sdir)){\n\t//         fs.mkdirSync(sdir);\n\t//     }\n\t//     var shFile=path.resolve(sdir,attr.value()+\".json\");\n\t//     fs.writeFileSync(shFile,`\n\t// {\n\t//   \"$schema\" : \"http://json-schema.org/draft-04/schema\" ,\n\t//   \"type\" : \"object\" ,\n\t//   \"properties\" : {\n\t//    }\n\t// }\n\t// `)\n\t//    atom.workspace.open(shFile,{});\n\t// }\n\t// export function createGlobalSchemaFromNameAndContent(root:hl.IHighLevelNode,name:string,schp:string,content:string, absolutePath?: string){\n\t//     if (universeHelpers.isRAML10Node(root)) {\n\t//         createGlobalSchemaFromNameAndContent10(root, name, schp, content, absolutePath);\n\t//     } else if (universeHelpers.isRAML08Node(root)) {\n\t//         createGlobalSchemaFromNameAndContent08(root, name, schp, content, absolutePath);\n\t//     }\n\t// }\n\tfunction createSchemaFile(content, schemaPath, absolutePath) {\n\t    var ed = getActiveEditor();\n\t    var sdir = absolutePath ? path.dirname(absolutePath) : path.resolve(path.dirname(ed.getPath()), path.dirname(schemaPath));\n\t    if (!fs.existsSync(sdir)) {\n\t        fs.mkdirSync(sdir);\n\t    }\n\t    var shFile = absolutePath ? absolutePath : path.resolve(path.dirname(ed.getPath()), schemaPath);\n\t    fs.writeFileSync(shFile, content);\n\t}\n\t// export function createGlobalSchemaFromNameAndContent10(root:hl.IHighLevelNode,name:string,\n\t//                                                        schemaPath:string,content:string, absolutePath?: string){\n\t//     var t:def.NodeClass=<def.NodeClass>root.definition().universe().type(universes.Universe10.TypeDeclaration.name);\n\t//     var sc=stubs.createStubNode(t,\n\t//         (<any>t.universe().type(universes.Universe10.Api.name)).property(universes.Universe10.Api.properties.types.name),\n\t//         \"\"+name);\n\t//\n\t//     sc.attrOrCreate(universes.Universe10.TypeDeclaration.properties.type.name).setValue(\"!include \"+schemaPath)\n\t//\n\t//     root.add(sc);\n\t//\n\t//     createSchemaFile(content, schemaPath, absolutePath);\n\t// }\n\t// export function createGlobalSchemaFromNameAndContent08(root:hl.IHighLevelNode,name:string,schp:string,content:string, absolutePath?: string){\n\t//     var t:def.NodeClass=<def.NodeClass>root.definition().universe().type(universes.Universe08.GlobalSchema.name);\n\t//     var sc=stubs.createStubNode(t,\n\t//         (<any>t.universe().type(universes.Universe08.Api.name)).property(universes.Universe08.Api.properties.schemas.name),\n\t//         \"\"+name);\n\t//\n\t//     sc.attrOrCreate(universes.Universe08.GlobalSchema.properties.value.name).setValue(\"!include \"+schp)\n\t//\n\t//     root.add(sc);\n\t//\n\t//     createSchemaFile(content, schp, absolutePath);\n\t// }\n\t// export function saveExample(r:hl.IHighLevelNode,schp:string,content:string){\n\t//     var ed=getActiveEditor();\n\t//     var sdir=path.resolve(path.dirname(ed.getPath()),path.dirname(schp));\n\t//     if (!fs.existsSync(sdir)){\n\t//         fs.mkdirSync(sdir);\n\t//     }\n\t//     var shFile=path.resolve(path.dirname(ed.getPath()),schp);\n\t//     fs.writeFileSync(shFile,content)\n\t// }\n\tvar NewProjectDialog = /** @class */ (function () {\n\t    function NewProjectDialog(title) {\n\t        if (title === void 0) { title = \"Create RAML Project\"; }\n\t        this.title = title;\n\t        this.apititle = \"New API\";\n\t        this.version = \"v1\";\n\t        this.baseUri = \"http://api.samplehost.com\";\n\t        this._raml1 = true;\n\t        this._defStructure = true;\n\t        this._createSampleResource = true;\n\t        this.sourceValue = path.resolve(this.generateDefaultProjectParentFolder(), \"newRamlProject\");\n\t    }\n\t    NewProjectDialog.prototype.generateDefaultProjectParentFolder = function () {\n\t        return UI.fdUtils.getHome();\n\t    };\n\t    NewProjectDialog.prototype.extraContent = function (s) {\n\t    };\n\t    NewProjectDialog.prototype.validateProjectLocation = function (value) {\n\t        var toValidate = value ? value.trim() : \"\";\n\t        if (!toValidate) {\n\t            return UI.errorStatus(\"Path should't be empty\");\n\t        }\n\t        var parentDirectory = path.dirname(toValidate);\n\t        if (!parentDirectory || parentDirectory == \".\")\n\t            return UI.errorStatus(\"Can not find path parent\");\n\t        if (!fs.existsSync(parentDirectory))\n\t            return UI.errorStatus(\"Parent directory does not exist\");\n\t        return UI.okStatus();\n\t    };\n\t    NewProjectDialog.prototype.validateTitle = function (value) {\n\t        var toValidate = value ? value.trim() : \"\";\n\t        if (!toValidate || toValidate.length < 1) {\n\t            return UI.errorStatus(\"Title field is required\");\n\t        }\n\t        return UI.okStatus();\n\t    };\n\t    NewProjectDialog.prototype.show = function () {\n\t        var _this = this;\n\t        var zz = null;\n\t        var section = UI.section(this.title, UI.Icon.BOOK, false, false, UI.h3(\"Please select location to place your project:\")).pad(10, 10);\n\t        var panel = new UI.Panel(UI.LayoutType.BLOCK);\n\t        var statusLabel = UI.label(\"\", null, UI.TextClasses.ERROR);\n\t        var slf = new UI.CustomField(\"\", statusLabel, function (x) { return x; });\n\t        slf.setDisplay(this.validateProjectLocation(this.sourceValue).code == UI.StatusCode.ERROR);\n\t        panel.addChild(slf);\n\t        var projectLocationInput = UI.texfField(\"\", this.sourceValue, function (x) { return _this.sourceValue = x.getBinding().get(); });\n\t        projectLocationInput.getBinding().addValidator(function () { return _this.validateProjectLocation(_this.sourceValue); });\n\t        projectLocationInput.setStyle(\"width\", \"400px\");\n\t        projectLocationInput.getBinding().addListener(function (value) {\n\t            //var st = projectLocationInput.getBinding().status()\n\t            var st = _this.validateProjectLocation(value);\n\t            if (st.code != UI.StatusCode.ERROR) {\n\t                //this.updateUI(q, x)\n\t                statusLabel.setText(\"\");\n\t                statusLabel.setIcon(UI.Icon.NONE);\n\t                slf.setDisplay(false);\n\t            }\n\t            else {\n\t                statusLabel.setText(st.message);\n\t                statusLabel.setIcon(UI.Icon.BUG);\n\t                slf.setDisplay(true);\n\t            }\n\t        });\n\t        panel.addChild(\n\t        //UI.hc(\n\t        projectLocationInput\n\t        //UI.buttonSimple(\"Browse\",\n\t        //    ()=>UI.fdUtils..openFolderDialog(\"Select project location\",\n\t        //            newLocation=> {\n\t        //                this.sourceValue=newLocation\n\t        //                projectLocationInput.getBinding().set(newLocation)\n\t        //                //var atomEditor = projectLocationInput.getActualField()\n\t        //                //var atomEditorUI = atomEditor.ui()\n\t        //                //var atomEditorUIModel = atomEditorUI.getModel();\n\t        //                //atomEditorUIModel.setText(newLocation)\n\t        //            },\n\t        //            true, this.sourceValue)\n\t        //).margin(10,0).setStyle(\"margin-bottom\", \"0.75em\")\n\t        //).setPercentWidth(100)\n\t        );\n\t        panel.addChild(UI.h3(\"Title of your API:\"));\n\t        var titleStatusLabel = UI.label(\"\", null, UI.TextClasses.ERROR);\n\t        var titleStatusMessage = new UI.CustomField(\"\", titleStatusLabel, function (x) { return x; });\n\t        titleStatusMessage.setDisplay(false);\n\t        panel.addChild(titleStatusMessage);\n\t        var titleTextField = UI.texfField(\"\", this.apititle, function (x) { return _this.apititle = x.getBinding().get(); });\n\t        titleTextField.getBinding().addValidator(function () { return _this.validateTitle(_this.apititle); });\n\t        titleTextField.getBinding().addListener(function (value) {\n\t            var status = _this.validateTitle(value);\n\t            if (status.code !== UI.StatusCode.ERROR) {\n\t                titleStatusLabel.setText(\"\");\n\t                titleStatusLabel.setIcon(UI.Icon.NONE);\n\t                titleStatusMessage.setDisplay(false);\n\t            }\n\t            else {\n\t                titleStatusLabel.setText(status.message);\n\t                titleStatusLabel.setIcon(UI.Icon.BUG);\n\t                titleStatusMessage.setDisplay(true);\n\t            }\n\t        });\n\t        panel.addChild(titleTextField);\n\t        panel.addChild(UI.h3(\"Version of your API\"));\n\t        panel.addChild(UI.texfField(\"\", this.version, function (x) { return _this.version = x.getBinding().get(); }));\n\t        panel.addChild(UI.h3(\"Base URI of your API\"));\n\t        panel.addChild(UI.texfField(\"\", this.baseUri, function (x) { return _this.baseUri = x.getBinding().get(); }));\n\t        section.addChild(panel);\n\t        var r1 = UI.checkBox(\"Use RAML 1.0\");\n\t        r1.setValue(this._raml1);\n\t        r1.getBinding().addListener(function (x) { return _this._raml1 = r1.getValue(); });\n\t        section.addChild(r1);\n\t        var r2 = UI.checkBox(\"Create default directory structure\");\n\t        r2.setValue(this._defStructure);\n\t        r2.getBinding().addListener(function (x) { return _this._defStructure = r2.getValue(); });\n\t        section.addChild(r2);\n\t        var r3 = UI.checkBox(\"Create sample resource and method\");\n\t        r3.setValue(this._createSampleResource);\n\t        r3.getBinding().addListener(function (x) { return _this._createSampleResource = r3.getValue(); });\n\t        section.addChild(r3);\n\t        var buttonBar = UI.hc().setPercentWidth(100).setStyle(\"display\", \"flex\");\n\t        buttonBar.addChild(UI.label(\"\", null, null, null).setStyle(\"flex\", \"1\"));\n\t        buttonBar.addChild(UI.button(\"Cancel\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.NO_HIGHLIGHT, UI.Icon.NONE, function (x) { zz.destroy(); }).margin(10, 10));\n\t        buttonBar.addChild(UI.button(\"Create\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.SUCCESS, UI.Icon.NONE, function (x) {\n\t            if (_this.validateTitle(_this.apititle).code === UI.StatusCode.ERROR) {\n\t                return;\n\t            }\n\t            if (_this.validateProjectLocation(_this.sourceValue).code === UI.StatusCode.ERROR) {\n\t                return;\n\t            }\n\t            _this.onOk(zz);\n\t            zz.destroy();\n\t        }));\n\t        section.addChild(buttonBar);\n\t        zz = atom.workspace.addModalPanel({ item: section.renderUI() });\n\t    };\n\t    NewProjectDialog.prototype.createIfNotExist = function (p) {\n\t        var ps = path.resolve(this.sourceValue, p);\n\t        if (!fs.existsSync(ps)) {\n\t            fs.mkdirSync(ps);\n\t        }\n\t    };\n\t    NewProjectDialog.prototype.onOk = function (zz) {\n\t        if (!fs.existsSync(this.sourceValue)) {\n\t            fs.mkdirSync(this.sourceValue);\n\t        }\n\t        if (this._defStructure) {\n\t            this.createIfNotExist(\"schemas\");\n\t            this.createIfNotExist(\"examples\");\n\t            this.createIfNotExist(\"traits\");\n\t            this.createIfNotExist(\"resourceTypes\");\n\t            this.createIfNotExist(\"securitySchemes\");\n\t            this.createIfNotExist(\"documentation\");\n\t            if (this._raml1) {\n\t                this.createIfNotExist(\"notebooks\");\n\t                this.createIfNotExist(\"scripts\");\n\t            }\n\t        }\n\t        var content = createRAMLFile(this.apititle, this.version, this.baseUri, this._createSampleResource, this._raml1);\n\t        var ps = path.resolve(this.sourceValue, \"api.raml\");\n\t        fs.writeFileSync(ps, content);\n\t        atom.open({ pathsToOpen: [this.sourceValue, ps] });\n\t    };\n\t    return NewProjectDialog;\n\t}());\n\tfunction createRAMLFile(title, version, baseUri, sample, raml1) {\n\t    if (sample === void 0) { sample = true; }\n\t    if (raml1 === void 0) { raml1 = true; }\n\t    var apiLines = [(raml1 ? \"#%RAML 1.0\" : \"#%RAML 0.8\"), \"title: \" + title];\n\t    if (version)\n\t        apiLines.push(\"version: \" + version);\n\t    if (baseUri)\n\t        apiLines.push(\"baseUri: \" + baseUri);\n\t    var typesLines = [\n\t        'types:',\n\t        '  TestType:',\n\t        '    type: object',\n\t        '    properties:',\n\t        '      id: number',\n\t        '      optional?: string',\n\t        '      expanded:',\n\t        '        type: object',\n\t        '        properties:',\n\t        '          count: number'\n\t    ], resourceLines = [\n\t        '/helloWorld:',\n\t        '  get:',\n\t        '    responses:',\n\t        '      200:',\n\t        '        body:',\n\t        '          application/json:',\n\t        '            example: |',\n\t        '              {',\n\t        '                \"message\" : \"Hello World\"',\n\t        '              }'\n\t    ];\n\t    var result = apiLines;\n\t    if (sample) {\n\t        if (raml1)\n\t            result = result.concat(typesLines);\n\t        result = result.concat(resourceLines);\n\t    }\n\t    return result.join('\\n') + '\\n';\n\t}\n\texports.createRAMLFile = createRAMLFile;\n\tfunction newProject() {\n\t    new NewProjectDialog().show();\n\t}\n\texports.newProject = newProject;\n\t// export function moveResource(h:hl.IHighLevelNode){\n\t//     new move.MoveElementsDialog(h, \"Resource Type\",true).show()\n\t// }\n\tfunction splitOnLines(text) {\n\t    var lines = text.match(/^.*((\\r\\n|\\n|\\r)|$)/gm);\n\t    return lines;\n\t}\n\texports.splitOnLines = splitOnLines;\n\tfunction cleanEmptyLines(text) {\n\t    var lines = splitOnLines(text);\n\t    var rs = [];\n\t    for (var i = 0; i < lines.length; i++) {\n\t        if (lines[i].trim().length > 0) {\n\t            rs.push(lines[i]);\n\t        }\n\t    }\n\t    return rs.join(\"\");\n\t}\n\texports.cleanEmptyLines = cleanEmptyLines;\n\t//FIXME remove it from here duplication with jsyaml2lowLevel.ts\n\tfunction stripIndent(text, indent) {\n\t    var lines = splitOnLines(text);\n\t    var rs = [];\n\t    for (var i = 0; i < lines.length; i++) {\n\t        if (i == 0) {\n\t            rs.push(lines[0]);\n\t        }\n\t        else {\n\t            rs.push(lines[i].substring(indent.length));\n\t        }\n\t    }\n\t    return rs.join(\"\");\n\t}\n\t// var leadingIndent = function (node:lowLevel.ILowLevelASTNode, text:string) {\n\t//     var leading = \"\";\n\t//     var pos = node.start() - 1;\n\t//     while (pos > 0) {\n\t//         var ch = text[pos];\n\t//         if (ch == '\\r' || ch == '\\n') break;\n\t//         leading = ch + leading;\n\t//         pos--;\n\t//     }\n\t//     return leading;\n\t// };\n\tfunction indent(line) {\n\t    var rs = \"\";\n\t    for (var i = 0; i < line.length; i++) {\n\t        var c = line[i];\n\t        if (c == '\\r' || c == '\\n') {\n\t            continue;\n\t        }\n\t        if (c == ' ' || c == '\\t') {\n\t            rs += c;\n\t            continue;\n\t        }\n\t        break;\n\t    }\n\t    return rs;\n\t}\n\tfunction getActiveEditor() {\n\t    var activeEditor = atom.workspace.getActiveTextEditor();\n\t    if (activeEditor) {\n\t        return activeEditor;\n\t    }\n\t    if (editorTools.aquireManager())\n\t        return editorTools.aquireManager().getCurrentEditor();\n\t    return null;\n\t}\n\texports.getActiveEditor = getActiveEditor;\n\t/**\n\t * Sets active editor cursor at the position (starting from 0).\n\t * @param position\n\t */\n\tfunction gotoPosition(position) {\n\t    var activeEditor = getActiveEditor();\n\t    if (!activeEditor) {\n\t        return;\n\t    }\n\t    var bufferPos = activeEditor.getBuffer().positionForCharacterIndex(position);\n\t    activeEditor.setSelectedBufferRange({ start: bufferPos, end: bufferPos }, {});\n\t}\n\texports.gotoPosition = gotoPosition;\n\tfunction gotoDeclaration() {\n\t    var editor = getActiveEditor();\n\t    if (!editor)\n\t        return;\n\t    var position = editor.getCursorBufferPosition();\n\t    var offset = editor.getBuffer().characterIndexForPosition(position);\n\t    var path = editor.getPath();\n\t    ramlServer.getNodeClientConnection().openDeclaration(path, offset).then(function (locations) {\n\t        if (!locations || locations.length == 0)\n\t            return;\n\t        atom.workspace.open(locations[0].uri, {}).then(function (x) {\n\t            var activeEditor = getActiveEditor();\n\t            var p1 = activeEditor.getBuffer().positionForCharacterIndex(locations[0].range.start);\n\t            var p2 = activeEditor.getBuffer().positionForCharacterIndex(locations[0].range.end);\n\t            activeEditor.setSelectedBufferRange({ start: p1, end: p2 }, {});\n\t        });\n\t    });\n\t}\n\texports.gotoDeclaration = gotoDeclaration;\n\t// export class MoveToNewFileDialog{\n\t//\n\t//     constructor(private node:hl.IHighLevelNode){\n\t//\n\t//     }\n\t//     destination:string;\n\t//\n\t//     show(){\n\t//         var zz:any=null;\n\t//         var node=this.node;\n\t//         var vc=UI.section(\"Move node content to new file \",UI.Icon.GIST_NEW,false,false);\n\t//         var errorLabel=UI.label(\"please enter correct destination path\",UI.Icon.BUG,UI.TextClasses.ERROR,UI.HighLightClasses.NONE);\n\t//         vc.addChild(UI.vc(errorLabel));\n\t//         vc.addChild(UI.label(\"Please enter destination path\"));\n\t//         var txt=UI.texfField(\"\",\"\",x=>{\n\t//             if (!txt){\n\t//                 return;\n\t//             }\n\t//             this.destination=txt.getBinding().get();\n\t//             var isError=this.destination.trim().length==0\n\t//             if (!isError) {\n\t//                 if (path.extname(this.destination) != '.raml') {\n\t//                     isError = true;\n\t//                 }\n\t//             }\n\t//             if (!isError) {\n\t//                 var dir = path.resolve(path.dirname(getActiveEditor().getPath()), path.dirname(this.destination));\n\t//                 if (!fs.existsSync(dir)) {\n\t//                     isError = true;\n\t//                 }\n\t//                 else{\n\t//                     var st=fs.statSync(dir)\n\t//                     if (!st.isDirectory()){\n\t//                         isError=true;\n\t//                     }\n\t//                 }\n\t//             }\n\t//\n\t//             errorLabel.setDisplay(isError);\n\t//             okButton.setDisabled(isError);\n\t//         });\n\t//         vc.addChild(UI.vc(txt));\n\t//         var buttonBar=UI.hc().setPercentWidth(100).setStyle(\"display\",\"flex\");\n\t//         buttonBar.addChild(UI.label(\"\",null,null,null).setStyle(\"flex\",\"1\"))\n\t//         buttonBar.addChild(UI.button(\"Cancel\",UI.ButtonSizes.NORMAL,UI.ButtonHighlights.NO_HIGHLIGHT,UI.Icon.NONE,x=>{zz.destroy()}).margin(10,10))\n\t//         var okButton=UI.button(\"Move\",UI.ButtonSizes.NORMAL,UI.ButtonHighlights.SUCCESS,UI.Icon.NONE,x=>{\n\t//             var d=path.resolve(path.dirname(getActiveEditor().getPath()), this.destination);\n\t//             var dump=this.node.lowLevel().dump();\n\t//             var ci=splitOnLines(dump);\n\t//             var li=ci.length>1?indent(ci[1]):indent(ci[0]);\n\t//             dump=dump.substring(this.node.lowLevel().keyEnd()-this.node.lowLevel().start()+1).trim();\n\t//             dump=stripIndent(dump,li);\n\t//             dump=\"#%RAML 0.8 \"+this.node.definition().nameId()+\"\\n\"+dump;\n\t//             fs.writeFileSync(d,dump);\n\t//             //no we need to replace content of the node with text;\n\t//\n\t//             var txt=node.lowLevel().unit().contents();\n\t//             var endPart=txt.substring(node.lowLevel().end());\n\t//             var startPart=txt.substring(0,node.lowLevel().keyEnd()+1);\n\t//             var vl=startPart+\" !include \"+this.destination+endPart;\n\t//             getActiveEditor().setText(vl);\n\t//             zz.destroy();\n\t//         });\n\t//         okButton.setDisabled(true)\n\t//         buttonBar.addChild(okButton);\n\t//         vc.addChild(buttonBar)\n\t//         var html=vc.renderUI();\n\t//         zz=(<any>atom).workspace.addModalPanel( { item: html});\n\t//         html.focus();\n\t//     }\n\t//\n\t//\n\t// }\n\t// export function moveOut(h:hl.IHighLevelNode){\n\t//     new MoveToNewFileDialog(h).show()\n\t// }\n\tfunction revalidate() {\n\t    var currentEditor = getActiveEditor();\n\t    if (!currentEditor)\n\t        return;\n\t    linterUI.relint(currentEditor);\n\t}\n\texports.revalidate = revalidate;\n\t/**\n\t * Gets opened editor for specified path or uri.\n\t * Currently only returns active editor if applicable, in future may also return other opened editors.\n\t * @param path\n\t * @returns {any}\n\t */\n\tfunction getEditorByUriOrPath(path) {\n\t    //TODO consider also returning other opened editors\n\t    var activeEditor = getActiveEditor();\n\t    if (activeEditor.getPath() == path)\n\t        return activeEditor;\n\t    return null;\n\t}\n\texports.getEditorByUriOrPath = getEditorByUriOrPath;\n\t/**\n\t * Applies a set of changed documents to current documents and files\n\t * @param changedDocuments\n\t */\n\tfunction applyChangedDocuments(changedDocuments) {\n\t    for (var _i = 0, changedDocuments_1 = changedDocuments; _i < changedDocuments_1.length; _i++) {\n\t        var changedDocument = changedDocuments_1[_i];\n\t        var editor = getEditorByUriOrPath(changedDocument.uri);\n\t        var oldContents = null;\n\t        if (editor) {\n\t            oldContents = editor.getText();\n\t        }\n\t        else {\n\t            oldContents = fs.readFileSync(changedDocument.uri).toString();\n\t        }\n\t        var newText = null;\n\t        if (changedDocument.text) {\n\t            newText = changedDocument.text;\n\t        }\n\t        else if (changedDocument.textEdits) {\n\t            newText = textEditProcessor.applyDocumentEdits(oldContents, changedDocument.textEdits);\n\t        }\n\t        else {\n\t            continue;\n\t        }\n\t        if (editor) {\n\t            editor.getBuffer().setText(newText);\n\t        }\n\t        else {\n\t            fs.writeFileSync(changedDocument.uri, newText);\n\t        }\n\t    }\n\t}\n\texports.applyChangedDocuments = applyChangedDocuments;\n\t/**\n\t * Tries to detect the name/symbol at position.\n\t * In practise it is impossible to do properly in all cases unless having AST at hands\n\t * or making the server to do this, but MS LSP does not have an interface for this.\n\t *\n\t * @param contents\n\t * @param offset\n\t */\n\tfunction findCurrentName(contents, offset) {\n\t    //we cant use alpha-numeric detection due to potential non-english alphabets.\n\t    //so we have to defined some stop characters and expand the list when a bug case is detected\n\t    var stopCharacters = [\n\t        \"\\r\", \"\\n\", \"[\", \"]\", \":\", \".\", \",\", \" \", \"\\t\", \"{\", \"}\", \"'\", \"'\", \"\\\"\"\n\t    ];\n\t    var beginning = 0;\n\t    for (var currentOffset = offset - 1; currentOffset >= 0; currentOffset--) {\n\t        var currentChar = contents.charAt(currentOffset);\n\t        var found = false;\n\t        for (var _i = 0, stopCharacters_1 = stopCharacters; _i < stopCharacters_1.length; _i++) {\n\t            var stopChar = stopCharacters_1[_i];\n\t            if (currentChar == stopChar) {\n\t                beginning = currentOffset + 1;\n\t                found = true;\n\t                break;\n\t            }\n\t        }\n\t        if (found)\n\t            break;\n\t    }\n\t    var end = contents.length;\n\t    for (var currentOffset = offset; currentOffset < contents.length; currentOffset++) {\n\t        var currentChar = contents.charAt(currentOffset);\n\t        var found = false;\n\t        for (var _a = 0, stopCharacters_2 = stopCharacters; _a < stopCharacters_2.length; _a++) {\n\t            var stopChar = stopCharacters_2[_a];\n\t            if (currentChar == stopChar) {\n\t                end = currentOffset;\n\t                found = true;\n\t                break;\n\t            }\n\t        }\n\t        if (found)\n\t            break;\n\t    }\n\t    return contents.substring(beginning, end);\n\t}\n\t/**\n\t * Activates renaming for current active editor and cursor position\n\t */\n\tfunction renameRAMLElement() {\n\t    var editor = getActiveEditor();\n\t    if (!editor)\n\t        return;\n\t    if (path.extname(editor.getPath()) != '.raml')\n\t        return;\n\t    var position = editor.getCursorBufferPosition();\n\t    var offset = editor.getBuffer().characterIndexForPosition(position);\n\t    var editorPath = editor.getPath();\n\t    var currentName = findCurrentName(editor.getText(), offset);\n\t    // UI.prompt(\"Enter new name for: \", newName=> {\n\t    //     ramlServer.getNodeClientConnection().\n\t    //         rename(editorPath, offset, newName).then(changedDocuments=>{\n\t    //\n\t    //         applyChangedDocuments(changedDocuments);\n\t    //     })\n\t    // }, currentName)\n\t}\n\texports.renameRAMLElement = renameRAMLElement;\n\tvar getKeyValue = function (offset, txt) {\n\t    var m = offset;\n\t    for (var i = offset; i >= 0; i--) {\n\t        var c = txt.charAt(i);\n\t        if (c == ' ' || c == '\\r' || c == '\\n' || c == '\\t') {\n\t            m = i + 1;\n\t            break;\n\t        }\n\t    }\n\t    var res = \"\";\n\t    for (var i = m; m < txt.length; i++) {\n\t        var c = txt.charAt(i);\n\t        if (c == ' ' || c == '\\r' || c == '\\n' || c == '\\t' || c == ':') {\n\t            break;\n\t        }\n\t        res += c;\n\t    }\n\t    return res;\n\t};\n\t// export function select(){\n\t//     var ed=getActiveEditor();\n\t//     var request={editor:ed,bufferPosition:ed.getCursorBufferPosition()};\n\t//     var node=provider.getAstNode(request,false);\n\t//     if (!node){\n\t//         return;\n\t//     }\n\t//     var start=ed.getBuffer().positionForCharacterIndex(node.lowLevel().start());\n\t//     var end=ed.getBuffer().positionForCharacterIndex(node.lowLevel().end());\n\t//     ed.setSelectedBufferRange({start:start,end:end},{});\n\t// }\n\t//export function expandSignature(attr:hl.IAttribute){\n\t//    var tr=signature.convertToTrait(signature.parse(attr));\n\t//    //console.log('trait:\\n' + tr.highLevel().lowLevel().dump());\n\t//    var res = attr.parent();\n\t//    //pr.remove(attr); // incorrect usage!!! remove attributes as below\n\t//    attr.remove();\n\t//    tr.highLevel().elements().forEach(x=>{\n\t//        res.add(<any>x)\n\t//    });\n\t//    var ed=getActiveEditor();\n\t//    ed.setText(attr.root().lowLevel().unit().contents());\n\t//}\n\tfunction findUsagesImpl(renderer) {\n\t    if (renderer === void 0) { renderer = display; }\n\t    var editor = getActiveEditor();\n\t    var position = editor.getCursorBufferPosition();\n\t    var offset = editor.getBuffer().characterIndexForPosition(position);\n\t    var path = editor.getPath();\n\t    ramlServer.getNodeClientConnection().findReferences(path, offset).then(function (locations) {\n\t        if (!locations)\n\t            return;\n\t        renderer(locations);\n\t    });\n\t}\n\texports.findUsagesImpl = findUsagesImpl;\n\tfunction display(n) {\n\t    if (sv) {\n\t        sv.setInput(n);\n\t    }\n\t    else {\n\t        sv = new SearchResultView(n);\n\t        sv.panel = atom.workspace.addBottomPanel({ item: sv });\n\t    }\n\t}\n\tfunction findUsages() {\n\t    findUsagesImpl(display);\n\t}\n\texports.findUsages = findUsages;\n\tvar SearchResultView = /** @class */ (function (_super) {\n\t    __extends(SearchResultView, _super);\n\t    function SearchResultView(_result) {\n\t        var _this = _super.call(this) || this;\n\t        _this._result = _result;\n\t        _this.isAttached = false;\n\t        return _this;\n\t    }\n\t    SearchResultView.prototype.initialize = function () {\n\t        _super.prototype.initialize.apply(this, arguments);\n\t        return true;\n\t    };\n\t    SearchResultView.content = function () {\n\t        return this.div({ class: 'raml-console pane-item', tabindex: -1 });\n\t    };\n\t    SearchResultView.prototype.attached = function () {\n\t        if (this.isAttached) {\n\t            return;\n\t        }\n\t        this.load();\n\t        this.isAttached = true;\n\t    };\n\t    SearchResultView.prototype.setInput = function (_result) {\n\t        this._result = _result;\n\t        this.load();\n\t    };\n\t    SearchResultView.prototype.load = function () {\n\t        var _this = this;\n\t        var section = UI.section(\"References\", UI.Icon.SEARCH);\n\t        var view = UI.list(this._result, function (location) {\n\t            var p1 = getActiveEditor().getBuffer().positionForCharacterIndex(location.range.start);\n\t            var res = UI.hc(UI.a(location.uri, function (y) {\n\t                atom.workspace.open(location.uri, {}).then(function (x) {\n\t                    var activeEditor = getActiveEditor();\n\t                    var p1 = activeEditor.getBuffer().positionForCharacterIndex(location.range.start);\n\t                    var p2 = activeEditor.getBuffer().positionForCharacterIndex(location.range.end);\n\t                    activeEditor.setSelectedBufferRange({ start: p1, end: p2 }, {});\n\t                });\n\t            }), UI.label(\" line:\", UI.Icon.NONE, UI.TextClasses.SUBTLE).pad(5, 5), UI.label(\"\" + p1.row, UI.Icon.NONE, UI.TextClasses.SUCCESS));\n\t            return res;\n\t        });\n\t        view.setStyle(\"max-height\", \"400px\");\n\t        section.addChild(view);\n\t        section.addChild(UI.button(\"Close\", UI.ButtonSizes.SMALL, UI.ButtonHighlights.PRIMARY, UI.Icon.NONE, function (x) { _this.panel.destroy(); sv = null; }));\n\t        this.html(section.renderUI());\n\t    };\n\t    return SearchResultView;\n\t}(SpacePenViews.ScrollView));\n\tvar sv;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"fs\");\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar fs = __webpack_require__(12);\n\t// import parser = require(\"raml-1-parser\");\n\t// import parserUtils = parser.utils;\n\tvar unitUtils = __webpack_require__(14);\n\tvar TextBuffer = __webpack_require__(15);\n\tvar editorManager = __webpack_require__(16);\n\tvar ramlServer = __webpack_require__(17);\n\tvar grammarDetect = __webpack_require__(18);\n\texports.grammarScopes = ['source.raml', 'source.syaml', 'source.sjson'];\n\texports.scope = 'file';\n\texports.lintOnFly = true;\n\tvar api_language_server_1 = __webpack_require__(17);\n\tfunction relint(editor) {\n\t    Promise.resolve(\"\").then(editorManager.toggleEditorTools);\n\t    editor.getBuffer().emitter.emit(\"did-change\", {\n\t        oldText: editor.getBuffer().getText(),\n\t        newText: editor.getBuffer().getText()\n\t    });\n\t}\n\texports.relint = relint;\n\tfunction initEditorObservers(linter) {\n\t    atom.workspace.observeTextEditors(function (editor) { return relint(editor); });\n\t    return {\n\t        dispose: function () {\n\t        }\n\t    };\n\t}\n\texports.initEditorObservers = initEditorObservers;\n\tfunction destroyLinter(linterApi, linter) {\n\t    linterApi.deleteMessages(linter);\n\t    linterApi.deleteLinter(linter);\n\t}\n\tfunction isRAMLUnit(editor) {\n\t    var contents = editor.getBuffer().getText();\n\t    return unitUtils.isRAMLUnit(contents);\n\t}\n\tfunction isAppropriateGrammar(editor) {\n\t    if (isRAMLUnit(editor) || grammarDetect.isSwaggerJson(editor) || grammarDetect.isSwaggerYaml(editor)) {\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\tvar combErrors = function (result) {\n\t    var map = {};\n\t    result.forEach(function (x) {\n\t        var original = JSON.parse(JSON.stringify(x));\n\t        original.trace = null;\n\t        var newKey = JSON.stringify(original);\n\t        var tr = map[newKey];\n\t        if (tr) {\n\t            tr.push(x);\n\t        }\n\t        else {\n\t            map[newKey] = [x];\n\t        }\n\t    });\n\t    var rs = [];\n\t    for (var i in map) {\n\t        var mes = JSON.parse(i);\n\t        mes.trace = [];\n\t        var ms = map[i];\n\t        ms.forEach(function (x) {\n\t            if (x.trace) {\n\t                mes.trace = mes.trace.concat(x.trace);\n\t            }\n\t        });\n\t        mes.trace = combErrors(mes.trace);\n\t        rs.push(mes);\n\t    }\n\t    return rs;\n\t};\n\tfunction tabWarnings(textEditor) {\n\t    var result = [];\n\t    var text = textEditor.getBuffer().getText();\n\t    var tab = 0;\n\t    while (true) {\n\t        var tab = text.indexOf('\\t', tab);\n\t        if (tab != -1) {\n\t            var p1 = textEditor.getBuffer().positionForCharacterIndex(tab);\n\t            var p2 = textEditor.getBuffer().positionForCharacterIndex(tab + 1);\n\t            var message = {\n\t                type: (\"Warning\"),\n\t                filePath: textEditor.getPath(),\n\t                text: \"Using tabs  can lead to unpredictable results\",\n\t                trace: [],\n\t                range: [[p1.row, p1.column], [p2.row, p2.column]]\n\t            };\n\t            result.push(message);\n\t            tab++;\n\t        }\n\t        else {\n\t            break;\n\t        }\n\t    }\n\t    return result;\n\t}\n\tfunction postPocessError(editor, error, buffers) {\n\t    var editorPath = editor.getPath();\n\t    if (!buffers[editorPath]) {\n\t        buffers[editorPath] = editor.getBuffer();\n\t    }\n\t    return Promise.resolve(error).then(function (error) {\n\t        if (!error.filePath) {\n\t            error.filePath = editorPath;\n\t        }\n\t        var buffer = buffers[error.filePath];\n\t        if (!buffer) {\n\t            return new Promise(function (resolve, reject) {\n\t                fs.readFile(error.filePath, function (err, data) {\n\t                    if (err) {\n\t                        reject(err);\n\t                    }\n\t                    else {\n\t                        buffer = new TextBuffer(data.toString());\n\t                        buffers[error.filePath] = buffer;\n\t                        resolve(buffer);\n\t                    }\n\t                });\n\t            });\n\t        }\n\t        return buffer;\n\t    }).then(function (buffer) {\n\t        clientConnection.debugDetail(\"Converting an error with range: [\" + error.range.start + \" , \" + error.range.end + \"]\", \"Linter-ui\", \"postPocessError\");\n\t        if (error.range.start != null && error.range.end != null) {\n\t            clientConnection.debugDetail(\"Converting an error with range as array: [\" + error.range[0] + \" , \" + error.range[1] + \"]\", \"Linter-ui\", \"postPocessError\");\n\t            var p1 = buffer.positionForCharacterIndex(error.range.start);\n\t            var p2 = buffer.positionForCharacterIndex(error.range.end);\n\t            clientConnection.debugDetail(\"Result error range: [\" + p1.row + \" , \" + p1.column + \"] ; [\" + p2.row + \" , \" + p2.column + \"]\", \"Linter-ui\", \"postPocessError\");\n\t            error.range = [[p1.row, p1.column], [p2.row, p2.column]];\n\t        }\n\t        var traceErrors = error.trace || [];\n\t        var tracePromises = traceErrors.map(function (traceError) { return postPocessError(editor, traceError, buffers); });\n\t        return Promise.all(tracePromises).then(function (trace) {\n\t            error.trace = trace;\n\t            return error;\n\t        });\n\t    });\n\t}\n\tfunction getEditorId(textEditor) {\n\t    return textEditor.id;\n\t}\n\tvar ValidationReportExpected = /** @class */ (function () {\n\t    function ValidationReportExpected() {\n\t    }\n\t    return ValidationReportExpected;\n\t}());\n\tvar clientConnection = api_language_server_1.getNodeClientConnection();\n\tvar expectedValidationReports = [];\n\tfunction findAndRemoveExpectedReports(uri, versionLimit) {\n\t    var result = [];\n\t    expectedValidationReports = expectedValidationReports.filter(function (reportExpected) {\n\t        if (reportExpected.uri == uri\n\t            && (versionLimit == null || reportExpected.expectedVersion == null ||\n\t                versionLimit >= reportExpected.expectedVersion)) {\n\t            result.push(reportExpected);\n\t            return false;\n\t        }\n\t        return true;\n\t    });\n\t    return result;\n\t}\n\tvar latestRecievedReport = null;\n\tclientConnection.onValidationReport(function (report) {\n\t    clientConnection.debugDetail(\"Got debug report for uri \" + report.pointOfViewUri +\n\t        \" and version \" + report.version, \"linter-ui\", \"onValidationReport\");\n\t    var expectedReports = findAndRemoveExpectedReports(report.pointOfViewUri, report.version);\n\t    clientConnection.debugDetail(\"Found expected reports: \" + expectedReports.length, \"linter-ui\", \"onValidationReport\");\n\t    for (var _i = 0, expectedReports_1 = expectedReports; _i < expectedReports_1.length; _i++) {\n\t        var expectedReport = expectedReports_1[_i];\n\t        expectedReport.resolve(report.issues);\n\t    }\n\t    latestRecievedReport = report;\n\t});\n\tfunction runValidationSheduleUpdater(textEditor, resolve, reject) {\n\t    var uri = textEditor.getPath();\n\t    //in any way, lets report current state, it should not hurt.\n\t    clientConnection.documentChanged({\n\t        uri: uri,\n\t        text: textEditor.getBuffer().getText()\n\t    });\n\t    clientConnection.getLatestVersion(uri).then(function (version) {\n\t        clientConnection.debugDetail(\"Scheduling validation for uri \" + uri + \" and version \" +\n\t            version, \"linter-ui\", \"runValidationSheduleUpdater\");\n\t        if (latestRecievedReport && latestRecievedReport.version &&\n\t            latestRecievedReport.version >= version) {\n\t            //we already know validation report for this version\n\t            clientConnection.debugDetail(\"Previous report found v \" +\n\t                latestRecievedReport.version + \" resolving, issues \" +\n\t                (latestRecievedReport.issues ? latestRecievedReport.issues.length : 0), \"linter-ui\", \"runValidationSheduleUpdater\");\n\t            resolve(latestRecievedReport.issues);\n\t        }\n\t        else {\n\t            //lets wait until the server provides a report for this or later version\n\t            expectedValidationReports.push({\n\t                uri: uri,\n\t                expectedVersion: version,\n\t                resolve: resolve,\n\t                reject: reject\n\t            });\n\t            clientConnection.debugDetail(\"Pushing the expected report to the list for version \" +\n\t                version, \"linter-ui\", \"runValidationSheduleUpdater\");\n\t        }\n\t    });\n\t}\n\tfunction lint(textEditor) {\n\t    if (!isAppropriateGrammar(textEditor)) {\n\t        return Promise.resolve([]);\n\t    }\n\t    Promise.resolve(\"\").then(editorManager.toggleEditorTools);\n\t    var promise = new Promise(function (resolve, reject) {\n\t        runValidationSheduleUpdater(textEditor, resolve, reject);\n\t    }).then(function (errors) {\n\t        clientConnection.debugDetail(\"Update report handled in with issues \" +\n\t            (errors ? errors.length : 0), \"linter-ui\", \"lint\");\n\t        var buffers = {};\n\t        var promises = errors.map(function (error) { return postPocessError(textEditor, error, buffers); });\n\t        var tabs = tabWarnings(textEditor);\n\t        promises = promises.concat(tabs);\n\t        return Promise.all(promises).then(function (errors) {\n\t            var result = combErrors(errors);\n\t            var warnings = 0;\n\t            return result.filter(function (error) { return error ? true : false; }).filter(function (error) {\n\t                return error.type === 'Warning' && warnings++ >= 20 ? false : true;\n\t            });\n\t        });\n\t    });\n\t    clientConnection.debugDetail(\"Before returning from lint\", \"linter-ui\", \"lint\");\n\t    return promise;\n\t}\n\texports.lint = lint;\n\tfunction addListenersToEditor(editor) {\n\t    var currentBuffer = editor.getBuffer();\n\t    currentBuffer.onDidChange(function (x) {\n\t        try {\n\t            ramlServer.getNodeClientConnection().debug(\"Change detected\", \"linter-ui\", \"addListenersToEditor\");\n\t            ramlServer.getNodeClientConnection().documentChanged({\n\t                uri: currentBuffer.getPath(),\n\t                text: currentBuffer.getText()\n\t            });\n\t        }\n\t        catch (e) {\n\t            console.log(e);\n\t        }\n\t    });\n\t}\n\tfunction addListenersToWorkspace() {\n\t    atom.workspace.onDidChangeActivePaneItem(function (e) {\n\t        var editor = atom.workspace.getActiveTextEditor();\n\t        if (editor) {\n\t            addListenersToEditor(editor);\n\t        }\n\t    });\n\t}\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t/**\n\t * Returns whether the current text matches RAML unit.\n\t * @param contents\n\t * @returns {RegExpMatchArray}\n\t */\n\tfunction isRAMLUnit(contents) {\n\t    return contents.match(/^(\\s*#%RAML\\s+(\\d\\.\\d)\\s*(\\w*)\\s*)|(swagger.*)$/m);\n\t}\n\texports.isRAMLUnit = isRAMLUnit;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL3V0aWwvdW5pdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0dBSUc7QUFDSCxvQkFBMkIsUUFBZ0I7SUFDdkMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztBQUM5RSxDQUFDO0FBRkQsZ0NBRUMiLCJmaWxlIjoic3JjL2F0b20vdXRpbC91bml0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgdGV4dCBtYXRjaGVzIFJBTUwgdW5pdC5cbiAqIEBwYXJhbSBjb250ZW50c1xuICogQHJldHVybnMge1JlZ0V4cE1hdGNoQXJyYXl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1JBTUxVbml0KGNvbnRlbnRzOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gY29udGVudHMubWF0Y2goL14oXFxzKiMlUkFNTFxccysoXFxkXFwuXFxkKVxccyooXFx3KilcXHMqKXwoc3dhZ2dlci4qKSQvbSk7XG59Il19\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"basarat-text-buffer\");\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/**\n\t * Created by kor on 24/07/15.\n\t */\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t// import fs = require ('fs')\n\t// import path = require ('path')\n\tvar editorTools = __webpack_require__(1);\n\t// import rp=require(\"raml-1-parser\")\n\t// import project=rp.project;\n\t// export function ast(editor:AtomCore.IEditor):rp.IHighLevelNode{\n\t//     var man=editorTools.aquireManager();\n\t//     if (editorTools.aquireManager()){\n\t//         if (man.getCurrentEditor()==editor){\n\t//             return man.ast;\n\t//         }\n\t//     }\n\t//     var p=editor.getPath();\n\t//     var prj=project.createProject(path.dirname(p));\n\t//     var unit=prj.unit(path.basename(p));\n\t//     var text=editor.getBuffer().getText();\n\t//     if (!unit){\n\t//         return null;\n\t//     }\n\t//     unit.updateContent(text);\n\t//     var ast=<rp.IHighLevelNode>unit.highLevel();\n\t//     return ast;\n\t// }\n\tfunction toggleEditorTools() {\n\t    var man = editorTools.aquireManager();\n\t    if (man) {\n\t        man.getCurrentEditor();\n\t    }\n\t}\n\texports.toggleEditorTools = toggleEditorTools;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvcmUvZWRpdG9yTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7QUFDSCxtREFBbUQ7O0FBRW5ELDZCQUE2QjtBQUM3QixpQ0FBaUM7QUFDakMsMERBQTBEO0FBQzFELHFDQUFxQztBQUNyQyw2QkFBNkI7QUFFN0Isa0VBQWtFO0FBQ2xFLDJDQUEyQztBQUMzQyx3Q0FBd0M7QUFDeEMsK0NBQStDO0FBQy9DLDhCQUE4QjtBQUM5QixZQUFZO0FBQ1osUUFBUTtBQUNSLDhCQUE4QjtBQUM5QixzREFBc0Q7QUFDdEQsMkNBQTJDO0FBQzNDLDZDQUE2QztBQUM3QyxrQkFBa0I7QUFDbEIsdUJBQXVCO0FBQ3ZCLFFBQVE7QUFDUixnQ0FBZ0M7QUFDaEMsbURBQW1EO0FBQ25ELGtCQUFrQjtBQUNsQixJQUFJO0FBRUo7SUFDSSxJQUFJLEdBQUcsR0FBRyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7SUFFdEMsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQztRQUNKLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzNCLENBQUM7QUFDTCxDQUFDO0FBTkQsOENBTUMiLCJmaWxlIjoic3JjL2F0b20vY29yZS9lZGl0b3JNYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IGtvciBvbiAyNC8wNy8xNS5cbiAqL1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvbWFpbi5kLnRzXCIgLz5cblxuLy8gaW1wb3J0IGZzID0gcmVxdWlyZSAoJ2ZzJylcbi8vIGltcG9ydCBwYXRoID0gcmVxdWlyZSAoJ3BhdGgnKVxuaW1wb3J0IGVkaXRvclRvb2xzPXJlcXVpcmUoXCIuLi9lZGl0b3ItdG9vbHMvZWRpdG9yLXRvb2xzXCIpXG4vLyBpbXBvcnQgcnA9cmVxdWlyZShcInJhbWwtMS1wYXJzZXJcIilcbi8vIGltcG9ydCBwcm9qZWN0PXJwLnByb2plY3Q7XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBhc3QoZWRpdG9yOkF0b21Db3JlLklFZGl0b3IpOnJwLklIaWdoTGV2ZWxOb2Rle1xuLy8gICAgIHZhciBtYW49ZWRpdG9yVG9vbHMuYXF1aXJlTWFuYWdlcigpO1xuLy8gICAgIGlmIChlZGl0b3JUb29scy5hcXVpcmVNYW5hZ2VyKCkpe1xuLy8gICAgICAgICBpZiAobWFuLmdldEN1cnJlbnRFZGl0b3IoKT09ZWRpdG9yKXtcbi8vICAgICAgICAgICAgIHJldHVybiBtYW4uYXN0O1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIHZhciBwPWVkaXRvci5nZXRQYXRoKCk7XG4vLyAgICAgdmFyIHByaj1wcm9qZWN0LmNyZWF0ZVByb2plY3QocGF0aC5kaXJuYW1lKHApKTtcbi8vICAgICB2YXIgdW5pdD1wcmoudW5pdChwYXRoLmJhc2VuYW1lKHApKTtcbi8vICAgICB2YXIgdGV4dD1lZGl0b3IuZ2V0QnVmZmVyKCkuZ2V0VGV4dCgpO1xuLy8gICAgIGlmICghdW5pdCl7XG4vLyAgICAgICAgIHJldHVybiBudWxsO1xuLy8gICAgIH1cbi8vICAgICB1bml0LnVwZGF0ZUNvbnRlbnQodGV4dCk7XG4vLyAgICAgdmFyIGFzdD08cnAuSUhpZ2hMZXZlbE5vZGU+dW5pdC5oaWdoTGV2ZWwoKTtcbi8vICAgICByZXR1cm4gYXN0O1xuLy8gfVxuXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlRWRpdG9yVG9vbHMoKTogdm9pZCB7XG4gICAgdmFyIG1hbiA9IGVkaXRvclRvb2xzLmFxdWlyZU1hbmFnZXIoKTtcbiAgICBcbiAgICBpZihtYW4pe1xuICAgICAgICBtYW4uZ2V0Q3VycmVudEVkaXRvcigpO1xuICAgIH1cbn1cbiJdfQ==\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"api-language-server\");\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar grammarHandlers = {};\n\tfunction handle(editor) {\n\t    console.log(\"Editor Opened: \" + editor.getURI());\n\t    var uri = editor.getURI() || \"\";\n\t    updateGrammar(editor);\n\t    editor.onDidChange(function () {\n\t        updateGrammar(editor);\n\t    });\n\t}\n\texports.handle = handle;\n\tfunction updateGrammar(editor) {\n\t    Object.keys(grammarHandlers).forEach(function (extension) { return tryUpdateGrammarForLanguage(editor, extension); });\n\t}\n\tfunction tryUpdateGrammarForLanguage(editor, extension) {\n\t    if (!isUriEndsWith(editor, extension)) {\n\t        return;\n\t    }\n\t    try {\n\t        if (grammarHandlers[extension](editor)) {\n\t            setGrammar(editor, \"source.s\" + extension);\n\t            return;\n\t        }\n\t    }\n\t    catch (e) {\n\t        return;\n\t    }\n\t    setGrammar(editor, \"source.\" + extension);\n\t}\n\tfunction isSwaggerJson(editor) {\n\t    if (JSON.parse(editor.getText()).swagger) {\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\texports.isSwaggerJson = isSwaggerJson;\n\tfunction isSwaggerYaml(editor) {\n\t    if (editor.getText().trim().indexOf(\"swagger:\") == 0) {\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\texports.isSwaggerYaml = isSwaggerYaml;\n\tfunction isUriEndsWith(editor, extension) {\n\t    return (editor.getURI() || \"\").toLowerCase().endsWith(\".\" + extension);\n\t}\n\tfunction setGrammar(editor, grammarId) {\n\t    if (editor.getGrammar() && editor.getGrammar().scopeName === grammarId) {\n\t        return;\n\t    }\n\t    editor.setGrammar(atom.workspace.grammarRegistry.grammarForId(grammarId));\n\t}\n\tgrammarHandlers[\"json\"] = isSwaggerJson;\n\tgrammarHandlers[\"yaml\"] = isSwaggerYaml;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2dyYW1tYXItZGV0ZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxlQUFlLEdBQTBELEVBQUUsQ0FBQztBQUVoRixnQkFBdUIsTUFBd0I7SUFDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBUyxNQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUV4RCxJQUFJLEdBQUcsR0FBUyxNQUFPLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO0lBRXZDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV0QixNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ2YsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQVZELHdCQVVDO0FBRUQsdUJBQXVCLE1BQXdCO0lBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsU0FBUyxJQUFJLE9BQUEsMkJBQTJCLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxFQUE5QyxDQUE4QyxDQUFDLENBQUM7QUFDdEcsQ0FBQztBQUVELHFDQUFxQyxNQUF3QixFQUFFLFNBQWlCO0lBQzVFLEVBQUUsQ0FBQSxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDO0lBQ1gsQ0FBQztJQUVELElBQUksQ0FBQztRQUNELEVBQUUsQ0FBQSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEMsVUFBVSxDQUFDLE1BQU0sRUFBRSxVQUFVLEdBQUcsU0FBUyxDQUFDLENBQUM7WUFFM0MsTUFBTSxDQUFDO1FBQ1gsQ0FBQztJQUNMLENBQUM7SUFBQyxLQUFLLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1IsTUFBTSxDQUFDO0lBQ1gsQ0FBQztJQUVELFVBQVUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFFRCx1QkFBOEIsTUFBd0I7SUFDbEQsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQU5ELHNDQU1DO0FBRUQsdUJBQThCLE1BQXdCO0lBQ2xELEVBQUUsQ0FBQSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFORCxzQ0FNQztBQUVELHVCQUF1QixNQUF3QixFQUFFLFNBQWlCO0lBQzlELE1BQU0sQ0FBQyxDQUFPLE1BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0FBQ2xGLENBQUM7QUFFRCxvQkFBb0IsTUFBd0IsRUFBRSxTQUFpQjtJQUMzRCxFQUFFLENBQUEsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sQ0FBQztJQUNYLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFPLElBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ3JGLENBQUM7QUFFRCxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDO0FBQ3hDLGVBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxhQUFhLENBQUMiLCJmaWxlIjoic3JjL2F0b20vZ3JhbW1hci1kZXRlY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ3JhbW1hckhhbmRsZXJzOiB7W2lkOiBzdHJpbmddOiAoZWRpdG9yOiBBdG9tQ29yZS5JRWRpdG9yKSA9PiBib29sZWFufSA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlKGVkaXRvcjogQXRvbUNvcmUuSUVkaXRvcik6IGFueSB7XG4gICAgY29uc29sZS5sb2coXCJFZGl0b3IgT3BlbmVkOiBcIiArICg8YW55PmVkaXRvcikuZ2V0VVJJKCkpO1xuICAgIFxuICAgIHZhciB1cmkgPSAoPGFueT5lZGl0b3IpLmdldFVSSSgpIHx8IFwiXCI7XG5cbiAgICB1cGRhdGVHcmFtbWFyKGVkaXRvcik7XG5cbiAgICBlZGl0b3Iub25EaWRDaGFuZ2UoKCkgPT4ge1xuICAgICAgICB1cGRhdGVHcmFtbWFyKGVkaXRvcik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUdyYW1tYXIoZWRpdG9yOiBBdG9tQ29yZS5JRWRpdG9yKTogdm9pZCB7XG4gICAgT2JqZWN0LmtleXMoZ3JhbW1hckhhbmRsZXJzKS5mb3JFYWNoKGV4dGVuc2lvbiA9PiB0cnlVcGRhdGVHcmFtbWFyRm9yTGFuZ3VhZ2UoZWRpdG9yLCBleHRlbnNpb24pKTtcbn1cblxuZnVuY3Rpb24gdHJ5VXBkYXRlR3JhbW1hckZvckxhbmd1YWdlKGVkaXRvcjogQXRvbUNvcmUuSUVkaXRvciwgZXh0ZW5zaW9uOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZighaXNVcmlFbmRzV2l0aChlZGl0b3IsIGV4dGVuc2lvbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICB0cnkge1xuICAgICAgICBpZihncmFtbWFySGFuZGxlcnNbZXh0ZW5zaW9uXShlZGl0b3IpKSB7XG4gICAgICAgICAgICBzZXRHcmFtbWFyKGVkaXRvciwgXCJzb3VyY2Uuc1wiICsgZXh0ZW5zaW9uKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgc2V0R3JhbW1hcihlZGl0b3IsIFwic291cmNlLlwiICsgZXh0ZW5zaW9uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3dhZ2dlckpzb24oZWRpdG9yOiBBdG9tQ29yZS5JRWRpdG9yKTogYm9vbGVhbiB7XG4gICAgaWYoSlNPTi5wYXJzZShlZGl0b3IuZ2V0VGV4dCgpKS5zd2FnZ2VyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N3YWdnZXJZYW1sKGVkaXRvcjogQXRvbUNvcmUuSUVkaXRvcik6IGJvb2xlYW4ge1xuICAgIGlmKGVkaXRvci5nZXRUZXh0KCkudHJpbSgpLmluZGV4T2YoXCJzd2FnZ2VyOlwiKSA9PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVXJpRW5kc1dpdGgoZWRpdG9yOiBBdG9tQ29yZS5JRWRpdG9yLCBleHRlbnNpb246IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoKDxhbnk+ZWRpdG9yKS5nZXRVUkkoKSB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKFwiLlwiICsgZXh0ZW5zaW9uKTtcbn1cblxuZnVuY3Rpb24gc2V0R3JhbW1hcihlZGl0b3I6IEF0b21Db3JlLklFZGl0b3IsIGdyYW1tYXJJZDogc3RyaW5nKSB7XG4gICAgaWYoZWRpdG9yLmdldEdyYW1tYXIoKSAmJiBlZGl0b3IuZ2V0R3JhbW1hcigpLnNjb3BlTmFtZSA9PT0gZ3JhbW1hcklkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgZWRpdG9yLnNldEdyYW1tYXIoKDxhbnk+YXRvbSkud29ya3NwYWNlLmdyYW1tYXJSZWdpc3RyeS5ncmFtbWFyRm9ySWQoZ3JhbW1hcklkKSk7XG59XG5cbmdyYW1tYXJIYW5kbGVyc1tcImpzb25cIl0gPSBpc1N3YWdnZXJKc29uO1xuZ3JhbW1hckhhbmRsZXJzW1wieWFtbFwiXSA9IGlzU3dhZ2dlcllhbWw7XG4iXX0=\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar _ = __webpack_require__(10);\n\tvar ramlServer = __webpack_require__(17);\n\tvar editorTools = __webpack_require__(1);\n\tvar uilibsModule = __webpack_require__(5);\n\tvar fs = __webpack_require__(12);\n\tvar mkdirp = __webpack_require__(20);\n\tvar pathModule = __webpack_require__(2);\n\tvar actionUIManager = __webpack_require__(21);\n\tvar uiBuilder = __webpack_require__(9);\n\tvar contributors = {};\n\t/**\n\t * Adds new contributor to the list. All contributors are asked for the menu items\n\t * before the menu is displayed.\n\t * @param contributor\n\t */\n\tfunction registerContributor(contributor) {\n\t    contributors[contributor.id] = contributor;\n\t}\n\texports.registerContributor = registerContributor;\n\t/**\n\t * Generally it is recommended to use contributor-based architecture instead.\n\t * This method allows adding a single menu item manually, if needed.\n\t * @param name\n\t * @param onClick\n\t * @param categories\n\t * @param shouldDisplay\n\t */\n\tfunction addMenuItem(name, onClick, categories, shouldDisplay) {\n\t}\n\texports.addMenuItem = addMenuItem;\n\t/**\n\t * Generally it is recommended to use contributor-based architecture instead.\n\t * Deletes all menu items with a given selector. Should almost never be called.\n\t * Can not delete contributor-based menu items.\n\t * @param selector\n\t */\n\tfunction deleteMenuItems(selector) {\n\t    //TODO implement\n\t}\n\texports.deleteMenuItems = deleteMenuItems;\n\t/**\n\t * Generally it is recommended to use contributor-based architecture instead.\n\t * Deletes menu item by its selector, name, and optionally categories.\n\t * Can not delete contributor-based menu items.\n\t * @param selector\n\t * @param name\n\t * @param categories\n\t */\n\tfunction deleteMenuItem(selector, name, categories) {\n\t    //TODO implement\n\t}\n\texports.deleteMenuItem = deleteMenuItem;\n\tvar ContextMenuItemNode = /** @class */ (function () {\n\t    function ContextMenuItemNode(menuItem, nameOverride) {\n\t        this.selector = menuItem.selector;\n\t        if (nameOverride) {\n\t            this.name = nameOverride;\n\t        }\n\t        else {\n\t            this.name = menuItem.name;\n\t        }\n\t        this.categories = menuItem.categories;\n\t        this.onClick = menuItem.onClick;\n\t        this.children = [];\n\t    }\n\t    return ContextMenuItemNode;\n\t}());\n\t/**\n\t * Calculates current menu items tree.\n\t * @returns {IContextMenuItemNode[]}\n\t */\n\tfunction calculateMenuItemsTree() {\n\t    for (var contributorId in contributors) {\n\t        var contributor = contributors[contributorId];\n\t        if (contributor.calculationStarted) {\n\t            contributor.calculationStarted();\n\t        }\n\t    }\n\t    var contributorPromises = [];\n\t    for (var contributorId in contributors) {\n\t        var contributor = contributors[contributorId];\n\t        contributorPromises.push(contributor.calculateItems());\n\t    }\n\t    return Promise.all(contributorPromises).then(function (contributorItems) {\n\t        var result = [];\n\t        contributorItems.forEach(function (items) {\n\t            items.forEach(function (item) {\n\t                addItemsTreeNode(result, item);\n\t            });\n\t        });\n\t        for (var contributorId in contributors) {\n\t            var contributor = contributors[contributorId];\n\t            if (contributor.calculationFinished) {\n\t                contributor.calculationFinished();\n\t            }\n\t        }\n\t        return result;\n\t    });\n\t}\n\texports.calculateMenuItemsTree = calculateMenuItemsTree;\n\tfunction addItemsTreeNode(roots, item) {\n\t    var currentList = roots;\n\t    if (item.categories) {\n\t        for (var catIndex in item.categories) {\n\t            var currentSegment = item.categories[catIndex];\n\t            var existingNode = _.find(currentList, function (node) {\n\t                return node.name == currentSegment;\n\t            });\n\t            if (!existingNode) {\n\t                existingNode = new ContextMenuItemNode(item, currentSegment);\n\t                currentList.push(existingNode);\n\t            }\n\t            if (!existingNode.children) {\n\t                currentList = [];\n\t                existingNode.children = currentList;\n\t            }\n\t            else {\n\t                currentList = existingNode.children;\n\t            }\n\t        }\n\t    }\n\t    var leafNode = _.find(currentList, function (node) {\n\t        return node.name == item.name;\n\t    });\n\t    if (leafNode) {\n\t        var index = currentList.indexOf(leafNode, 0);\n\t        if (index != undefined) {\n\t            currentList.splice(index, 1);\n\t        }\n\t    }\n\t    leafNode = new ContextMenuItemNode(item);\n\t    currentList.push(leafNode);\n\t}\n\tvar actionBasedMenuInitialized = false;\n\tfunction launchServerAction(path, action, position) {\n\t    launchServerActionByID(path, action.id, position);\n\t}\n\texports.launchServerAction = launchServerAction;\n\tfunction launchServerActionByID(path, actionID, position) {\n\t    ramlServer.getNodeClientConnection().executeContextActionByID(path, actionID, position).then(function (changes) {\n\t        var editorManager = editorTools.aquireManager();\n\t        if (!editorManager)\n\t            return Promise.resolve([]);\n\t        var path = editorManager.getPath();\n\t        var _loop_1 = function (change) {\n\t            if (change.uri == path && change.text != null) {\n\t                editorManager.getCurrentEditor().getBuffer().setText(change.text);\n\t                ramlServer.getNodeClientConnection().documentChanged({\n\t                    uri: path,\n\t                    text: change.text\n\t                });\n\t            }\n\t            else if (change.text != null) {\n\t                var editorFound_1 = false;\n\t                atom.workspace.getTextEditors().forEach(function (currentEditor) {\n\t                    if (currentEditor.getPath && currentEditor.getPath() == change.uri) {\n\t                        currentEditor.getBuffer().setText(change.text);\n\t                        editorFound_1 = true;\n\t                    }\n\t                });\n\t                if (!editorFound_1) {\n\t                    mkdirp.sync(pathModule.dirname(change.uri));\n\t                    fs.writeFileSync(change.uri, change.text);\n\t                }\n\t            }\n\t        };\n\t        //TODO handle all cases\n\t        for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {\n\t            var change = changes_1[_i];\n\t            _loop_1(change);\n\t        }\n\t    });\n\t}\n\texports.launchServerActionByID = launchServerActionByID;\n\t/**\n\t * Initializes and registers standard context menu contributor, based on currently available context actions.\n\t * @param selector - CSS selector, can be null if not used in the display.\n\t */\n\tfunction initializeActionBasedMenu(selector) {\n\t    var editorContextMenuContributor = {\n\t        id: \"editorContextActionContributor\",\n\t        calculateItems: function () {\n\t            var editorManager = editorTools.aquireManager();\n\t            if (!editorManager)\n\t                return Promise.resolve([]);\n\t            var path = editorManager.getPath();\n\t            if (!path)\n\t                return Promise.resolve([]);\n\t            var position = editorManager.getCurrentPosition();\n\t            return Promise.resolve([]);\n\t            // return ramlServer.getNodeClientConnection()\n\t            //     .calculateEditorContextActions(path, position).then(currentActions=>{\n\t            //\n\t            //     var result : contextMenu.IContextMenuItem[] = []\n\t            //\n\t            //     currentActions.forEach(action => {\n\t            //         // if (action.hasUI) {\n\t            //         //     return;\n\t            //         // }\n\t            //\n\t            //         result.push({\n\t            //\n\t            //             selector : selector,\n\t            //\n\t            //             name : action.label ? action.label : action.name,\n\t            //\n\t            //             categories : action.category,\n\t            //\n\t            //             onClick: ()=>{\n\t            //                 launchServerAction(path, action, position)\n\t            //             },\n\t            //\n\t            //             children: []\n\t            //         })\n\t            //     })\n\t            //\n\t            //     let updatedPosition = editorManager.getCurrentPosition();\n\t            //     if (updatedPosition !== position) {\n\t            //         return [];\n\t            //     }\n\t            //\n\t            //     return result\n\t            // })\n\t        }\n\t    };\n\t    registerContributor(editorContextMenuContributor);\n\t    handleActionUI();\n\t    configureServerActions();\n\t    actionBasedMenuInitialized = true;\n\t}\n\texports.initializeActionBasedMenu = initializeActionBasedMenu;\n\tfunction handleActionUI() {\n\t    ramlServer.getNodeClientConnection().onDisplayActionUI(function (uiDisplayRequest) {\n\t        ramlServer.getNodeClientConnection().debug(\"Got UI display request\", \"contextActions\", \"contextMenuImpl#handleActionUI\");\n\t        var actionUI = actionUIManager.getUICode(uiDisplayRequest.action.id);\n\t        if (!actionUI) {\n\t            ramlServer.getNodeClientConnection().error(\"Can not find UI for action \" +\n\t                uiDisplayRequest.action.id, \"contextActions\", \"handleActionUI\");\n\t            return Promise.resolve({});\n\t        }\n\t        global.IDE = atom;\n\t        global.UI = uilibsModule;\n\t        global.UIBuilder = uiBuilder;\n\t        return actionUI.run(uiDisplayRequest.initialUIState).then(function (result) {\n\t            ramlServer.getNodeClientConnection().debugDetail(\"Client: got result on dialog finish\", \"contextActions\", \"handleActionUI\");\n\t            return result;\n\t        });\n\t    });\n\t}\n\tfunction configureServerActions() {\n\t    ramlServer.getNodeClientConnection().setServerConfiguration({\n\t        actionsConfiguration: {\n\t            enableUIActions: true\n\t        }\n\t    });\n\t}\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"mkdirp\");\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar completeBodyUI = __webpack_require__(22);\n\tvar newMethodUI = __webpack_require__(23);\n\tvar simpleActionUi = __webpack_require__(24);\n\tfunction getUICode(actionID) {\n\t    if (actionID == \"completeBody\") {\n\t        return completeBodyUI;\n\t    }\n\t    if (actionID == \"newMethod\") {\n\t        return newMethodUI;\n\t    }\n\t    if (actionID == \"Create new Response\") {\n\t        return simpleActionUi;\n\t    }\n\t    if (actionID == \"Create new URI Parameter\") {\n\t        return simpleActionUi;\n\t    }\n\t    if (actionID == \"Create new Query Parameter\") {\n\t        return simpleActionUi;\n\t    }\n\t    if (actionID == \"Create new Header\") {\n\t        return simpleActionUi;\n\t    }\n\t    if (actionID == \"Create new Response Header\") {\n\t        return simpleActionUi;\n\t    }\n\t    if (actionID == \"Create new Response Body\") {\n\t        return simpleActionUi;\n\t    }\n\t    if (actionID == \"Create new Property\") {\n\t        return simpleActionUi;\n\t    }\n\t    if (actionID == \"Create new Body\") {\n\t        return simpleActionUi;\n\t    }\n\t    return null;\n\t}\n\texports.getUICode = getUICode;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvbnRleHQtbWVudS9hY3Rpb25VSU1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwREFBNEQ7QUFDNUQsb0RBQXNEO0FBRXRELDBEQUE0RDtBQU01RCxtQkFBMEIsUUFBZ0I7SUFDdEMsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUMxQixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDekIsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUN2QixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLHFCQUFxQixDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFRCxFQUFFLENBQUEsQ0FBQyxRQUFRLElBQUksMEJBQTBCLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQUVELEVBQUUsQ0FBQSxDQUFDLFFBQVEsSUFBSSw0QkFBNEIsQ0FBQyxDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUMxQixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLG1CQUFtQixDQUFDLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFRCxFQUFFLENBQUEsQ0FBQyxRQUFRLElBQUksNEJBQTRCLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQUVELEVBQUUsQ0FBQSxDQUFDLFFBQVEsSUFBSSwwQkFBMEIsQ0FBQyxDQUFDLENBQUM7UUFDeEMsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUMxQixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLHFCQUFxQixDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFRCxFQUFFLENBQUEsQ0FBQyxRQUFRLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQTFDRCw4QkEwQ0MiLCJmaWxlIjoic3JjL2F0b20vY29udGV4dC1tZW51L2FjdGlvblVJTWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb21wbGV0ZUJvZHlVSSA9IHJlcXVpcmUoXCIuL2FjdGlvbnMvY29tcGxldGVCb2R5L3VpXCIpXG5pbXBvcnQgbmV3TWV0aG9kVUkgPSByZXF1aXJlKFwiLi9hY3Rpb25zL25ld01ldGhvZC91aVwiKVxuXG5pbXBvcnQgc2ltcGxlQWN0aW9uVWkgPSByZXF1aXJlKFwiLi9hY3Rpb25zL3NpbXBsZUFjdGlvbi91aVwiKVxuXG5pbnRlcmZhY2UgQWN0aW9uVUkge1xuICAgIHJ1bihpbml0aWFsU3RhdGU/OiBhbnkpOiBQcm9taXNlPGFueT47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVSUNvZGUoYWN0aW9uSUQ6IHN0cmluZyk6IEFjdGlvblVJIHtcbiAgICBpZihhY3Rpb25JRCA9PSBcImNvbXBsZXRlQm9keVwiKSB7XG4gICAgICAgIHJldHVybiBjb21wbGV0ZUJvZHlVSTtcbiAgICB9XG5cbiAgICBpZihhY3Rpb25JRCA9PSBcIm5ld01ldGhvZFwiKSB7XG4gICAgICAgIHJldHVybiBuZXdNZXRob2RVSTtcbiAgICB9XG5cbiAgICBpZihhY3Rpb25JRCA9PSBcIkNyZWF0ZSBuZXcgUmVzcG9uc2VcIikge1xuICAgICAgICByZXR1cm4gc2ltcGxlQWN0aW9uVWk7XG4gICAgfVxuXG4gICAgaWYoYWN0aW9uSUQgPT0gXCJDcmVhdGUgbmV3IFVSSSBQYXJhbWV0ZXJcIikge1xuICAgICAgICByZXR1cm4gc2ltcGxlQWN0aW9uVWk7XG4gICAgfVxuXG4gICAgaWYoYWN0aW9uSUQgPT0gXCJDcmVhdGUgbmV3IFF1ZXJ5IFBhcmFtZXRlclwiKSB7XG4gICAgICAgIHJldHVybiBzaW1wbGVBY3Rpb25VaTtcbiAgICB9XG5cbiAgICBpZihhY3Rpb25JRCA9PSBcIkNyZWF0ZSBuZXcgSGVhZGVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHNpbXBsZUFjdGlvblVpO1xuICAgIH1cblxuICAgIGlmKGFjdGlvbklEID09IFwiQ3JlYXRlIG5ldyBSZXNwb25zZSBIZWFkZXJcIikge1xuICAgICAgICByZXR1cm4gc2ltcGxlQWN0aW9uVWk7XG4gICAgfVxuXG4gICAgaWYoYWN0aW9uSUQgPT0gXCJDcmVhdGUgbmV3IFJlc3BvbnNlIEJvZHlcIikge1xuICAgICAgICByZXR1cm4gc2ltcGxlQWN0aW9uVWk7XG4gICAgfVxuXG4gICAgaWYoYWN0aW9uSUQgPT0gXCJDcmVhdGUgbmV3IFByb3BlcnR5XCIpIHtcbiAgICAgICAgcmV0dXJuIHNpbXBsZUFjdGlvblVpO1xuICAgIH1cblxuICAgIGlmKGFjdGlvbklEID09IFwiQ3JlYXRlIG5ldyBCb2R5XCIpIHtcbiAgICAgICAgcmV0dXJuIHNpbXBsZUFjdGlvblVpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufSJdfQ==\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar JsonSchemaGenerator = /** @class */ (function () {\n\t    function JsonSchemaGenerator() {\n\t    }\n\t    JsonSchemaGenerator.prototype.generateSchema = function (obj) {\n\t        var sch = {};\n\t        sch['required'] = true;\n\t        sch['$schema'] = 'http://json-schema.org/draft-03/schema';\n\t        this.pass(obj, sch);\n\t        return sch;\n\t    };\n\t    JsonSchemaGenerator.prototype.pass = function (value, property) {\n\t        var valueType = this.detectType(value);\n\t        property['type'] = valueType;\n\t        if (!value || value == null) {\n\t        }\n\t        else if (Array.isArray(value)) {\n\t            this.passArray(value, property);\n\t        }\n\t        else if (value instanceof Object) {\n\t            this.passObject(value, property);\n\t        }\n\t    };\n\t    JsonSchemaGenerator.prototype.passObject = function (obj, sch) {\n\t        var _this = this;\n\t        Object.keys(obj).forEach(function (x) { return _this.registerProperty(x, obj[x], sch); });\n\t    };\n\t    JsonSchemaGenerator.prototype.registerProperty = function (propName, value, sch) {\n\t        var properties = sch['properties'];\n\t        if (!properties) {\n\t            properties = {};\n\t            sch['properties'] = properties;\n\t        }\n\t        var property = properties[propName];\n\t        if (!property) {\n\t            property = {};\n\t            properties[propName] = property;\n\t        }\n\t        property['required'] = false;\n\t        this.pass(value, property);\n\t    };\n\t    JsonSchemaGenerator.prototype.passArray = function (array, property) {\n\t        var _this = this;\n\t        var items = property['items'];\n\t        if (!items) {\n\t            items = [];\n\t            property['items'] = items;\n\t        }\n\t        var l = array.length;\n\t        var itemSet = [];\n\t        array.forEach(function (value) {\n\t            var item = {};\n\t            _this.pass(value, item);\n\t            itemSet.push(item);\n\t        });\n\t        items.push(itemSet[0]);\n\t    };\n\t    JsonSchemaGenerator.prototype.detectType = function (value) {\n\t        if (Array.isArray(value)) {\n\t            return 'array';\n\t        }\n\t        return typeof value;\n\t    };\n\t    return JsonSchemaGenerator;\n\t}());\n\tfunction generateSchema(text, mediaType) {\n\t    var generator = new JsonSchemaGenerator();\n\t    var obj = JSON.parse(text);\n\t    var schemaObject = generator.generateSchema(obj);\n\t    var schemaString = JSON.stringify(schemaObject, null, 2);\n\t    return schemaString;\n\t}\n\texports.generateSchema = generateSchema;\n\tvar FillBodyDialog = /** @class */ (function () {\n\t    function FillBodyDialog(title) {\n\t        if (title === void 0) { title = \"Fill body\"; }\n\t        var _this = this;\n\t        this.title = title;\n\t        this.name = \"\";\n\t        this.needXML = true;\n\t        this.needJSON = true;\n\t        this.jsexample = '{\\n \"message\":\"Hello world\"\\n}';\n\t        this.xmlexample = \"\";\n\t        this.xmlschema = \"\";\n\t        this.jsschema = \"\";\n\t        this.resultPromise = new Promise(function (resolve, reject) {\n\t            _this.resolve = resolve;\n\t            _this.reject = reject;\n\t        });\n\t    }\n\t    FillBodyDialog.prototype.extraContent = function (s) {\n\t    };\n\t    FillBodyDialog.prototype.updateButtons = function () {\n\t        if (!this.createButton) {\n\t            return;\n\t        }\n\t        if (this.name.length == 0) {\n\t            this.createButton.setDisabled(true);\n\t            this.em.setDisplay(true);\n\t            this.em.setText(\"Please type name of your payload\");\n\t            return;\n\t        }\n\t        if (this.needJSON) {\n\t            try {\n\t                JSON.parse(this.jsexample);\n\t            }\n\t            catch (e) {\n\t                this.createButton.setDisabled(true);\n\t                this.em.setDisplay(true);\n\t                this.em.setText(\"JSON example is not correct\");\n\t                return;\n\t            }\n\t            // try {\n\t            //     var so = su.getJSONSchema(this.jsschema, null);\n\t            //\n\t            // } catch (e) {\n\t            //     this.createButton.setDisabled(true);\n\t            //     this.em.setDisplay(true)\n\t            //     this.em.setText(\"JSON schema is not correct\");\n\t            //     return;\n\t            // }\n\t        }\n\t        if (this.needXML) {\n\t            // try {\n\t            //     xmlutil(this.xmlexample);\n\t            // } catch (e) {\n\t            //     this.createButton.setDisabled(true);\n\t            //     this.em.setDisplay(true)\n\t            //     this.em.setText(\"XML example is not correct\");\n\t            //     return;\n\t            // }\n\t            // try {\n\t            //     var so = su.getXMLSchema(this.xmlschema);\n\t            //\n\t            // } catch (e) {\n\t            //     this.createButton.setDisabled(true);\n\t            //     this.em.setDisplay(true)\n\t            //     this.em.setText(\"XML schema is not correct\");\n\t            //     return;\n\t            // }\n\t        }\n\t        this.em.setDisplay(false);\n\t        this.createButton.setDisabled(false);\n\t    };\n\t    FillBodyDialog.prototype.show = function () {\n\t        var _this = this;\n\t        var zz = null;\n\t        this.em = UI.label(\"Please type name of your payload\", UI.Icon.BUG, UI.TextClasses.ERROR, UI.HighLightClasses.NONE);\n\t        var section = UI.section(this.title, UI.Icon.BOOK, false, false, this.em, UI.h3(\"Please type name for your payload\")).pad(10, 10);\n\t        section.addChild(UI.texfField(\"\", this.name, function (x) {\n\t            _this.name = x.getBinding().get();\n\t            _this.updateButtons();\n\t        }));\n\t        var r1 = UI.checkBox(\"Create XML body\");\n\t        r1.setValue(this.needXML);\n\t        r1.getBinding().addListener(function (x) {\n\t            _this.needXML = r1.getValue();\n\t            _this.updateButtons();\n\t        });\n\t        section.addChild(r1);\n\t        var r2 = UI.checkBox(\"Create JSON body\");\n\t        r2.setValue(this.needJSON);\n\t        r2.getBinding().addListener(function (x) {\n\t            _this.needJSON = r2.getValue();\n\t            _this.updateButtons();\n\t        });\n\t        section.addChild(r2);\n\t        var buttonBar = UI.hc().setPercentWidth(100).setStyle(\"display\", \"flex\");\n\t        buttonBar.addChild(UI.label(\"\", null, null, null).setStyle(\"flex\", \"1\"));\n\t        buttonBar.addChild(UI.button(\"Cancel\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.NO_HIGHLIGHT, UI.Icon.NONE, function (x) {\n\t            zz.destroy();\n\t        }).margin(10, 10));\n\t        this.createButton = UI.button(\"Create\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.SUCCESS, UI.Icon.NONE, function (x) {\n\t            _this.onOk(zz);\n\t            zz.destroy();\n\t        });\n\t        buttonBar.addChild(this.createButton);\n\t        var tf = new UI.TabFolder();\n\t        this.createButton.setDisabled(true);\n\t        this.createTextSection(tf, \"JSON Example\", \"source.json\", \"jsexample\");\n\t        this.createTextSection(tf, \"JSON Schema\", \"source.json\", \"jsschema\");\n\t        this.createTextSection(tf, \"XML Example\", \"text.xml\", \"xmlexample\");\n\t        this.createTextSection(tf, \"XML Schema\", \"text.xml\", \"xmlschema\");\n\t        tf.setOnSelected(function () {\n\t            var c = tf.selectedComponent();\n\t            var te = c.children()[1];\n\t            te.setText(_this[c.id()]);\n\t        });\n\t        section.addChild(tf);\n\t        section.addChild(buttonBar);\n\t        zz = IDE.workspace.addModalPanel({ item: section.renderUI() });\n\t    };\n\t    FillBodyDialog.prototype.createTextSection = function (tf, caption, lang, code) {\n\t        var _this = this;\n\t        var hs = UI.vc();\n\t        hs.setCaption(caption);\n\t        hs.setId(code);\n\t        var ts = new UI.AtomEditorElement(\"\", function (x) { return x; });\n\t        ts.setMini(false);\n\t        ts.getBinding().addListener(function (x) {\n\t            _this[code] = ts.getValue();\n\t            _this.updateButtons();\n\t        });\n\t        //ts.setCaption(code)\n\t        ts.setText(\"\" + this[code]);\n\t        ts.setCaption(caption);\n\t        ts.setGrammar(lang);\n\t        ts.setStyle(\"height\", \"400px\");\n\t        ts.setStyle(\"border\", \"solid\");\n\t        ts.setStyle(\"border-width\", \"1px\");\n\t        hs.addChild(UI.h3(\"Please type your example here:\"));\n\t        hs.addChild(ts);\n\t        if (code == 'jsexample') {\n\t            var b = UI.button(\"Generate JSON schema\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.SUCCESS, UI.Icon.NONE, function (x) {\n\t                try {\n\t                    var rs = generateSchema(_this.jsexample, \"application/json\");\n\t                    _this.jsschema = rs;\n\t                    tf.setSelectedIndex(1);\n\t                }\n\t                catch (e) {\n\t                    _this.jsschema = e.message;\n\t                    tf.setSelectedIndex(1);\n\t                }\n\t            });\n\t            hs.addChild(b.margin(5, 5, 5, 5));\n\t        }\n\t        // if (code == 'xmlexample') {\n\t        //     var b = UI.button(\"Generate JSON example\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.SUCCESS, UI.Icon.NONE, x=> {\n\t        //         try {\n\t        //             var rs = xmlutil(this.xmlexample)\n\t        //             this.jsexample = JSON.stringify(rs, null, 2);\n\t        //             tf.setSelectedIndex(0)\n\t        //         }\n\t        //         catch (e) {\n\t        //             this.jsexample = e.message;\n\t        //             tf.setSelectedIndex(0)\n\t        //         }\n\t        //     });\n\t        //     hs.addChild(b.margin(5, 5, 5, 5));\n\t        // }\n\t        tf.add(caption, null, hs);\n\t    };\n\t    FillBodyDialog.prototype.onOk = function (zz) {\n\t        this.resolve({\n\t            name: this.name,\n\t            needJSON: this.needJSON,\n\t            needXML: this.needXML,\n\t            jsexample: this.jsexample,\n\t            xmlexample: this.xmlexample,\n\t            jsschema: this.jsschema,\n\t            xmlschema: this.xmlschema,\n\t        });\n\t    };\n\t    FillBodyDialog.prototype.getResult = function () {\n\t        return this.resultPromise;\n\t    };\n\t    return FillBodyDialog;\n\t}());\n\tfunction run() {\n\t    var dialog = new FillBodyDialog();\n\t    dialog.show();\n\t    return dialog.getResult();\n\t}\n\texports.run = run;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar _dialogPanels = [];\n\tvar mdp = null;\n\tfunction _dialog(panel, onDone, toFocus, stretch) {\n\t    if (stretch === void 0) { stretch = false; }\n\t    return _dialog2(panel, [\n\t        { name: \"Ok\", isPrimary: true, highlight: UI.ButtonHighlights.PRIMARY, action: onDone },\n\t        { name: \"Cancel\", highlight: UI.ButtonHighlights.NO_HIGHLIGHT, action: function () { return true; } }\n\t    ], toFocus, stretch);\n\t}\n\tfunction _dialog2(panel, actions, toFocus, stretch) {\n\t    if (stretch === void 0) { stretch = false; }\n\t    var buttonBar = UI.hc().setPercentWidth(100);\n\t    actions.reverse().forEach(function (a) {\n\t        var button = UI.button(a.name, UI.ButtonSizes.NORMAL, a.highlight, UI.Icon.NONE, function (x) { if (a.action())\n\t            _closeDialog(); });\n\t        if (a.isPrimary) {\n\t            var st = panel.getBinding().status();\n\t            if (st) {\n\t                if (st.code == UI.StatusCode.ERROR) {\n\t                    button.setDisabled(true);\n\t                }\n\t            }\n\t            panel.getBinding().addStatusListener(function (x) {\n\t                var st = panel.getBinding().status();\n\t                if (st) {\n\t                    if (st.code != UI.StatusCode.ERROR) {\n\t                        button.setDisabled(false);\n\t                    }\n\t                    else {\n\t                        button.setDisabled(true);\n\t                    }\n\t                }\n\t            });\n\t        }\n\t        button.setStyle(\"float\", \"right\")\n\t            .margin(4, 10);\n\t        buttonBar.addChild(button);\n\t    });\n\t    panel.addChild(buttonBar);\n\t    var ui = panel.ui();\n\t    return function (e) {\n\t        _dialogPanels.push(panel);\n\t        var eventListener = function () {\n\t            if (!stretch) {\n\t                return;\n\t            }\n\t            var parent = ui.parentElement;\n\t            var height = document.body.clientHeight;\n\t            if (!parent) {\n\t                return;\n\t            }\n\t            var style = window.getComputedStyle(parent);\n\t            [\"paddingBottom\", \"paddingTop\", \"marginBottom\", \"marginTop\"].forEach(function (property) {\n\t                height -= parseFloat(style[property] || 0);\n\t            });\n\t            ui.style.height = height + \"px\";\n\t            ui.style.overflowY = \"scroll\";\n\t        };\n\t        window.addEventListener('resize', eventListener);\n\t        mdp = IDE.workspace.addModalPanel({ item: ui });\n\t        mdp.onDidDestroy(function () {\n\t            window.removeEventListener('resize', eventListener);\n\t        });\n\t        eventListener();\n\t        if (toFocus)\n\t            toFocus.ui().focus();\n\t    };\n\t}\n\tfunction _closeDialog() {\n\t    _dialogPanels.pop();\n\t    if (_dialogPanels.length == 0)\n\t        mdp.destroy();\n\t    else\n\t        mdp = IDE.workspace.addModalPanel({ item: _dialogPanels[_dialogPanels.length - 1].ui() });\n\t}\n\tfunction newMethod(inputState, method) {\n\t    var mdesc = inputState.methodDescriptions;\n\t    var cdesc = inputState.statusCodeDescriptions;\n\t    var NO_RESPONCE = \"No response\";\n\t    var NO_RESPONCE_BT = \"No response body type\";\n\t    var code = null, bodyType = null;\n\t    if (method == null)\n\t        method = \"get\";\n\t    var mdescLabel = new UI.LabelField();\n\t    var cdescLabel = new UI.LabelField();\n\t    [mdescLabel, cdescLabel].forEach(function (x) { return x.addClass('wizard-description'); });\n\t    mdescLabel.getActualField().margin(0, 0, 18, 8);\n\t    cdescLabel.getActualField().margin(0, 0, 8, 8);\n\t    var methodSelect = new UI.SelectField(\"Method:\", function (e, v) {\n\t        method = v;\n\t        mdescLabel.setText(\"Method \" + v + \" \" + mdesc[v]);\n\t    }, null);\n\t    methodSelect.getActualField().setOptions(Object.keys(mdesc));\n\t    methodSelect.getActualField().setValue(method, true);\n\t    var responseSelect = new UI.SelectField(\"Status code:\", function (e, v) {\n\t        if (v == NO_RESPONCE) {\n\t            v = null;\n\t            responseTypeSelect.getActualField().setValue(NO_RESPONCE_BT);\n\t        }\n\t        code = v;\n\t        responseTypeSelect.setDisabled(v == null);\n\t        cdescLabel.setText(v ? \"Status code \" + v + \" \" + cdesc[v] : '');\n\t    }, null);\n\t    responseSelect.getActualField().setOptions([NO_RESPONCE].concat(Object.keys(cdesc)));\n\t    var responseTypeSelect = new UI.SelectField(\"Generate default response with media type:\", function (e, v) {\n\t        if (v == NO_RESPONCE_BT) {\n\t            v = null;\n\t            typeOfValue.setDisabled(true);\n\t        }\n\t        else\n\t            typeOfValue.setDisabled(false);\n\t        bodyType = v;\n\t    }, null);\n\t    responseTypeSelect.getActualField().setOptions([NO_RESPONCE_BT, \"application/json\", \"application/xml\", \"application/x-www-form-urlencoded\"]);\n\t    responseTypeSelect.setDisabled(true);\n\t    responseTypeSelect.margin(0, 0, 0, 12);\n\t    var realBodyType = null;\n\t    var bodyTypeSelect = new UI.SelectField(\"Generate default body with media type:\", function (e, v) {\n\t        if (v == NO_RESPONCE_BT) {\n\t            v = null;\n\t            bodyTypeOfValue.setDisabled(true);\n\t        }\n\t        else\n\t            bodyTypeOfValue.setDisabled(false);\n\t        realBodyType = v;\n\t    }, null);\n\t    bodyTypeSelect.getActualField().setOptions([NO_RESPONCE_BT, \"application/json\", \"application/xml\", \"application/x-www-form-urlencoded\"]);\n\t    bodyTypeSelect.margin(0, 0, 0, 12);\n\t    var actualType = null;\n\t    var bodyTypeString = null;\n\t    var typeOfValue = new UI.SelectField(\"Generate default response body with type:\", function (e, v) {\n\t        if (v == NO_RESPONCE_BT)\n\t            v = null;\n\t        actualType = v;\n\t    }, null);\n\t    typeOfValue.setDisabled(true);\n\t    typeOfValue.margin(0, 0, 0, 12);\n\t    var __ret = inputState.typeValues;\n\t    var isSchema = __ret.isSchema;\n\t    var types = __ret.types;\n\t    if (types) {\n\t        types = [\"\"].concat(types);\n\t        typeOfValue.getActualField().setOptions(types);\n\t    }\n\t    var bodyTypeOfValue = new UI.SelectField(\"Generate default body with type:\", function (e, v) {\n\t        if (v == NO_RESPONCE_BT)\n\t            v = null;\n\t        bodyTypeString = v;\n\t    }, null);\n\t    bodyTypeOfValue.setDisabled(true);\n\t    bodyTypeOfValue.margin(0, 0, 0, 12);\n\t    var isSchema = __ret.isSchema;\n\t    var types = __ret.types;\n\t    if (types) {\n\t        types = [\"\"].concat(types);\n\t        bodyTypeOfValue.getActualField().setOptions(types);\n\t    }\n\t    var responseSection = UI.section(\"\");\n\t    responseSection.addChild(UI.h3(\"Body\"));\n\t    responseSection.addChild(bodyTypeSelect);\n\t    responseSection.addChild(bodyTypeOfValue);\n\t    responseSection.addChild(UI.h3(\"Response\"));\n\t    responseSection.addChild(responseSelect);\n\t    responseSection.addChild(cdescLabel);\n\t    responseSection.addChild(responseTypeSelect);\n\t    responseSection.addChild(typeOfValue);\n\t    responseSection.ui();\n\t    var panel = UI.section(\"Creating a new method\", UI.Icon.CODE, false, false, methodSelect, mdescLabel, responseSection);\n\t    var __ret = inputState.typeValues;\n\t    //panel.addChild(typeOfValue)\n\t    var savedResolve;\n\t    var savedReject;\n\t    var resultPromise = new Promise(function (resolve, reject) {\n\t        savedResolve = resolve;\n\t        savedReject = reject;\n\t    });\n\t    _dialog(panel, function () {\n\t        savedResolve({\n\t            method: method,\n\t            realBodyType: realBodyType,\n\t            code: code,\n\t            bodyTypeString: bodyTypeString,\n\t            bodyType: bodyType,\n\t            actualType: actualType,\n\t            isSchema: isSchema\n\t        });\n\t        return true;\n\t    })(this);\n\t    return resultPromise;\n\t}\n\texports.newMethod = newMethod;\n\tfunction run(inputState) {\n\t    return newMethod(inputState);\n\t}\n\texports.run = run;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tfunction run(initialState) {\n\t    if (initialState.isParentNull) {\n\t        return Promise.resolve({\n\t            canceled: true\n\t        });\n\t    }\n\t    var changes = {};\n\t    var item = UIBuilder.buildItem(initialState.detailsTree, {\n\t        uri: \"localchanges\",\n\t        position: -1,\n\t        reconciler: {\n\t            schedule: function (runnable) { return runnable.run(); }\n\t        },\n\t        localModel: changes\n\t    });\n\t    item.setTitle(initialState.title);\n\t    var panel = item.render({\n\t        showDescription: true\n\t    });\n\t    panel.margin(8, 8, 8, 8);\n\t    return new Promise(function (resolve) {\n\t        UI.simpleModalDialog(panel, function () {\n\t            resolve(changes);\n\t            return true;\n\t        }, function () {\n\t            resolve({\n\t                canceled: true\n\t            });\n\t            return true;\n\t        });\n\t    });\n\t}\n\texports.run = run;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvbnRleHQtbWVudS9hY3Rpb25zL3NpbXBsZUFjdGlvbi91aS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU1BLGFBQW9CLFlBQVk7SUFDNUIsRUFBRSxDQUFBLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDM0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDbkIsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELElBQUksT0FBTyxHQUFRLEVBQUUsQ0FBQztJQUV0QixJQUFJLElBQUksR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUU7UUFDckQsR0FBRyxFQUFFLGNBQWM7UUFDbkIsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNaLFVBQVUsRUFBRTtZQUNSLFFBQVEsRUFBRSxVQUFBLFFBQVEsSUFBSSxPQUFBLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBZCxDQUFjO1NBQ3ZDO1FBQ0QsVUFBVSxFQUFFLE9BQU87S0FDdEIsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFbEMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNwQixlQUFlLEVBQUUsSUFBSTtLQUN4QixDQUFDLENBQUM7SUFFSCxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXpCLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU87UUFDdkIsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRTtZQUN4QixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFakIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDLEVBQUU7WUFDQyxPQUFPLENBQUM7Z0JBQ0osUUFBUSxFQUFFLElBQUk7YUFDakIsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQXZDRCxrQkF1Q0MiLCJmaWxlIjoic3JjL2F0b20vY29udGV4dC1tZW51L2FjdGlvbnMvc2ltcGxlQWN0aW9uL3VpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxpYlVJTW9kdWxlID0gcmVxdWlyZShcImF0b20tdWktbGliXCIpXG5cbmRlY2xhcmUgbGV0IFVJOiBhbnk7XG5kZWNsYXJlIGxldCBJREU6IGFueTtcbmRlY2xhcmUgbGV0IFVJQnVpbGRlcjogYW55O1xuXG5leHBvcnQgZnVuY3Rpb24gcnVuKGluaXRpYWxTdGF0ZSk6IFByb21pc2U8YW55PiB7XG4gICAgaWYoaW5pdGlhbFN0YXRlLmlzUGFyZW50TnVsbCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgIGNhbmNlbGVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICB2YXIgY2hhbmdlczogYW55ID0ge307XG5cbiAgICB2YXIgaXRlbSA9IFVJQnVpbGRlci5idWlsZEl0ZW0oaW5pdGlhbFN0YXRlLmRldGFpbHNUcmVlLCB7XG4gICAgICAgIHVyaTogXCJsb2NhbGNoYW5nZXNcIixcbiAgICAgICAgcG9zaXRpb246IC0xLFxuICAgICAgICByZWNvbmNpbGVyOiB7XG4gICAgICAgICAgICBzY2hlZHVsZTogcnVubmFibGUgPT4gcnVubmFibGUucnVuKClcbiAgICAgICAgfSxcbiAgICAgICAgbG9jYWxNb2RlbDogY2hhbmdlc1xuICAgIH0pO1xuXG4gICAgaXRlbS5zZXRUaXRsZShpbml0aWFsU3RhdGUudGl0bGUpO1xuXG4gICAgdmFyIHBhbmVsID0gaXRlbS5yZW5kZXIoe1xuICAgICAgICBzaG93RGVzY3JpcHRpb246IHRydWVcbiAgICB9KTtcblxuICAgIHBhbmVsLm1hcmdpbig4LCA4LCA4LCA4KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBVSS5zaW1wbGVNb2RhbERpYWxvZyhwYW5lbCwgKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZShjaGFuZ2VzKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIGNhbmNlbGVkOiB0cnVlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSJdfQ==\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar PromiseConstructor = __webpack_require__(26);\n\tif (typeof Promise === \"undefined\" && typeof window !== \"undefined\") {\n\t    window.Promise = PromiseConstructor;\n\t}\n\tvar Reconciler = /** @class */ (function () {\n\t    function Reconciler(logger, timeout) {\n\t        this.logger = logger;\n\t        this.timeout = timeout;\n\t        this.waitingList = [];\n\t        this.runningList = [];\n\t    }\n\t    Reconciler.prototype.schedule = function (runnable) {\n\t        var _this = this;\n\t        this.addToWaitingList(runnable);\n\t        return new Promise(function (resolve, reject) {\n\t            setTimeout(function () {\n\t                _this.logger.debugDetail(\"Time came to execute \" + runnable.toString(), \"Reconciler\", \"schedule\");\n\t                if (runnable.isCanceled()) {\n\t                    _this.logger.debugDetail(\"Runnable \" + runnable.toString() + \" is cancelled, doing nothing\", \"Reconciler\", \"schedule\");\n\t                    _this.removeFromWaitingList(runnable);\n\t                    return;\n\t                }\n\t                var currentlyRunning = _this.findConflictingInRunningList(runnable);\n\t                if (currentlyRunning) {\n\t                    // TODO add an additional short timeout parameter to launch the reschedule\n\t                    // at the finish of the currently running task for a short time after it.\n\t                    _this.logger.debugDetail(\"Conflicting to \" + runnable.toString()\n\t                        + \" is found in the running list: \" + currentlyRunning.toString()\n\t                        + \" rescheduling current one.\", \"Reconciler\", \"schedule\");\n\t                    _this.schedule(runnable);\n\t                    return;\n\t                }\n\t                _this.removeFromWaitingList(runnable);\n\t                _this.addToRunningList(runnable);\n\t                _this.logger.debugDetail(\"Executing \" + runnable.toString(), \"Reconciler\", \"schedule\");\n\t                _this.run(runnable).then(function (result) { resolve(result); }, function (error) { reject(error); });\n\t            }, _this.timeout);\n\t        });\n\t    };\n\t    Reconciler.prototype.run = function (runnable) {\n\t        var _this = this;\n\t        return runnable.run().then(function (result) {\n\t            _this.removeFromRunningList(runnable);\n\t            return result;\n\t        }, function (error) {\n\t            _this.removeFromRunningList(runnable);\n\t            throw error;\n\t        });\n\t    };\n\t    /**\n\t     * Adds item to waiting list and removes anything currently in the list,\n\t     * which conflicts with the new item.\n\t     * @param runnable\n\t     */\n\t    Reconciler.prototype.addToWaitingList = function (runnable) {\n\t        var _this = this;\n\t        this.logger.debugDetail(\"Adding runnable \" + runnable.toString() + \" to waiting list\", \"Reconciler\", \"addToWaitingList\");\n\t        this.waitingList = this.waitingList.filter(function (current) {\n\t            _this.logger.debugDetail(\"Comparing existing runnable \" + current.toString() +\n\t                \" to the new \" + runnable.toString(), \"Reconciler\", \"addToWaitingList\");\n\t            var conflicts = runnable.conflicts(current);\n\t            if (conflicts) {\n\t                _this.logger.debugDetail(\"Runnables are conflicting, canceling existing one\", \"Reconciler\", \"addToWaitingList\");\n\t                current.cancel();\n\t            }\n\t            return !conflicts;\n\t        });\n\t        this.waitingList.push(runnable);\n\t    };\n\t    /**\n\t     * Removes runnable from the list of running ones.\n\t     * @param runnable\n\t     */\n\t    Reconciler.prototype.removeFromWaitingList = function (runnable) {\n\t        this.logger.debugDetail(\"Removing \" + runnable.toString()\n\t            + \" from waiting list\", \"Reconciler\", \"removeFromWaitingList\");\n\t        var index = this.waitingList.indexOf(runnable);\n\t        if (index !== -1) {\n\t            this.waitingList.splice(index, 1);\n\t        }\n\t    };\n\t    /**\n\t     * Adds runnable to the list of running ones.\n\t     * @param runnable\n\t     */\n\t    Reconciler.prototype.addToRunningList = function (runnable) {\n\t        this.logger.debugDetail(\"Adding \" + runnable.toString()\n\t            + \" to running list\", \"Reconciler\", \"removeFromWaitingList\");\n\t        this.runningList.push(runnable);\n\t    };\n\t    /**\n\t     * Removes runnable from the list of running ones.\n\t     * @param runnable\n\t     */\n\t    Reconciler.prototype.removeFromRunningList = function (runnable) {\n\t        this.logger.debugDetail(\"Removing \" + runnable.toString()\n\t            + \" from running list\", \"Reconciler\", \"removeFromWaitingList\");\n\t        var index = this.runningList.indexOf(runnable);\n\t        if (index !== -1) {\n\t            this.runningList.splice(index, 1);\n\t        }\n\t    };\n\t    /**\n\t     * Finds the first conflicting runnable in the current list.\n\t     * @param runnable\n\t     * @returns {any}\n\t     */\n\t    Reconciler.prototype.findConflictingInRunningList = function (runnable) {\n\t        for (var _i = 0, _a = this.runningList; _i < _a.length; _i++) {\n\t            var current = _a[_i];\n\t            if (runnable.conflicts(current)) {\n\t                return current;\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t    return Reconciler;\n\t}());\n\texports.Reconciler = Reconciler;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2VkaXRvci10b29scy9yZWNvbmNpbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBSUEscURBQXdEO0FBQ3hELEVBQUUsQ0FBQyxDQUFDLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLE1BQWMsQ0FBQyxPQUFPLEdBQUcsa0JBQWtCLENBQUM7QUFDakQsQ0FBQztBQTZCRDtJQUtJLG9CQUFvQixNQUFlLEVBQVUsT0FBZTtRQUF4QyxXQUFNLEdBQU4sTUFBTSxDQUFTO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUhwRCxnQkFBVyxHQUFvQixFQUFFLENBQUM7UUFDbEMsZ0JBQVcsR0FBb0IsRUFBRSxDQUFDO0lBRzFDLENBQUM7SUFFTSw2QkFBUSxHQUFmLFVBQTRCLFFBQThCO1FBQTFELGlCQThDQztRQTdDRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFaEMsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBcUMsRUFBRSxNQUE2QjtZQUVwRixVQUFVLENBQUM7Z0JBRVAsS0FBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsdUJBQXVCLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxFQUNqRSxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBRTlCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQ3hCLEtBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsOEJBQThCLEVBQ3RGLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztvQkFFOUIsS0FBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUNyQyxNQUFNLENBQUM7Z0JBQ1gsQ0FBQztnQkFFRCxJQUFNLGdCQUFnQixHQUFHLEtBQUks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R0FBcEMsVUFBaUQsUUFBOEI7UUFDM0UsR0FBRyxDQUFDLENBQWtCLFVBQWdCLEVBQWhCLEtBQUEsSUFBSSxDQUFDLFdBQVcsRUFBaEIsY0FBZ0IsRUFBaEIsSUFBZ0I7WUFBakMsSUFBTSxPQUFPLFNBQUE7WUFDZCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDOUIsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUNuQixDQUFDO1NBQ0o7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDTCxpQkFBQztBQUFELENBN0pBLEFBNkpDLElBQUE7QUE3SlksZ0NBQVUiLCJmaWxlIjoic3JjL2F0b20vZWRpdG9yLXRvb2xzL3JlY29uY2lsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIElMb2dnZXJcbn0gZnJvbSBcIi4vbG9nZ2VyXCI7XG5cbmltcG9ydCBQcm9taXNlQ29uc3RydWN0b3IgPSByZXF1aXJlKFwicHJvbWlzZS1wb2x5ZmlsbFwiKTtcbmlmICh0eXBlb2YgUHJvbWlzZSA9PT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgKHdpbmRvdyBhcyBhbnkpLlByb21pc2UgPSBQcm9taXNlQ29uc3RydWN0b3I7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUnVubmFibGU8UmVzdWx0VHlwZT4ge1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgdGhlIGFjdHVhbCBidXNpbmVzcyBsb2dpY3MuXG4gICAgICogU2hvdWxkIHJlc29sdmUgdGhlIHByb21pc2Ugd2hlbiBmaW5pc2hlZC5cbiAgICAgKi9cbiAgICBydW4oKTogUHJvbWlzZTxSZXN1bHRUeXBlPjtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdHdvIHJ1bm5hYmxlIGNvbmZsaWN0IHdpdGggZWFjaCBvdGhlci5cbiAgICAgKiBNdXN0IHdvcmsgZmFzdCBhcyBpdHMgY2FsbGVkIG9mdGVuLlxuICAgICAqIEBwYXJhbSBvdGhlclxuICAgICAqL1xuICAgIGNvbmZsaWN0cyhvdGhlcjogUnVubmFibGU8YW55Pik6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBDYW5jZWxzIHRoZSBydW5uYWJsZS4gcnVuKCkgbWV0aG9kIHNob3VsZCBkbyBub3RoaW5nIGlmIGxhdW5jaGVkIGxhdGVyLFxuICAgICAqIGlmIGNhbmNlbCBpcyBjYWxsZWQgZHVyaW5nIHRoZSBydW4oKSBtZXRob2QgZXhlY3V0aW9uLCBydW4oKSBzaG91bGQgc3RvcCBhcyBzb29uIGFzIGl0IGNhbi5cbiAgICAgKi9cbiAgICBjYW5jZWwoKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgY2FuY2VsKCkgbWV0aG9kIHdhcyBjYWxsZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgKi9cbiAgICBpc0NhbmNlbGVkKCk6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBSZWNvbmNpbGVyIHtcblxuICAgIHByaXZhdGUgd2FpdGluZ0xpc3Q6IFJ1bm5hYmxlPGFueT5bXSA9IFtdO1xuICAgIHByaXZhdGUgcnVubmluZ0xpc3Q6IFJ1bm5hYmxlPGFueT5bXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2dnZXI6IElMb2dnZXIsIHByaXZhdGUgdGltZW91dDogbnVtYmVyKSB7XG4gICAgfVxuXG4gICAgcHVibGljIHNjaGVkdWxlPFJlc3VsdFR5cGU+KHJ1bm5hYmxlOiBSdW5uYWJsZTxSZXN1bHRUeXBlPik6IFByb21pc2U8UmVzdWx0VHlwZT4ge1xuICAgICAgICB0aGlzLmFkZFRvV2FpdGluZ0xpc3QocnVubmFibGUpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogKHZhbHVlPzogUmVzdWx0VHlwZSkgPT4gdm9pZCwgcmVqZWN0OiAoZXJyb3I/OiBhbnkpID0+IHZvaWQpID0+IHtcblxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1Z0RldGFpbChcIlRpbWUgY2FtZSB0byBleGVjdXRlIFwiICsgcnVubmFibGUudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgXCJSZWNvbmNpbGVyXCIsIFwic2NoZWR1bGVcIik7XG5cbiAgICAgICAgICAgICAgICBpZiAocnVubmFibGUuaXNDYW5jZWxlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnRGV0YWlsKFwiUnVubmFibGUgXCIgKyBydW5uYWJsZS50b1N0cmluZygpICsgXCIgaXMgY2FuY2VsbGVkLCBkb2luZyBub3RoaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlJlY29uY2lsZXJcIiwgXCJzY2hlZHVsZVwiKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUZyb21XYWl0aW5nTGlzdChydW5uYWJsZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50bHlSdW5uaW5nID0gdGhpcy5maW5kQ29uZmxpY3RpbmdJblJ1bm5pbmdMaXN0KHJ1bm5hYmxlKTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZykge1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGFkZCBhbiBhZGRpdGlvbmFsIHNob3J0IHRpbWVvdXQgcGFyYW1ldGVyIHRvIGxhdW5jaCB0aGUgcmVzY2hlZHVsZVxuICAgICAgICAgICAgICAgICAgICAvLyBhdCB0aGUgZmluaXNoIG9mIHRoZSBjdXJyZW50bHkgcnVubmluZyB0YXNrIGZvciBhIHNob3J0IHRpbWUgYWZ0ZXIgaXQuXG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZGVidWdEZXRhaWwoXCJDb25mbGljdGluZyB0byBcIiArIHJ1bm5hYmxlLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgaXMgZm91bmQgaW4gdGhlIHJ1bm5pbmcgbGlzdDogXCIgKyBjdXJyZW50bHlSdW5uaW5nLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgcmVzY2hlZHVsaW5nIGN1cnJlbnQgb25lLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJSZWNvbmNpbGVyXCIsIFwic2NoZWR1bGVcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZShydW5uYWJsZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUZyb21XYWl0aW5nTGlzdChydW5uYWJsZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRUb1J1bm5pbmdMaXN0KHJ1bm5hYmxlKTtcblxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnRGV0YWlsKFwiRXhlY3V0aW5nIFwiICsgcnVubmFibGUudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgXCJSZWNvbmNpbGVyXCIsIFwic2NoZWR1bGVcIik7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJ1bihydW5uYWJsZSkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdCkgPT4geyByZXNvbHZlKHJlc3VsdCk7IH0sXG4gICAgICAgICAgICAgICAgICAgIChlcnJvcikgPT4geyByZWplY3QoZXJyb3IpOyB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgfSwgdGhpcy50aW1lb3V0KTtcblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJ1bjxSZXN1bHRUeXBlPihydW5uYWJsZTogUnVubmFibGU8UmVzdWx0VHlwZT4pOiBQcm9taXNlPFJlc3VsdFR5cGU+IHtcblxuICAgICAgICByZXR1cm4gcnVubmFibGUucnVuKCkudGhlbihcblxuICAgICAgICAgICAgKHJlc3VsdCk6IFJlc3VsdFR5cGUgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRnJvbVJ1bm5pbmdMaXN0KHJ1bm5hYmxlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIChlcnJvcik6IFJlc3VsdFR5cGUgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRnJvbVJ1bm5pbmdMaXN0KHJ1bm5hYmxlKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgaXRlbSB0byB3YWl0aW5nIGxpc3QgYW5kIHJlbW92ZXMgYW55dGhpbmcgY3VycmVudGx5IGluIHRoZSBsaXN0LFxuICAgICAqIHdoaWNoIGNvbmZsaWN0cyB3aXRoIHRoZSBuZXcgaXRlbS5cbiAgICAgKiBAcGFyYW0gcnVubmFibGVcbiAgICAgKi9cbiAgICBwcml2YXRlIGFkZFRvV2FpdGluZ0xpc3Q8UmVzdWx0VHlwZT4ocnVubmFibGU6IFJ1bm5hYmxlPFJlc3VsdFR5cGU+KSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnRGV0YWlsKFwiQWRkaW5nIHJ1bm5hYmxlIFwiICsgcnVubmFibGUudG9TdHJpbmcoKSArIFwiIHRvIHdhaXRpbmcgbGlzdFwiLFxuICAgICAgICAgICAgXCJSZWNvbmNpbGVyXCIsIFwiYWRkVG9XYWl0aW5nTGlzdFwiKTtcblxuICAgICAgICB0aGlzLndhaXRpbmdMaXN0ID0gdGhpcy53YWl0aW5nTGlzdC5maWx0ZXIoKGN1cnJlbnQpID0+IHtcblxuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZGVidWdEZXRhaWwoXCJDb21wYXJpbmcgZXhpc3RpbmcgcnVubmFibGUgXCIgKyBjdXJyZW50LnRvU3RyaW5nKCkgK1xuICAgICAgICAgICAgICAgIFwiIHRvIHRoZSBuZXcgXCIgKyBydW5uYWJsZS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIFwiUmVjb25jaWxlclwiLCBcImFkZFRvV2FpdGluZ0xpc3RcIik7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbmZsaWN0cyA9IHJ1bm5hYmxlLmNvbmZsaWN0cyhjdXJyZW50KTtcbiAgICAgICAgICAgIGlmIChjb25mbGljdHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1Z0RldGFpbChcIlJ1bm5hYmxlcyBhcmUgY29uZmxpY3RpbmcsIGNhbmNlbGluZyBleGlzdGluZyBvbmVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJSZWNvbmNpbGVyXCIsIFwiYWRkVG9XYWl0aW5nTGlzdFwiKTtcblxuICAgICAgICAgICAgICAgIGN1cnJlbnQuY2FuY2VsKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAhY29uZmxpY3RzO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLndhaXRpbmdMaXN0LnB1c2gocnVubmFibGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgcnVubmFibGUgZnJvbSB0aGUgbGlzdCBvZiBydW5uaW5nIG9uZXMuXG4gICAgICogQHBhcmFtIHJ1bm5hYmxlXG4gICAgICovXG4gICAgcHJpdmF0ZSByZW1vdmVGcm9tV2FpdGluZ0xpc3Q8UmVzdWx0VHlwZT4ocnVubmFibGU6IFJ1bm5hYmxlPFJlc3VsdFR5cGU+KSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnRGV0YWlsKFwiUmVtb3ZpbmcgXCIgKyBydW5uYWJsZS50b1N0cmluZygpXG4gICAgICAgICAgICArIFwiIGZyb20gd2FpdGluZyBsaXN0XCIsXG4gICAgICAgICAgICBcIlJlY29uY2lsZXJcIiwgXCJyZW1vdmVGcm9tV2FpdGluZ0xpc3RcIik7XG5cbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLndhaXRpbmdMaXN0LmluZGV4T2YocnVubmFibGUpO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLndhaXRpbmdMaXN0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIHJ1bm5hYmxlIHRvIHRoZSBsaXN0IG9mIHJ1bm5pbmcgb25lcy5cbiAgICAgKiBAcGFyYW0gcnVubmFibGVcbiAgICAgKi9cbiAgICBwcml2YXRlIGFkZFRvUnVubmluZ0xpc3Q8UmVzdWx0VHlwZT4ocnVubmFibGU6IFJ1bm5hYmxlPFJlc3VsdFR5cGU+KSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnRGV0YWlsKFwiQWRkaW5nIFwiICsgcnVubmFibGUudG9TdHJpbmcoKVxuICAgICAgICAgICAgKyBcIiB0byBydW5uaW5nIGxpc3RcIixcbiAgICAgICAgICAgIFwiUmVjb25jaWxlclwiLCBcInJlbW92ZUZyb21XYWl0aW5nTGlzdFwiKTtcblxuICAgICAgICB0aGlzLnJ1bm5pbmdMaXN0LnB1c2gocnVubmFibGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgcnVubmFibGUgZnJvbSB0aGUgbGlzdCBvZiBydW5uaW5nIG9uZXMuXG4gICAgICogQHBhcmFtIHJ1bm5hYmxlXG4gICAgICovXG4gICAgcHJpdmF0ZSByZW1vdmVGcm9tUnVubmluZ0xpc3Q8UmVzdWx0VHlwZT4ocnVubmFibGU6IFJ1bm5hYmxlPFJlc3VsdFR5cGU+KSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnRGV0YWlsKFwiUmVtb3ZpbmcgXCIgKyBydW5uYWJsZS50b1N0cmluZygpXG4gICAgICAgICAgICArIFwiIGZyb20gcnVubmluZyBsaXN0XCIsXG4gICAgICAgICAgICBcIlJlY29uY2lsZXJcIiwgXCJyZW1vdmVGcm9tV2FpdGluZ0xpc3RcIik7XG5cbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnJ1bm5pbmdMaXN0LmluZGV4T2YocnVubmFibGUpO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnJ1bm5pbmdMaXN0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgZmlyc3QgY29uZmxpY3RpbmcgcnVubmFibGUgaW4gdGhlIGN1cnJlbnQgbGlzdC5cbiAgICAgKiBAcGFyYW0gcnVubmFibGVcbiAgICAgKiBAcmV0dXJucyB7YW55fVxuICAgICAqL1xuICAgIHByaXZhdGUgZmluZENvbmZsaWN0aW5nSW5SdW5uaW5nTGlzdDxSZXN1bHRUeXBlPihydW5uYWJsZTogUnVubmFibGU8UmVzdWx0VHlwZT4pOiBSdW5uYWJsZTxSZXN1bHRUeXBlPiB7XG4gICAgICAgIGZvciAoY29uc3QgY3VycmVudCBvZiB0aGlzLnJ1bm5pbmdMaXN0KSB7XG4gICAgICAgICAgICBpZiAocnVubmFibGUuY29uZmxpY3RzKGN1cnJlbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4iXX0=\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"promise-polyfill\");\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar UI = __webpack_require__(5);\n\tvar SC = __webpack_require__(6);\n\tvar CompositeDisposable = UI.CompositeDisposable;\n\t// import details2=require(\"./details2\")\n\t// import contextActions = require(\"raml-actions\")\n\t// import commonContextActions = require(\"../context-menu/commonContextActions\")\n\tvar editorTools = __webpack_require__(1);\n\t// import universeHelpers = rp.universeHelpers;\n\t// import ramlOutline = require(\"raml-outline\")\n\t// import outlineCommon = require(\"./outline-common\")\n\tvar ramlServer = __webpack_require__(17);\n\tfunction getActiveEditor() {\n\t    var activeEditor = atom.workspace.getActiveTextEditor();\n\t    if (activeEditor) {\n\t        return activeEditor;\n\t    }\n\t    if (editorTools.aquireManager())\n\t        return editorTools.aquireManager().getCurrentEditor();\n\t    return null;\n\t}\n\texports.getActiveEditor = getActiveEditor;\n\tvar RamlOutline = /** @class */ (function (_super) {\n\t    __extends(RamlOutline, _super);\n\t    function RamlOutline() {\n\t        var _this = _super.call(this) || this;\n\t        _this.disposables = new CompositeDisposable();\n\t        _this.fire = true;\n\t        _this.createTree(null);\n\t        _this.addClass('raml-outline');\n\t        _this.addChild(_this._rs);\n\t        return _this;\n\t    }\n\t    RamlOutline.prototype.createTree = function (structure /*p: hl.IParseResult*/) {\n\t        var _this = this;\n\t        this._rs = createTree(structure, function (sender) {\n\t            if (sender.selection && sender.selection.elements && _this.fire == true) {\n\t                if (sender.selection.elements.length > 0 && sender.selection.elements[0]) {\n\t                    var activeEditor = getActiveEditor();\n\t                    var p1 = activeEditor.getBuffer().positionForCharacterIndex(sender.selection.elements[0].start);\n\t                    var p2 = activeEditor.getBuffer().positionForCharacterIndex(sender.selection.elements[0].start);\n\t                    activeEditor.setSelectedBufferRange({ start: p1, end: p2 }, {});\n\t                }\n\t            }\n\t        });\n\t        this._viewers = [];\n\t        if (structure)\n\t            this._viewers = [0, 1, 2, 3].map(function (i) { return _this._rs.get(i).content; });\n\t    };\n\t    RamlOutline.prototype.getTitle = function () { return \"Outline\"; };\n\t    RamlOutline.prototype.getNodePType = function (node) {\n\t        node.category;\n\t        if (node.category == ramlServer.StructureCategories[ramlServer.StructureCategories.ResourcesCategory])\n\t            return 0;\n\t        if (node.category == ramlServer.StructureCategories[ramlServer.StructureCategories.SchemasAndTypesCategory])\n\t            return 1;\n\t        if (node.category == ramlServer.StructureCategories[ramlServer.StructureCategories.ResourceTypesAndTraitsCategory])\n\t            return 2;\n\t        if (node.category == ramlServer.StructureCategories[ramlServer.StructureCategories.OtherCategory])\n\t            return 3;\n\t        return 3;\n\t    };\n\t    RamlOutline.prototype.setSelection = function (node) {\n\t        //if (this._selectedNode == node) return;\n\t        this._selectedNode = node;\n\t        this.fire = false;\n\t        try {\n\t            var index = this.getNodePType(node);\n\t            var viewer = this._viewers[index];\n\t            if (viewer != null) {\n\t                viewer.setSelection(node);\n\t                this._rs.setSelectedIndex(index);\n\t            }\n\t        }\n\t        finally {\n\t            this.fire = true;\n\t        }\n\t    };\n\t    RamlOutline.prototype.setUnit = function (unitPath /*unit:hl.IHighLevelNode*/, force) {\n\t        var _this = this;\n\t        if (force === void 0) { force = false; }\n\t        if (this.unitPath && unitPath && unitPath != this.unitPath) {\n\t            this._children = [];\n\t        }\n\t        this.unitPath = unitPath;\n\t        var activeEditor = getActiveEditor();\n\t        ramlServer.getNodeClientConnection().documentChanged({\n\t            uri: unitPath,\n\t            text: activeEditor.getText()\n\t        });\n\t        var structurePromise = ramlServer.getNodeClientConnection().getStructure(unitPath);\n\t        if (structurePromise) {\n\t            structurePromise.then(function (structure) {\n\t                _this.createTree(structure);\n\t                _this.addClass('raml-outline');\n\t                _this._children = [];\n\t                _this.addChild(_this._rs);\n\t                _this.html(_this.innerRenderUI());\n\t            }).catch(function (error) {\n\t                //ignoring, the error is already reported to the log, and we dont need to display\n\t                //it to user in other way\n\t            });\n\t        }\n\t    };\n\t    RamlOutline.prototype.attach = function () {\n\t        if (!this._isAttached) {\n\t            var $this = $(this);\n\t            $this.html(this._rs.renderUI().outerHTML);\n\t            this._isAttached = true;\n\t        }\n\t    };\n\t    RamlOutline.prototype.forEachViewer = function (command) {\n\t        this._viewers.forEach(command);\n\t    };\n\t    RamlOutline.prototype.refresh = function () {\n\t        // var unit = this.unit;\n\t        // this.setUnit(null);\n\t        // this.setUnit(unit);\n\t        var unitPath = this.unitPath;\n\t        this.setUnit(null);\n\t        this.setUnit(unitPath);\n\t    };\n\t    RamlOutline.prototype.destroy = function () {\n\t        editorTools.aquireManager()._view = null;\n\t        // this._selectedNode=null;\n\t        // this.unit=null;\n\t        this.unitPath = null;\n\t        this._viewers = [];\n\t        this._rs = null;\n\t        this._children = [];\n\t        this.disposables.dispose();\n\t    };\n\t    return RamlOutline;\n\t}(SC.Scrollable));\n\texports.RamlOutline = RamlOutline;\n\t/*\n\t *\n\t */\n\t// export function treeSection(input: hl.IParseResult,\n\t//                             name: string,\n\t//                             icon: UI.Icon,\n\t//                             filterFunc: (x:hl.IHighLevelNode)=>boolean,\n\t//                             l: UI.ISelectionListener<any>,\n\t//                             opener: (x:hl.IParseResult)=>void=null) : UI.TreePanel<any,any> {\n\t//\n\t//     var v = UI.treeViewerSection(name,icon,input,x=>getChildren(x).filter(x=>filterFunc(<hl.IHighLevelNode> x)),new HLRenderer(opener));\n\t//\n\t//     v.viewer.setBasicLabelFunction(x=>x ? x.name() : '');\n\t//     v.viewer.setKeyProvider({\n\t//         key:(p:hl.IParseResult):string=>{\n\t//             return \"\"+p.lowLevel().start();\n\t//         }\n\t//\n\t//     });\n\t//     v.viewer.addSelectionListener(l)\n\t//     return v;\n\t// }\n\tvar HLNodeType;\n\t(function (HLNodeType) {\n\t    HLNodeType[HLNodeType[\"Resource\"] = 0] = \"Resource\";\n\t    HLNodeType[HLNodeType[\"Schema\"] = 1] = \"Schema\";\n\t    HLNodeType[HLNodeType[\"Type\"] = 2] = \"Type\";\n\t    HLNodeType[HLNodeType[\"Trait\"] = 3] = \"Trait\";\n\t    HLNodeType[HLNodeType[\"Unknown\"] = 4] = \"Unknown\";\n\t})(HLNodeType || (HLNodeType = {}));\n\t// function getNodeType(node: hl.IHighLevelNode): HLNodeType {\n\t//     if (outlineCommon.isResource(node)) return HLNodeType.Resource;\n\t//     else if (outlineCommon.isOther(node)) return HLNodeType.Trait;\n\t//     else if (outlineCommon.isResourceTypeOrTrait(node)) return HLNodeType.Type;\n\t//     else if (outlineCommon.isSchemaOrType(node)) return HLNodeType.Schema;\n\t//     else return HLNodeType.Unknown;\n\t// }\n\t// function isApi(p: hl.IHighLevelNode) {\n\t//     var pc=p.definition().key();\n\t//     return pc===universes.Universe08.Api||pc===universes.Universe10.Api;\n\t// }\n\t// function isDocumentation(p: hl.IHighLevelNode) {\n\t//     var pc=p.definition().key();\n\t//     return ( pc=== universes.Universe08.DocumentationItem||pc===universes.Universe10.DocumentationItem);\n\t// }\n\tfunction fullStructurePath(model) {\n\t    if (!model)\n\t        return \"\";\n\t    return model.text;\n\t    // var node = model.getSource();\n\t    // return fullPath(<any>node);\n\t}\n\t//\n\t// function fullPath(node: hl.IParseResult) {\n\t//     if (node == null) return \"\";\n\t//     else return fullPath(node.parent()) + \"/\" + node.name();\n\t// }\n\tfunction simpleTree(input, selectionListener, categoryName, opener) {\n\t    if (opener === void 0) { opener = null; }\n\t    var viewer = UI.treeViewer(function (x) {\n\t        return x.children;\n\t    }, new HLRenderer(opener), fullStructurePath);\n\t    viewer.setBasicLabelFunction(function (x) { return x.text; });\n\t    viewer.setKeyProvider({ key: function (x) { return x.key; } });\n\t    viewer.addSelectionListener(selectionListener);\n\t    viewer.getBinding().set(input);\n\t    return viewer;\n\t}\n\tfunction createTree(structure, selectionListener, opener) {\n\t    if (opener === void 0) { opener = null; }\n\t    if (!structure) {\n\t        return new UI.TabFolder();\n\t    }\n\t    var resourcesModel = structure[ramlServer.StructureCategories[ramlServer.StructureCategories.ResourcesCategory]];\n\t    var typesModel = structure[ramlServer.StructureCategories[ramlServer.StructureCategories.SchemasAndTypesCategory]];\n\t    var traitsModel = structure[ramlServer.StructureCategories[ramlServer.StructureCategories.ResourceTypesAndTraitsCategory]];\n\t    var otherModel = structure[ramlServer.StructureCategories[ramlServer.StructureCategories.OtherCategory]];\n\t    // var resourcesModel = p!=null?ramlOutline.getStructure(outlineCommon.ResourcesCategory):null;\n\t    // var typesModel = p!=null?ramlOutline.getStructure(outlineCommon.SchemasAndTypesCategory):null;\n\t    // var traitsModel = p!=null?ramlOutline.getStructure(outlineCommon.ResourceTypesAndTraitsCategory):null;\n\t    // var otherModel = p!=null?ramlOutline.getStructure(outlineCommon.OtherCategory):null;\n\t    var outline = resourcesModel != null ? simpleTree(resourcesModel, { selectionChanged: selectionListener }, ramlServer.StructureCategories[ramlServer.StructureCategories.ResourcesCategory], opener) : null;\n\t    var schemas = typesModel != null ? simpleTree(typesModel, { selectionChanged: selectionListener }, ramlServer.StructureCategories[ramlServer.StructureCategories.SchemasAndTypesCategory], opener) : null;\n\t    var types = traitsModel != null ? simpleTree(traitsModel, { selectionChanged: selectionListener }, ramlServer.StructureCategories[ramlServer.StructureCategories.ResourceTypesAndTraitsCategory], opener) : null;\n\t    var other = otherModel != null ? simpleTree(otherModel, { selectionChanged: selectionListener }, ramlServer.StructureCategories[ramlServer.StructureCategories.OtherCategory], opener) : null;\n\t    var folder = new UI.TabFolder();\n\t    folder.add(\"Resources\", UI.Icon.SEARCH, outline, 'raml-icon-custom');\n\t    folder.add(\"Schemas&Types\", UI.Icon.SEARCH, schemas, 'raml-icon-custom');\n\t    folder.add(\"ResourceTypes&Traits\", UI.Icon.SEARCH, types, 'raml-icon-custom');\n\t    folder.add(\"Other\", UI.Icon.SEARCH, other, 'raml-icon-custom');\n\t    folder.setSelectedIndex(0);\n\t    folder.setOnSelected(function () {\n\t        var selectedTab = folder.selectedComponent();\n\t        if (selectedTab) {\n\t            var selection = selectedTab.getSelection();\n\t            if (selection && selection.elements && selection.elements.length > 0) {\n\t                selectionListener(new UI.SelectionChangedEvent(selectedTab, null, selection));\n\t            }\n\t            selectedTab.customizePanel(true);\n\t        }\n\t    });\n\t    return folder;\n\t}\n\texports.createTree = createTree;\n\tvar HLRenderer = /** @class */ (function () {\n\t    function HLRenderer(opener) {\n\t        this.opener = opener;\n\t    }\n\t    HLRenderer.prototype.iconNameToIconEnum = function (iconName) {\n\t        if (!iconName)\n\t            return null;\n\t        return UI.Icon[iconName];\n\t    };\n\t    HLRenderer.prototype.textHighlightNameToTextClass = function (highlightName) {\n\t        if (!highlightName)\n\t            return null;\n\t        return UI.TextClasses[highlightName];\n\t    };\n\t    HLRenderer.prototype.render = function (model) {\n\t        try {\n\t            // if (ramlOutline.isTypedStructureNode(model)\n\t            //     && (<ramlOutline.TypedStructureNode>model).type\n\t            //     && (<ramlOutline.TypedStructureNode>model).type == ramlOutline.NodeType.ATTRIBUTE) {\n\t            //\n\t            //     var attr = <hl.IAttribute>(<any>model.getSource());\n\t            //\n\t            //     //TODO check if we really need custom selection here, otherwise the whole \"is attribute\" condition is redundant\n\t            //     return UI.hc(UI.label(model.text), UI.a(\"\", x=> {\n\t            //         var p1 = editorTools.aquireManager().getCurrentEditor().\n\t            //             getBuffer().positionForCharacterIndex(attr.lowLevel().start());\n\t            //         var p2 = editorTools.aquireManager().getCurrentEditor().\n\t            //             getBuffer().positionForCharacterIndex(attr.lowLevel().end());\n\t            //         editorTools.aquireManager().getCurrentEditor().setSelectedBufferRange({ start: p1, end: p1 }, {});\n\t            //\n\t            //     }, UI.Icon.ARROW_SMALL_LEFT, null, null));\n\t            //\n\t            // }\n\t            var icon = UI.Icon.DASH;\n\t            var highLight = UI.TextClasses.NORMAL;\n\t            if (this.iconNameToIconEnum(model.icon)) {\n\t                icon = this.iconNameToIconEnum(model.icon);\n\t            }\n\t            if (this.textHighlightNameToTextClass(model.textStyle)) {\n\t                highLight = this.textHighlightNameToTextClass(model.textStyle);\n\t            }\n\t            var extraText = \"\";\n\t            var extraClass = UI.TextClasses.NORMAL;\n\t            var hc = UI.hc(UI.label(model.text, icon, highLight));\n\t            if (model.typeText) {\n\t                hc.addChild(UI.label(model.typeText, UI.Icon.NONE, UI.TextClasses.WARNING).margin(2, 0, 0, 0));\n\t            }\n\t            // if (model.getSource().lowLevel().unit()!=model.getSource().root().lowLevel().unit()){\n\t            //     highLight=UI.TextClasses.SUBTLE;\n\t            //     hc.addChild(UI.label(\"(\"+model.getSource().lowLevel().unit().path()+\")\",UI.Icon.NONE,highLight).margin(5,0,0,0));\n\t            // }\n\t            hc.addClass(\"outline\");\n\t            return hc;\n\t        }\n\t        catch (e) {\n\t            console.log(e);\n\t            return UI.hc(UI.label(\"Illegal node\", UI.Icon.ARROW_SMALL_LEFT, null, null));\n\t        }\n\t    };\n\t    return HLRenderer;\n\t}());\n\texports.HLRenderer = HLRenderer;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tfunction markOccurences(editor, occurences) {\n\t    var layer = getOccurencesLayer(editor);\n\t    layer.clear();\n\t    occurences.forEach(function (occurence) {\n\t        layer.markBufferRange(occurence);\n\t    });\n\t    editor.decorateMarkerLayer(layer, {\n\t        type: 'highlight',\n\t        class: 'raml-occurence'\n\t    });\n\t}\n\texports.markOccurences = markOccurences;\n\tfunction clearOccurences(editor) {\n\t    var layer = getOccurencesLayer(editor);\n\t    layer.clear();\n\t}\n\texports.clearOccurences = clearOccurences;\n\tfunction getOccurencesLayer(editor) {\n\t    var layerId = editor.occurencesLayerId;\n\t    var layer = layerId && editor.getMarkerLayer(layerId);\n\t    if (!layer) {\n\t        layer = editor.addMarkerLayer();\n\t    }\n\t    editor.occurencesLayerId = layer.id;\n\t    return layer;\n\t}\n\tvar MarkOccurrenceRunnable = /** @class */ (function () {\n\t    function MarkOccurrenceRunnable(editor, position) {\n\t        this.editor = editor;\n\t        this.position = position;\n\t        this.cancelled = false;\n\t        this.offset = editor.getBuffer().characterIndexForPosition(position);\n\t    }\n\t    /**\n\t     * Performs the actual business logics.\n\t     * Should resolve the promise when finished.\n\t     */\n\t    MarkOccurrenceRunnable.prototype.run = function () {\n\t        return Promise.resolve();\n\t        // return ramlServer.getNodeClientConnection().markOccurrences(this.getMarkOccurrencesPath(), this.offset)\n\t        //     .then(ranges => {\n\t        //\n\t        //         let currentPosition = this.editor.getCursorBufferPosition();\n\t        //         if (currentPosition.row != this.position.row || currentPosition.column != this.position.column) {\n\t        //             //data is outdated\n\t        //             return;\n\t        //         }\n\t        //\n\t        //         let bufferRanges: atom.Range[] = ranges.map(range=>{\n\t        //             return {\n\t        //                 start: this.editor.getBuffer().positionForCharacterIndex(range.start),\n\t        //                 end: this.editor.getBuffer().positionForCharacterIndex(range.end),\n\t        //             }\n\t        //         })\n\t        //         markOccurences(this.editor, bufferRanges);\n\t        // })\n\t    };\n\t    /**\n\t     * Performs the actual business logics synchronously.\n\t     */\n\t    MarkOccurrenceRunnable.prototype.runSynchronously = function () {\n\t    };\n\t    /**\n\t     * Whether two runnable conflict with each other.\n\t     * Must work fast as its called often.\n\t     * @param other\n\t     */\n\t    MarkOccurrenceRunnable.prototype.conflicts = function (other) {\n\t        if (!other.getMarkOccurrencesPath)\n\t            return false;\n\t        var otherPath = other.getMarkOccurrencesPath();\n\t        return this.getMarkOccurrencesPath() == otherPath;\n\t    };\n\t    /**\n\t     * Cancels the runnable. run() method should do nothing if launched later,\n\t     * if cancel is called during the run() method execution, run() should stop as soon as it can.\n\t     */\n\t    MarkOccurrenceRunnable.prototype.cancel = function () {\n\t        this.cancelled = true;\n\t    };\n\t    /**\n\t     * Whether cancel() method was called at least once.\n\t     */\n\t    MarkOccurrenceRunnable.prototype.isCanceled = function () {\n\t        return this.cancelled;\n\t    };\n\t    MarkOccurrenceRunnable.prototype.getMarkOccurrencesPath = function () {\n\t        return this.editor.getPath();\n\t    };\n\t    return MarkOccurrenceRunnable;\n\t}());\n\texports.MarkOccurrenceRunnable = MarkOccurrenceRunnable;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvcmUvbWFya09jY3VyZW5jZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG1EQUFtRDs7QUFLbkQsd0JBQStCLE1BQXdCLEVBQUUsVUFBd0I7SUFDN0UsSUFBSSxLQUFLLEdBQVEsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFNUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRWQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVM7UUFDeEIsS0FBSyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUMsQ0FBQztJQUVHLE1BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUU7UUFDckMsSUFBSSxFQUFFLFdBQVc7UUFDakIsS0FBSyxFQUFFLGdCQUFnQjtLQUMxQixDQUFDLENBQUM7QUFDUCxDQUFDO0FBYkQsd0NBYUM7QUFFRCx5QkFBZ0MsTUFBd0I7SUFDcEQsSUFBSSxLQUFLLEdBQVEsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFNUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xCLENBQUM7QUFKRCwwQ0FJQztBQUVELDRCQUE0QixNQUF3QjtJQUNoRCxJQUFJLE9BQU8sR0FBUyxNQUFPLENBQUMsaUJBQWlCLENBQUM7SUFFOUMsSUFBSSxLQUFLLEdBQUcsT0FBTyxJQUFVLE1BQU8sQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFN0QsRUFBRSxDQUFBLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ1IsS0FBSyxHQUFTLE1BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBRUssTUFBTyxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7SUFFM0MsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUNqQixDQUFDO0FBRUQ7SUFLSSxnQ0FBb0IsTUFBd0IsRUFBVSxRQUFvQjtRQUF0RCxXQUFNLEdBQU4sTUFBTSxDQUFrQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVk7UUFIbEUsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUl0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBQ0Q7OztPQUdHO0lBQ0gsb0NBQUcsR0FBSDtRQUNJLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDeEIsMEdBQTBHO1FBQzFHLHdCQUF3QjtRQUN4QixFQUFFO1FBQ0YsdUVBQXVFO1FBQ3ZFLDRHQUE0RztRQUM1RyxpQ0FBaUM7UUFDakMsc0JBQXNCO1FBQ3RCLFlBQVk7UUFDWixFQUFFO1FBQ0YsK0RBQStEO1FBQy9ELHVCQUF1QjtRQUN2Qix5RkFBeUY7UUFDekYscUZBQXFGO1FBQ3JGLGdCQUFnQjtRQUNoQixhQUFhO1FBQ2IscURBQXFEO1FBQ3JELEtBQUs7SUFDVCxDQUFDO0lBQ0Q7O09BRUc7SUFDSCxpREFBZ0IsR0FBaEI7SUFDQSxDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNILDBDQUFTLEdBQVQsVUFBVSxLQUErQjtRQUNyQyxFQUFFLENBQUMsQ0FBQyxDQUFPLEtBQU0sQ0FBQyxzQkFBc0IsQ0FBQztZQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFFdkQsSUFBSSxTQUFTLEdBQWtCLEtBQU0sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBRS9ELE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxTQUFTLENBQUM7SUFDdEQsQ0FBQztJQUNEOzs7T0FHRztJQUNILHVDQUFNLEdBQU47UUFDSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDO0lBQ0Q7O09BRUc7SUFDSCwyQ0FBVSxHQUFWO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELHVEQUFzQixHQUF0QjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFDTCw2QkFBQztBQUFELENBbEVBLEFBa0VDLElBQUE7QUFsRVksd0RBQXNCIiwiZmlsZSI6InNyYy9hdG9tL2NvcmUvbWFya09jY3VyZW5jZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy9tYWluLmQudHNcIiAvPlxuXG5pbXBvcnQgYXRvbSA9IHJlcXVpcmUoJy4uL2NvcmUvYXRvbVdyYXBwZXInKTtcbmltcG9ydCByYW1sU2VydmVyID0gcmVxdWlyZShcImFwaS1sYW5ndWFnZS1zZXJ2ZXJcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXJrT2NjdXJlbmNlcyhlZGl0b3I6IGF0b20uSVRleHRFZGl0b3IsIG9jY3VyZW5jZXM6IGF0b20uUmFuZ2VbXSkge1xuICAgIHZhciBsYXllcjogYW55ID0gZ2V0T2NjdXJlbmNlc0xheWVyKGVkaXRvcik7XG5cbiAgICBsYXllci5jbGVhcigpO1xuXG4gICAgb2NjdXJlbmNlcy5mb3JFYWNoKG9jY3VyZW5jZSA9PiB7XG4gICAgICAgIGxheWVyLm1hcmtCdWZmZXJSYW5nZShvY2N1cmVuY2UpO1xuICAgIH0pO1xuXG4gICAgKDxhbnk+ZWRpdG9yKS5kZWNvcmF0ZU1hcmtlckxheWVyKGxheWVyLCB7XG4gICAgICAgIHR5cGU6ICdoaWdobGlnaHQnLFxuICAgICAgICBjbGFzczogJ3JhbWwtb2NjdXJlbmNlJ1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJPY2N1cmVuY2VzKGVkaXRvcjogYXRvbS5JVGV4dEVkaXRvcikge1xuICAgIHZhciBsYXllcjogYW55ID0gZ2V0T2NjdXJlbmNlc0xheWVyKGVkaXRvcik7XG5cbiAgICBsYXllci5jbGVhcigpO1xufVxuXG5mdW5jdGlvbiBnZXRPY2N1cmVuY2VzTGF5ZXIoZWRpdG9yOiBhdG9tLklUZXh0RWRpdG9yKTogYW55IHtcbiAgICB2YXIgbGF5ZXJJZCA9ICg8YW55PmVkaXRvcikub2NjdXJlbmNlc0xheWVySWQ7XG5cbiAgICB2YXIgbGF5ZXIgPSBsYXllcklkICYmICg8YW55PmVkaXRvcikuZ2V0TWFya2VyTGF5ZXIobGF5ZXJJZCk7XG5cbiAgICBpZighbGF5ZXIpIHtcbiAgICAgICAgbGF5ZXIgPSAoPGFueT5lZGl0b3IpLmFkZE1hcmtlckxheWVyKCk7XG4gICAgfVxuXG4gICAgKDxhbnk+ZWRpdG9yKS5vY2N1cmVuY2VzTGF5ZXJJZCA9IGxheWVyLmlkO1xuXG4gICAgcmV0dXJuIGxheWVyO1xufVxuXG5leHBvcnQgY2xhc3MgTWFya09jY3VycmVuY2VSdW5uYWJsZSBpbXBsZW1lbnRzIHJhbWxTZXJ2ZXIuUnVubmFibGU8dm9pZD4ge1xuXG4gICAgcHJpdmF0ZSBjYW5jZWxsZWQgPSBmYWxzZTtcbiAgICBwcml2YXRlIG9mZnNldDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlZGl0b3I6IGF0b20uSVRleHRFZGl0b3IsIHByaXZhdGUgcG9zaXRpb246IGF0b20uUG9pbnQpIHtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBlZGl0b3IuZ2V0QnVmZmVyKCkuY2hhcmFjdGVySW5kZXhGb3JQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIHRoZSBhY3R1YWwgYnVzaW5lc3MgbG9naWNzLlxuICAgICAqIFNob3VsZCByZXNvbHZlIHRoZSBwcm9taXNlIHdoZW4gZmluaXNoZWQuXG4gICAgICovXG4gICAgcnVuKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgLy8gcmV0dXJuIHJhbWxTZXJ2ZXIuZ2V0Tm9kZUNsaWVudENvbm5lY3Rpb24oKS5tYXJrT2NjdXJyZW5jZXModGhpcy5nZXRNYXJrT2NjdXJyZW5jZXNQYXRoKCksIHRoaXMub2Zmc2V0KVxuICAgICAgICAvLyAgICAgLnRoZW4ocmFuZ2VzID0+IHtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgICAgICBsZXQgY3VycmVudFBvc2l0aW9uID0gdGhpcy5lZGl0b3IuZ2V0Q3Vyc29yQnVmZmVyUG9zaXRpb24oKTtcbiAgICAgICAgLy8gICAgICAgICBpZiAoY3VycmVudFBvc2l0aW9uLnJvdyAhPSB0aGlzLnBvc2l0aW9uLnJvdyB8fCBjdXJyZW50UG9zaXRpb24uY29sdW1uICE9IHRoaXMucG9zaXRpb24uY29sdW1uKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgIC8vZGF0YSBpcyBvdXRkYXRlZFxuICAgICAgICAvLyAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgIGxldCBidWZmZXJSYW5nZXM6IGF0b20uUmFuZ2VbXSA9IHJhbmdlcy5tYXAocmFuZ2U9PntcbiAgICAgICAgLy8gICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHN0YXJ0OiB0aGlzLmVkaXRvci5nZXRCdWZmZXIoKS5wb3NpdGlvbkZvckNoYXJhY3RlckluZGV4KHJhbmdlLnN0YXJ0KSxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGVuZDogdGhpcy5lZGl0b3IuZ2V0QnVmZmVyKCkucG9zaXRpb25Gb3JDaGFyYWN0ZXJJbmRleChyYW5nZS5lbmQpLFxuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfSlcbiAgICAgICAgLy8gICAgICAgICBtYXJrT2NjdXJlbmNlcyh0aGlzLmVkaXRvciwgYnVmZmVyUmFuZ2VzKTtcbiAgICAgICAgLy8gfSlcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgdGhlIGFjdHVhbCBidXNpbmVzcyBsb2dpY3Mgc3luY2hyb25vdXNseS5cbiAgICAgKi9cbiAgICBydW5TeW5jaHJvbm91c2x5KCk6IHZvaWQge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHR3byBydW5uYWJsZSBjb25mbGljdCB3aXRoIGVhY2ggb3RoZXIuXG4gICAgICogTXVzdCB3b3JrIGZhc3QgYXMgaXRzIGNhbGxlZCBvZnRlbi5cbiAgICAgKiBAcGFyYW0gb3RoZXJcbiAgICAgKi9cbiAgICBjb25mbGljdHMob3RoZXI6IHJhbWxTZXJ2ZXIuUnVubmFibGU8YW55Pik6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoISg8YW55Pm90aGVyKS5nZXRNYXJrT2NjdXJyZW5jZXNQYXRoKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgbGV0IG90aGVyUGF0aCA6IHN0cmluZyA9ICg8YW55Pm90aGVyKS5nZXRNYXJrT2NjdXJyZW5jZXNQYXRoKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWFya09jY3VycmVuY2VzUGF0aCgpID09IG90aGVyUGF0aDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VscyB0aGUgcnVubmFibGUuIHJ1bigpIG1ldGhvZCBzaG91bGQgZG8gbm90aGluZyBpZiBsYXVuY2hlZCBsYXRlcixcbiAgICAgKiBpZiBjYW5jZWwgaXMgY2FsbGVkIGR1cmluZyB0aGUgcnVuKCkgbWV0aG9kIGV4ZWN1dGlvbiwgcnVuKCkgc2hvdWxkIHN0b3AgYXMgc29vbiBhcyBpdCBjYW4uXG4gICAgICovXG4gICAgY2FuY2VsKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgY2FuY2VsKCkgbWV0aG9kIHdhcyBjYWxsZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgKi9cbiAgICBpc0NhbmNlbGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW5jZWxsZWQ7XG4gICAgfVxuXG4gICAgZ2V0TWFya09jY3VycmVuY2VzUGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmdldFBhdGgoKTtcbiAgICB9XG59XG5cbiJdfQ==\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar qcui = __webpack_require__(30);\n\tvar atom = __webpack_require__(3);\n\t// import contextActions = require(\"raml-actions\")\n\tvar cc = __webpack_require__(31);\n\tvar et = __webpack_require__(1);\n\t/*\n\t * Quick command is a command object that stores command info, body and filtering function\n\t */\n\tvar QuickCommand = /** @class */ (function () {\n\t    function QuickCommand(id, title, command, priority, when) {\n\t        this.id = id;\n\t        this.title = title;\n\t        this.command = command;\n\t        this.priority = priority;\n\t        this.when = when;\n\t    }\n\t    QuickCommand.prototype.registerAsAtomCommand = function (target) {\n\t        if (this.atomCommand && this.atomCommand.disposed == false)\n\t            this.atomCommand.dispose();\n\t        this.atomCommand = atom.commands.add(target, this.id, this.command);\n\t    };\n\t    QuickCommand.prototype.dispose = function () {\n\t        if (this.atomCommand && this.atomCommand.disposed == false)\n\t            this.atomCommand.dispose();\n\t        cm.unregister(this);\n\t    };\n\t    return QuickCommand;\n\t}());\n\texports.QuickCommand = QuickCommand;\n\t/*\n\t * Command manager manages quick commands.\n\t * All quick commands should be registered here.\n\t * For usage example, see registerCommands\n\t */\n\tvar CommandManager = /** @class */ (function () {\n\t    function CommandManager() {\n\t        this.commands = {};\n\t        this.panel = new qcui.SelectListView(function (command) { return command.command(); }, function (command) { return command.title; }, 'title');\n\t    }\n\t    CommandManager.prototype.register = function (cmd) {\n\t        if (this.commands[cmd.id] != null)\n\t            this.unregister(cmd.id);\n\t        this.commands[cmd.id] = cmd;\n\t        return cmd;\n\t    };\n\t    CommandManager.prototype.unregister = function (cmd) {\n\t        if (typeof (cmd) == \"string\")\n\t            this.unregister(this.commands[cmd]);\n\t        var qcmd = cmd;\n\t        if (qcmd == null)\n\t            return null;\n\t        delete this.commands[qcmd.id];\n\t        return qcmd;\n\t    };\n\t    CommandManager.prototype.add = function (id, title, command, when, priority, atomTarget) {\n\t        var cmd = new QuickCommand(id, title, command, priority ? priority : 0, when ? when : function () { return true; });\n\t        if (atomTarget)\n\t            cmd.registerAsAtomCommand(atomTarget);\n\t        this.register(cmd);\n\t        return cmd;\n\t    };\n\t    CommandManager.prototype.show = function (predicate) {\n\t        var joinedCommands = {};\n\t        for (var commandId in this.commands) {\n\t            joinedCommands[commandId] = this.commands[commandId];\n\t        }\n\t        this.getDynamicCommands().forEach(function (currentCommand) {\n\t            joinedCommands[currentCommand.id] = currentCommand;\n\t        });\n\t        var list = Object.keys(joinedCommands)\n\t            .map(function (key) { return joinedCommands[key]; })\n\t            .sort(function (a, b) { return b.priority - a.priority; })\n\t            .filter(function (cmd) { return cmd.when(); });\n\t        if (predicate)\n\t            list = list.filter(predicate);\n\t        this.panel.show(list);\n\t    };\n\t    CommandManager.prototype.getDynamicCommands = function () {\n\t        var result = [];\n\t        // var currentActions = contextActions.calculateCurrentActions(contextActions.TARGET_RAML_EDITOR_NODE)\n\t        //\n\t        // currentActions.forEach(action => {\n\t        // \tvar convertedQuickCommand : QuickCommand = new QuickCommand(action.name,\n\t        // \t\taction.label?action.label:action.name, action.onClick, 1, ()=>{return true})\n\t        //\n\t        // \tvar cmd : any = convertedQuickCommand\n\t        // \tcmd['__module__'] = 'editorTools'\n\t        // \tresult.push(convertedQuickCommand)\n\t        // })\n\t        return result;\n\t    };\n\t    return CommandManager;\n\t}());\n\texports.CommandManager = CommandManager;\n\tvar cm;\n\t/*\n\t * Always return working copy of manager.\n\t */\n\tfunction manager() {\n\t    if (!cm)\n\t        cm = new CommandManager();\n\t    return cm;\n\t}\n\texports.manager = manager;\n\t/*\n\t * function for RAML -> Show Quick Commands (^Q)\n\t */\n\tfunction showCommands() {\n\t    manager().show();\n\t}\n\texports.showCommands = showCommands;\n\t/*\n\t * registerCommands is called at the plugin initialization for registering global commands\n\t */\n\tfunction registerCommands() {\n\t    cc.registerQuickCommands(manager());\n\t    cm.add('aml-workbench:editor-tools', 'Show Editor Tools', function () { return et.initEditorTools(); }, function () { return et.editorToolsStatus() == false; });\n\t}\n\texports.registerCommands = registerCommands;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar atom = __webpack_require__(3);\n\tvar aspv = __webpack_require__(7);\n\t/*\n\t * List viewer for commands. accepts confirmation function, label function and key for fuzzy filtering.\n\t */\n\tvar SelectListView = /** @class */ (function (_super) {\n\t    __extends(SelectListView, _super);\n\t    function SelectListView(_confirmed, label, filterKey) {\n\t        if (filterKey === void 0) { filterKey = ''; }\n\t        var _this = _super.call(this, []) || this;\n\t        _this._confirmed = _confirmed;\n\t        _this.label = label;\n\t        _this.filterKey = filterKey;\n\t        return _this;\n\t    }\n\t    SelectListView.prototype.getFilterKey = function () { return this.filterKey; };\n\t    SelectListView.prototype.viewForItem = function (item) {\n\t        return \"<li>\" + this.label(item) + \"</li>\";\n\t    };\n\t    SelectListView.prototype.cancel = function () {\n\t        this.panel.hide();\n\t        _super.prototype.cancel.call(this);\n\t    };\n\t    SelectListView.prototype.hide = function () {\n\t        if (!this.panel)\n\t            return;\n\t        this.panel.hide();\n\t    };\n\t    SelectListView.prototype.confirmed = function (item) {\n\t        this._confirmed(item);\n\t        this.hide();\n\t        return this.getSelectedItemView();\n\t    };\n\t    SelectListView.prototype.show = function (commands) {\n\t        this.storeFocusedElement();\n\t        if (!this.panel)\n\t            this.panel = atom.workspace.addModalPanel({ item: this });\n\t        this.setItems(commands);\n\t        this.panel.show();\n\t        this.focusFilterEditor();\n\t    };\n\t    return SelectListView;\n\t}(aspv.SelectListView));\n\texports.SelectListView = SelectListView;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL3F1aWNrLWNvbW1hbmRzL3F1aWNrLWNvbW1hbmRzLXVpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxtREFBbUQ7Ozs7Ozs7Ozs7OztBQUVuRCwwQ0FBNkM7QUFDN0MsMkNBQThDO0FBRzlDOztHQUVHO0FBQ0g7SUFBdUMsa0NBQW1CO0lBRXhELHdCQUFtQixVQUE2QixFQUFVLEtBQXFCLEVBQVUsU0FBc0I7UUFBdEIsMEJBQUEsRUFBQSxjQUFzQjtRQUEvRyxZQUNFLGtCQUFNLEVBQUUsQ0FBQyxTQUNWO1FBRmtCLGdCQUFVLEdBQVYsVUFBVSxDQUFtQjtRQUFVLFdBQUssR0FBTCxLQUFLLENBQWdCO1FBQVUsZUFBUyxHQUFULFNBQVMsQ0FBYTs7SUFFL0csQ0FBQztJQUVELHFDQUFZLEdBQVosY0FBaUIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBRXpDLG9DQUFXLEdBQVgsVUFBWSxJQUFJO1FBQ2QsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQztJQUM3QyxDQUFDO0lBRUQsK0JBQU0sR0FBTjtRQUNFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbEIsaUJBQU0sTUFBTSxXQUFFLENBQUM7SUFDakIsQ0FBQztJQUVELDZCQUFJLEdBQUo7UUFDRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFBQyxNQUFNLENBQUM7UUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsa0NBQVMsR0FBVCxVQUFVLElBQUk7UUFDWixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBSUQsNkJBQUksR0FBSixVQUFLLFFBQWE7UUFDaEIsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxFQUFFLElBQUksRUFBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2hGLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQXJDQSxBQXFDQyxDQXJDc0MsSUFBSSxDQUFDLGNBQWMsR0FxQ3pEO0FBckNZLHdDQUFjIiwiZmlsZSI6InNyYy9hdG9tL3F1aWNrLWNvbW1hbmRzL3F1aWNrLWNvbW1hbmRzLXVpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvbWFpbi5kLnRzXCIgLz5cblxuaW1wb3J0IGF0b20gPSByZXF1aXJlKCcuLi9jb3JlL2F0b21XcmFwcGVyJyk7XG5pbXBvcnQgYXNwdiA9IHJlcXVpcmUoJ2F0b20tc3BhY2UtcGVuLXZpZXdzJyk7XG5cblxuLypcbiAqIExpc3Qgdmlld2VyIGZvciBjb21tYW5kcy4gYWNjZXB0cyBjb25maXJtYXRpb24gZnVuY3Rpb24sIGxhYmVsIGZ1bmN0aW9uIGFuZCBrZXkgZm9yIGZ1enp5IGZpbHRlcmluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNlbGVjdExpc3RWaWV3PFQ+IGV4dGVuZHMgYXNwdi5TZWxlY3RMaXN0VmlldyB7XG5cbiAgY29uc3RydWN0b3IocHVibGljIF9jb25maXJtZWQ6IChpdGVtOiBUKSA9PiB2b2lkLCBwcml2YXRlIGxhYmVsOiAoaXRlbTogVCk9PmFueSwgcHJpdmF0ZSBmaWx0ZXJLZXk6IHN0cmluZyA9ICcnKSB7XG4gICAgc3VwZXIoW10pO1xuICB9XG5cbiAgZ2V0RmlsdGVyS2V5KCkgeyByZXR1cm4gdGhpcy5maWx0ZXJLZXk7IH1cblxuICB2aWV3Rm9ySXRlbShpdGVtKSB7XG4gICAgcmV0dXJuIFwiPGxpPlwiICsgdGhpcy5sYWJlbChpdGVtKSArIFwiPC9saT5cIjtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLnBhbmVsLmhpZGUoKTtcbiAgICBzdXBlci5jYW5jZWwoKTtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLnBhbmVsKSByZXR1cm47XG4gICAgdGhpcy5wYW5lbC5oaWRlKCk7XG4gIH1cblxuICBjb25maXJtZWQoaXRlbSkge1xuICAgIHRoaXMuX2NvbmZpcm1lZChpdGVtKTtcbiAgICB0aGlzLmhpZGUoKTtcbiAgICByZXR1cm4gdGhpcy5nZXRTZWxlY3RlZEl0ZW1WaWV3KCk7XG4gIH1cblxuICBwcml2YXRlIHBhbmVsOiBhbnk7XG5cbiAgc2hvdyhjb21tYW5kczogVFtdKSB7XG4gICAgdGhpcy5zdG9yZUZvY3VzZWRFbGVtZW50KCk7XG4gICAgaWYgKCF0aGlzLnBhbmVsKSB0aGlzLnBhbmVsID0gYXRvbS53b3Jrc3BhY2UuYWRkTW9kYWxQYW5lbCh7IGl0ZW06IDxhbnk+dGhpcyB9KTtcbiAgICB0aGlzLnNldEl0ZW1zKGNvbW1hbmRzKTtcbiAgICB0aGlzLnBhbmVsLnNob3coKTtcbiAgICB0aGlzLmZvY3VzRmlsdGVyRWRpdG9yKCk7XG4gIH1cbn1cbiJdfQ==\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t// import dialogs=require(\"../dialogs/dialogs\")\n\t// import path=require('path')\n\t// import rp=require(\"raml-1-parser\")\n\t//\n\t// import hl=rp.hl;\n\t// import universe = rp.universes;\n\t// import services =rp.ds;\n\t//\n\t// import universeHelpers =rp.universeHelpers;\n\t//\n\t// class AddNewResourceStateCalculator extends contextActions.CommonASTStateCalculator {\n\t//     calculate () : any {\n\t//\n\t//         //usually we dont need to check the editor, CommonASTStateCalculator does this for us\n\t//         //but in this case we accept null generalState, so double-checking for opened file\n\t//         var editor=this.getEditor()\n\t//         if (!editor) return null\n\t//\n\t//         if (path.extname(editor.getPath()) != '.raml') return null\n\t//\n\t//         var generalState = this.getGeneralState()\n\t//         if (!generalState) return null;\n\t//\n\t//         var highLevelNode = <hl.IHighLevelNode><any>generalState.node;\n\t//\n\t//         if (!universeHelpers.isResourceType(highLevelNode.definition()) &&\n\t//             !universeHelpers.isApiType(highLevelNode.definition()))\n\t//             return null\n\t//\n\t//         if(!highLevelNode.lowLevel()) {\n\t//             return null;\n\t//         }\n\t//\n\t//         return highLevelNode\n\t//     }\n\t// }\n\t//\n\t// class CreateNewAPIStateCalculator extends contextActions.CommonASTStateCalculator {\n\t//     calculate () : any {\n\t//\n\t//         var generalState = this.getGeneralState()\n\t//         if (generalState) return null\n\t//\n\t//         var editor=this.getEditor()\n\t//         if (!editor) return null\n\t//\n\t//         if (path.extname(editor.getPath()) != '.raml') return null\n\t//\n\t//         var text = editor.getText().trim()\n\t//         if (text != \"\") return null\n\t//\n\t//         return {}\n\t//     }\n\t// }\n\t//\n\t//\n\t// export function getResourceParent(node: hl.IHighLevelNode) {\n\t//     if (!node || !node.property()) return null;\n\t//     if ((universeHelpers.isResourcesProperty(node.property()) || universeHelpers.isResourceTypesProperty(node.property()))\n\t//         && (universeHelpers.isResourceType(node.definition()) || universeHelpers.isResourceTypeType(node.definition()))) return node;\n\t//     return getResourceParent(node.parent());\n\t// }\n\t// function getMethodParent(node: hl.IHighLevelNode) {\n\t//     if (!node || !node.property()) return null;\n\t//     if ((universeHelpers.isMethodType(node.definition())||universeHelpers.isTraitType(node.definition()))&&!node.definition().getAdapter(services.RAMLService).isUserDefined()){\n\t//         return node;\n\t//     }\n\t//     return null;\n\t// }\n\t// function getParent(node: hl.IHighLevelNode,name:string) {\n\t//     if (!node || !node.property()) return null;\n\t//     if ((node.definition().isAssignableFrom(name))){\n\t//         return node;\n\t//     }\n\t//     return null;\n\t// }\n\t//\n\t// function getResourceParentOrRoot(node: hl.IHighLevelNode) {\n\t//     var rp = getResourceParent(node);\n\t//     return rp ? rp : editorTools.aquireManager().ast;\n\t// }\n\t//\n\t// export function toResource(node: hl.IHighLevelNode) {\n\t//     if (!node || !node.property()) return null;\n\t//\n\t//     if ((universeHelpers.isResourcesProperty(node.property()) || universeHelpers.isResourceTypesProperty(node.property()))\n\t//         && (universeHelpers.isResourceType(node.definition()) || universeHelpers.isResourceTypeType(node.definition()))) return node;\n\t//\n\t//     return null;\n\t// }\n\t//\n\tfunction registerQuickCommands(cm) {\n\t    //     if (!editorTools.aquireManager()) editorTools.initEditorTools(false);\n\t    //\n\t    //     var commands = [\n\t    //         //cm.add( 'raml-labs:re-parse',\n\t    //         //    \"Parse current file again\",\n\t    //         //    () => {\n\t    //         //        editorTools.aquireManager().doParse(editorTools.aquireManager().getCurrentEditor().getPath());\n\t    //         //        editorTools.aquireManager().getView().forEachViewer(viewer=>viewer.clear());\n\t    //         //        editorTools.aquireManager().getView().setUnit(editorTools.aquireManager().ast, true); },\n\t    //         //    () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && editorTools.aquireManager().ast != null,\n\t    //         //    -100)\n\t    //\n\t    //     ];\n\t    //\n\t    //     commands.forEach(x=>x['__module__'] = 'editorTools');\n\t    //\n\t    //     contextActions.addAction({\n\t    //         name : \"Add new resource\",\n\t    //         target : contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         category : [\"Add new...\"],\n\t    //         onClick : state=>dialogs.newResource(editorTools.aquireManager().getSelectedNode()),\n\t    //         stateCalculator : new AddNewResourceStateCalculator(),\n\t    //         shouldDisplay : state=>state != null\n\t    //     })\n\t    //\n\t    //     contextActions.addAction({\n\t    //         name : \"Create new API\",\n\t    //         target : contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         category : [\"Add new...\"],\n\t    //         onClick : state=>dialogs.newApi(),\n\t    //         stateCalculator : new CreateNewAPIStateCalculator(),\n\t    //         shouldDisplay : state=>state != null\n\t    //     })\n\t    //\n\t    //     contextActions.addSimpleAction(\"Add new method\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newMethod(toResource(editorTools.aquireManager().getSelectedNode())),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && toResource(editorTools.aquireManager().getSelectedNode()) != null);\n\t    //\n\t    //     contextActions.addSimpleAction(\"Create new URI Parameter\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newNode(toResource(editorTools.aquireManager().getSelectedNode()),\"Create new URI Parameter\",\"uriParameters\"),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (toResource(editorTools.aquireManager().getSelectedNode()) != null));\n\t    //\n\t    //     contextActions.addSimpleAction(\"Create new Query Parameter\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newNode(getMethodParent(editorTools.aquireManager().getSelectedNode()),\"Create new Query Parameter\",\"queryParameters\"),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getMethodParent(editorTools.aquireManager().getSelectedNode()) != null));\n\t    //\n\t    //     contextActions.addSimpleAction(\"Create new Header\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newNode(getMethodParent(editorTools.aquireManager().getSelectedNode()),\"Create new Header\",\"headers\"),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getMethodParent(editorTools.aquireManager().getSelectedNode()) != null));\n\t    //\n\t    //     contextActions.addSimpleAction(\"Create new Response Header\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newNode(getParent(editorTools.aquireManager().getSelectedNode(),\"Response\"),\"Create new Header\",\"headers\"),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getParent(editorTools.aquireManager().getSelectedNode(),\"Response\" )!= null));\n\t    //     contextActions.addSimpleAction(\"Create new Response Body\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newNode(getParent(editorTools.aquireManager().getSelectedNode(),\"Response\"),\"Create new Response Body\",\"body\"),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getParent(editorTools.aquireManager().getSelectedNode(),\"Response\" )!= null));\n\t    //     contextActions.addSimpleAction(\"Create new Property\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newNode(getParent(editorTools.aquireManager().getSelectedNode(),\"ObjectTypeDeclaration\"),\"Create new Property\",\"properties\"),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getParent(editorTools.aquireManager().getSelectedNode(),\"ObjectTypeDeclaration\" )!= null));\n\t    //\n\t    //     contextActions.addSimpleAction(\"Create new Body\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newNode(getMethodParent(editorTools.aquireManager().getSelectedNode()),\"Create new Body\",\"body\"),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getMethodParent(editorTools.aquireManager().getSelectedNode()) != null));\n\t    //     contextActions.addSimpleAction(\"Create new Response\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n\t    //         () => dialogs.newNode(getMethodParent(editorTools.aquireManager().getSelectedNode()),\"Create new Response\",\"responses\",\"200\"),\n\t    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getMethodParent(editorTools.aquireManager().getSelectedNode()) != null));\n\t}\n\texports.registerQuickCommands = registerQuickCommands;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t// import suggestions = require('raml-suggestions');\n\tvar ramlServer = __webpack_require__(17);\n\t// import sharedAstInitializerInterfaces = require('../shared-ast-initializer-interfaces');\n\texports.selector = '.source.raml, .source.sjson, .source.syaml';\n\texports.disableForSelector = '.text.html .comment';\n\texports.filterSuggestions = true;\n\texports.inclusionPriority = 1;\n\texports.excludeLowerPriority = true;\n\t// export function initialize(astProvider : sharedAstInitializerInterfaces.IASTProvider) {\n\t//     suggestions.setDefaultASTProvider(<any>astProvider);\n\t// }\n\tfunction onDidInsertSuggestion(event) {\n\t    var offset = event.editor.getBuffer().characterIndexForPosition(event.triggerPosition);\n\t    if (event.suggestion.annotation) {\n\t        var txt = event.editor.getBuffer().getText();\n\t        for (var i = offset; i < txt.length; i++) {\n\t            var c = txt.charAt(i);\n\t            if (c == ')') {\n\t                offset = i + 1;\n\t                break;\n\t            }\n\t            if (c == '\\r' || c == '\\n') {\n\t                return;\n\t            }\n\t        }\n\t        var newPos = event.editor.getBuffer().positionForCharacterIndex(offset);\n\t        event.editor.getBuffer().insert(newPos, ':');\n\t        return;\n\t    }\n\t    if ((event.suggestion.replacementPrefix && event.suggestion.extra) || event.suggestion.extra == \"%\") {\n\t        var newPos = event.editor.getBuffer().positionForCharacterIndex(offset - event.suggestion.replacementPrefix.length);\n\t        event.editor.getBuffer().insert(newPos, event.suggestion.extra);\n\t    }\n\t    else {\n\t        //This actually looks exactly like a previous case but typing it as a separate case for now TODO\n\t        if (event.suggestion.extra == \" \") {\n\t            var newPos = event.editor.getBuffer().positionForCharacterIndex(offset);\n\t            event.editor.getBuffer().insert(newPos, event.suggestion.extra);\n\t        }\n\t        //FIXME\n\t        if (event.suggestion.extra == \" { \") {\n\t            var newPos = event.editor.getBuffer().positionForCharacterIndex(offset);\n\t            event.editor.getBuffer().insert(newPos, event.suggestion.extra);\n\t        }\n\t        if (event.suggestion.extra && event.suggestion.extra.indexOf(\"!include\") != -1) {\n\t            var newPos = event.editor.getBuffer().positionForCharacterIndex(offset);\n\t            event.editor.getBuffer().insert(newPos, event.suggestion.extra);\n\t        }\n\t    }\n\t}\n\texports.onDidInsertSuggestion = onDidInsertSuggestion;\n\t// class FSProvider implements suggestions.IFSProvider {\n\t//     contentDirName(content: suggestions.IEditorStateProvider): string {\n\t//         var contentPath = content.getPath();\n\t//\n\t//         return path.dirname(contentPath);\n\t//     }\n\t//\n\t//     dirName(childPath: string): string {\n\t//         return path.dirname(childPath);\n\t//     }\n\t//\n\t//     exists(checkPath: string): boolean {\n\t//         return fs.existsSync(checkPath);\n\t//     }\n\t//\n\t//     resolve(contextPath: string, relativePath: string): string {\n\t//         return path.resolve(contextPath, relativePath);\n\t//     }\n\t//\n\t//     isDirectory(dirPath: string): boolean {\n\t//         var stat = fs.statSync(dirPath);\n\t//\n\t//         return stat && stat.isDirectory();\n\t//     }\n\t//\n\t//     readDir(dirPath: string): string[] {\n\t//         return fs.readdirSync(dirPath);\n\t//     }\n\t//\n\t//     existsAsync(path: string): Promise<boolean> {\n\t//         return new Promise(resolve => {\n\t//             fs.exists(path, (result) => {resolve(result)})\n\t//         });\n\t//     }\n\t//\n\t//     /**\n\t//      * Returns directory content list.\n\t//      * @param fullPath\n\t//      */\n\t//     readDirAsync(path: string): Promise<string[]> {\n\t//         return new Promise(resolve => {\n\t//             fs.readdir(path, (err, result) => {resolve(result)})\n\t//         });\n\t//     }\n\t//\n\t//     /**\n\t//      * Check whether the path points to a directory.\n\t//      * @param fullPath\n\t//      */\n\t//     isDirectoryAsync(path: string): Promise<boolean> {\n\t//         return new Promise(resolve => {\n\t//             fs.stat(path, (err, stats) => {resolve(stats.isDirectory())})\n\t//         });\n\t//     }\n\t// }\n\t// class AtomEditorState implements suggestions.IEditorStateProvider {\n\t//     textEditor: AtomCore.IEditor;\n\t//\n\t//     constructor(textEditor: AtomCore.IEditor,private request: AtomCompletionRequest) {\n\t//         this.textEditor = textEditor;\n\t//     }\n\t//\n\t//     getText(): string {\n\t//         return this.textEditor.getBuffer().getText();\n\t//     }\n\t//\n\t//     getPath(): string {\n\t//         return this.textEditor.getPath();\n\t//     }\n\t//\n\t//     getBaseName(): string {\n\t//         return path.basename(this.getPath());\n\t//     }\n\t//\n\t//     getOffset(): number {\n\t//         return this.request.editor.getBuffer().characterIndexForPosition(this.request.bufferPosition);\n\t//     }\n\t// }\n\tfunction getSuggestions(request) {\n\t    // var editorState = new AtomEditorState(request.editor, request);\n\t    var editor = request.editor;\n\t    var offset = editor.getBuffer().characterIndexForPosition(request.bufferPosition);\n\t    ramlServer.getNodeClientConnection().documentChanged({\n\t        uri: request.editor.getPath(),\n\t        text: editor.getText()\n\t    });\n\t    //return Promise.resolve([])\n\t    return ramlServer.getNodeClientConnection().getSuggestions(request.editor.getPath(), offset);\n\t    // return suggestions.suggest(editorState, new FSProvider());\n\t}\n\texports.getSuggestions = getSuggestions;\n\t// export function getAstNode(request: AtomCompletionRequest,clearLastChar:boolean=true,allowNull:boolean=true):highlevel.IParseResult{\n\t//     var p=request.editor.getPath();\n\t//     var prj=rp.project.createProject(path.dirname(p));\n\t//     var offset=request.editor.getBuffer().characterIndexForPosition(request.bufferPosition);\n\t//     var text=request.editor.getBuffer().getText();\n\t//     var kind=search.determineCompletionKind(text,offset);\n\t//     if(kind==search.LocationKind.KEY_COMPLETION&&clearLastChar){\n\t//         var pos=offset>0?offset-1:offset;\n\t//         for (var i=pos;i>0;i--){\n\t//             var c=text[i];\n\t//             if (c=='\\r'||c=='\\n'){\n\t//                 break;\n\t//             }\n\t//             else{\n\t//                 if (c==' '||c=='\\t'){\n\t//                     ilevel++;\n\t//                 }\n\t//             }\n\t//         }\n\t//         var oldOfffset=offset;\n\t//\n\t//         text=text.substring(0,oldOfffset)+\"k:\"+text.substring(oldOfffset);\n\t//         //offset--;\n\t//     }\n\t//     var ilevel=0;\n\t//     var unit=prj.setCachedUnitContent(path.basename(p),text);\n\t//     var ast=<highlevel.IHighLevelNode>unit.highLevel();\n\t//     var cm=offset;\n\t//     for (var pm=offset-1;pm>=0;pm--){\n\t//         var c=text[pm];\n\t//         //if (c==' '||c=='\\t'||c=='\\r'||c=='\\n'){\n\t//         //    cm=pm-1;\n\t//         //    continue;\n\t//         //}\n\t//         if (c==' '||c=='\\t'){\n\t//             cm=pm-1;\n\t//             continue;\n\t//         }\n\t//         break;\n\t//     }\n\t//     var astNode=ast.findElementAtOffset(cm);\n\t//\n\t//     if (astNode&&astNode.parent()==null){\n\t//         if (ilevel>0&&kind==search.LocationKind.KEY_COMPLETION) {\n\t//             var attr=_.find(astNode.attrs(),attr=>{\n\t//                 var at=<any>attr;\n\t//                 return at.lowLevel().start()<offset&&at.lowLevel().end()>=offset&&!at.property().isKey()\n\t//             });\n\t//             if (!attr) {\n\t//                 if (allowNull) {\n\t//                     return null;\n\t//                 }\n\t//             }\n\t//         }\n\t//         //check if we are on correct indentation level\n\t//     }\n\t//     if (!allowNull&&!astNode){\n\t//         return ast;\n\t//     }\n\t//     return astNode;\n\t// }\n\t//\n\t// export function saveUnit(unit : lowLevel.ICompilationUnit) : void {\n\t//     var unitPath = unit.absolutePath()\n\t//     var unitText = unit.contents()\n\t//\n\t//     //first trying to find an opened text editor\n\t//     var openedEditor = _.find(atom.workspace.getTextEditors(), editor => {\n\t//         var editorPath = editor.getPath()\n\t//         return editorPath == unitPath\n\t//     })\n\t//\n\t//     if (openedEditor) {\n\t//         openedEditor.setText(unitText)\n\t//     } else {\n\t//         fs.writeFileSync(unitPath, unitText)\n\t//     }\n\t// }\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tfunction doPatch() {\n\t    var oldRegister = document.registerElement;\n\t    document.registerElement = function (name, options) {\n\t        if (name === \"atom-pane-resize-handle\") {\n\t            var proto = options.prototype;\n\t            if (proto) {\n\t                var oldAttachedCallback = proto.attachedCallback;\n\t                proto.attachedCallback = function () {\n\t                    if (this.parentElement) {\n\t                        return oldAttachedCallback.apply(this, []);\n\t                    }\n\t                };\n\t            }\n\t            document.registerElement = oldRegister;\n\t        }\n\t        return oldRegister.apply(document, [name, options]);\n\t    };\n\t}\n\texports.doPatch = doPatch;\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvcmUvcGF0Y2hFbGVtZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0lBRUksSUFBSSxXQUFXLEdBQVMsUUFBUyxDQUFDLGVBQWUsQ0FBQztJQUU1QyxRQUFTLENBQUMsZUFBZSxHQUFHLFVBQVUsSUFBSSxFQUFFLE9BQU87UUFFckQsRUFBRSxDQUFBLENBQUMsSUFBSSxLQUFLLHlCQUF5QixDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBRTlCLEVBQUUsQ0FBQSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ1AsSUFBSSxtQkFBbUIsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7Z0JBRWpELEtBQUssQ0FBQyxnQkFBZ0IsR0FBRztvQkFDckIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7d0JBQ3JCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO29CQUM5QyxDQUFDO2dCQUNMLENBQUMsQ0FBQTtZQUNMLENBQUM7WUFFSyxRQUFTLENBQUMsZUFBZSxHQUFHLFdBQVcsQ0FBQztRQUNsRCxDQUFDO1FBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFDdkQsQ0FBQyxDQUFBO0FBQ0wsQ0FBQztBQXhCRCwwQkF3QkMiLCJmaWxlIjoic3JjL2F0b20vY29yZS9wYXRjaEVsZW1lbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGRvUGF0Y2goKTogdm9pZCB7XG5cbiAgICB2YXIgb2xkUmVnaXN0ZXIgPSAoPGFueT5kb2N1bWVudCkucmVnaXN0ZXJFbGVtZW50O1xuXG4gICAgKDxhbnk+ZG9jdW1lbnQpLnJlZ2lzdGVyRWxlbWVudCA9IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zKSB7XG5cbiAgICAgICAgaWYobmFtZSA9PT0gXCJhdG9tLXBhbmUtcmVzaXplLWhhbmRsZVwiKSB7XG4gICAgICAgICAgICB2YXIgcHJvdG8gPSBvcHRpb25zLnByb3RvdHlwZTtcblxuICAgICAgICAgICAgaWYocHJvdG8pIHtcbiAgICAgICAgICAgICAgICB2YXIgb2xkQXR0YWNoZWRDYWxsYmFjayA9IHByb3RvLmF0dGFjaGVkQ2FsbGJhY2s7XG5cbiAgICAgICAgICAgICAgICBwcm90by5hdHRhY2hlZENhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2xkQXR0YWNoZWRDYWxsYmFjay5hcHBseSh0aGlzLCBbXSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgKDxhbnk+ZG9jdW1lbnQpLnJlZ2lzdGVyRWxlbWVudCA9IG9sZFJlZ2lzdGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9sZFJlZ2lzdGVyLmFwcGx5KGRvY3VtZW50LCBbbmFtZSwgb3B0aW9uc10pXG4gICAgfVxufSJdfQ==\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"atom\");\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar _ = __webpack_require__(10);\n\texports.DYNAMIC_COMMAND_TAG = \"DYNAMIC_COMMAND_TAG\";\n\tvar commandIdToCommandInfo = {};\n\tvar tagToCommands = {};\n\t/**\n\t * Adds new managed command\n\t * @param selector - command CSS selector\n\t * @param id - command id. Must be unique across the managed commands.\n\t * @param callBack - called on command invocation\n\t * @param tag - optional action tag allowing to perform batch operations\n\t */\n\tfunction addCommand(selector, id, callBack, tag) {\n\t    if (_.find(listCommands(), function (commandId) {\n\t        if (commandId == id) {\n\t            return true;\n\t        }\n\t        return false;\n\t    })) {\n\t        return;\n\t    }\n\t    var disposable = atom.commands.add(selector, id, callBack);\n\t    var commandInfo = {\n\t        commandId: id,\n\t        tag: tag,\n\t        disposable: disposable\n\t    };\n\t    commandIdToCommandInfo[id] = commandInfo;\n\t    if (tag) {\n\t        var tagCommands = tagToCommands[tag];\n\t        if (!tagCommands) {\n\t            tagCommands = [];\n\t            tagToCommands[tag] = tagCommands;\n\t        }\n\t        tagCommands.push(commandInfo);\n\t    }\n\t}\n\texports.addCommand = addCommand;\n\t/**\n\t * Deletes unmanaged command.\n\t * Generally, should not be called for managed actions, use the managed\n\t * version instead.\n\t * @param id - command id\n\t */\n\tfunction deleteUnmanagedCommand(id) {\n\t    atom.commands.registeredCommands[id] = null;\n\t    atom.commands.selectorBasedListenersByCommandName[id] = null;\n\t}\n\texports.deleteUnmanagedCommand = deleteUnmanagedCommand;\n\t/**\n\t * Deletes managed action by id\n\t * @param id\n\t */\n\tfunction deleteManagedCommand(id) {\n\t    var commandInfo = commandIdToCommandInfo[id];\n\t    if (!commandInfo)\n\t        return;\n\t    commandInfo.disposable.dispose();\n\t    delete commandIdToCommandInfo[id];\n\t    if (commandInfo.tag) {\n\t        var tagCommands = tagToCommands[commandInfo.tag];\n\t        if (!tagCommands)\n\t            return;\n\t        var infoIndex = -1;\n\t        _.find(tagCommands, function (currentInfo, index) {\n\t            if (currentInfo.commandId == id) {\n\t                infoIndex = index;\n\t                return true;\n\t            }\n\t            return false;\n\t        });\n\t        if (infoIndex != -1)\n\t            tagCommands.splice(infoIndex, 1);\n\t    }\n\t}\n\texports.deleteManagedCommand = deleteManagedCommand;\n\t/**\n\t * Deletes all managed commands tagged the the specific tag\n\t * @param tag\n\t */\n\tfunction deleteCommandsByTag(tag) {\n\t    var tagCommands = tagToCommands[tag];\n\t    if (!tagCommands)\n\t        return;\n\t    for (var index in tagCommands) {\n\t        var currentInfo = tagCommands[index];\n\t        currentInfo.disposable.dispose();\n\t        delete commandIdToCommandInfo[currentInfo.commandId];\n\t    }\n\t    delete tagToCommands[tag];\n\t}\n\texports.deleteCommandsByTag = deleteCommandsByTag;\n\t/**\n\t * Lists all commands, both managed and unmanaged.\n\t * @returns {string[]}\n\t */\n\tfunction listCommands() {\n\t    var result = [];\n\t    for (var commandName in atom.commands.selectorBasedListenersByCommandName) {\n\t        result.push(commandName);\n\t    }\n\t    return result;\n\t}\n\texports.listCommands = listCommands;\n\tvar initialized = false;\n\tfunction initialize() {\n\t    if (initialized)\n\t        return;\n\t    initialized = true;\n\t    try {\n\t        //forcing command palette to register itself\n\t        atom.packages.activatePackage('command-palette');\n\t        //registering our own listener to command palette's command\n\t        var listener = function () {\n\t            prePanelDisplay();\n\t        };\n\t        listener.commandManager = true;\n\t        atom.commands.add('atom-workspace', 'command-palette:toggle', listener);\n\t        ////and now swapping those listeners, so our one is called first\n\t        //var listenersArray = (<any>atom.commands.selectorBasedListenersByCommandName)\n\t        //    [\"command-palette:toggle\"]\n\t        //listenersArray.splice(0,0,listenersArray[1])\n\t        //listenersArray.splice(1, 1)\n\t        var listenersArray = atom.commands.selectorBasedListenersByCommandName[\"command-palette:toggle\"];\n\t        listenersArray.forEach(function (listener) {\n\t            var callback = listener.callback || listener.didDispatch;\n\t            if (callback && callback.commandManager) {\n\t                listener.sequenceNumber = 100500000;\n\t            }\n\t        });\n\t    }\n\t    catch (Error) {\n\t        console.error(Error.message);\n\t    }\n\t}\n\texports.initialize = initialize;\n\tvar contributors = {};\n\tfunction registerContributor(contributor) {\n\t    contributors[contributor.id] = contributor;\n\t}\n\texports.registerContributor = registerContributor;\n\tfunction prePanelDisplay() {\n\t    deleteCommandsByTag(exports.DYNAMIC_COMMAND_TAG);\n\t    for (var contributorId in contributors) {\n\t        var contributor = contributors[contributorId];\n\t        if (contributor.calculationStarted) {\n\t            contributor.calculationStarted();\n\t        }\n\t    }\n\t    for (var contributorId in contributors) {\n\t        var contributor = contributors[contributorId];\n\t        contributor.calculateItems().forEach(function (item) {\n\t            addCommand(item.selector, \"aml-workbench:\" + item.id, item.callBack, exports.DYNAMIC_COMMAND_TAG);\n\t        });\n\t    }\n\t    for (var contributorId in contributors) {\n\t        var contributor = contributors[contributorId];\n\t        if (contributor.calculationFinished) {\n\t            contributor.calculationFinished();\n\t        }\n\t    }\n\t}\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference path=\"../../../typings/main.d.ts\" />\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar _ = __webpack_require__(10);\n\tvar commandManager = __webpack_require__(35);\n\tvar contextMenuImpl = __webpack_require__(19);\n\tvar originalShowForEvent;\n\t/**\n\t * Must be called first, at startup, before the module is used.\n\t */\n\tfunction initialize() {\n\t    if (initialized) {\n\t        return;\n\t    }\n\t    initialized = true;\n\t    originalShowForEvent = atom.contextMenu.constructor.prototype.showForEvent;\n\t    atom.contextMenu.constructor.prototype.showForEvent = function (event) {\n\t        preMenuDisplay().then(function () {\n\t            originalShowForEvent.apply(atom.contextMenu, [event]);\n\t            postMenuDisplay();\n\t        });\n\t    };\n\t}\n\texports.initialize = initialize;\n\tvar initialized = false;\n\tfunction preMenuDisplay() {\n\t    try {\n\t        return contextMenuImpl.calculateMenuItemsTree().then(function (treeRoots) {\n\t            var nodeSets = {};\n\t            cleanExistingSets();\n\t            commandManager.deleteCommandsByTag(commandManager.DYNAMIC_COMMAND_TAG);\n\t            treeRoots.forEach(function (node) {\n\t                var itemSet = nodeSets[node.selector];\n\t                if (!itemSet) {\n\t                    itemSet = findOrCreateItemSet(node.selector);\n\t                    nodeSets[node.selector] = itemSet;\n\t                }\n\t                var menuItem = constructAtomMenuItem(node);\n\t                itemSet.items.push(menuItem);\n\t            });\n\t        });\n\t    }\n\t    catch (Error) {\n\t        console.log(Error.message);\n\t    }\n\t}\n\tfunction constructAtomMenuItem(node) {\n\t    var result = {\n\t        label: node.name,\n\t    };\n\t    if (node.children.length > 0) {\n\t        result.submenu = [];\n\t    }\n\t    else {\n\t        var commandName = \"aml-workbench:\" + node.name;\n\t        var existingCommands = commandManager.listCommands();\n\t        commandManager.addCommand(node.selector, commandName, node.onClick, commandManager.DYNAMIC_COMMAND_TAG);\n\t        result.command = commandName;\n\t    }\n\t    node.children.forEach(function (child) {\n\t        var childMenuItem = constructAtomMenuItem(child);\n\t        result.submenu.push(childMenuItem);\n\t    });\n\t    return result;\n\t}\n\tvar DYNAMIC_SET_TAG = \"DYNAMIC_SET_TAG\";\n\t/**\n\t * Selector that were used at least once in the context menu\n\t * @type {Array}\n\t */\n\tvar usedSelectors = [];\n\tfunction findOrCreateItemSet(selector) {\n\t    var existingSet = _.find(atom.contextMenu.itemSets, function (currentSet) {\n\t        return currentSet.tag && currentSet.tag == DYNAMIC_SET_TAG;\n\t    });\n\t    if (!existingSet) {\n\t        existingSet = {\n\t            items: [],\n\t            selector: selector,\n\t            specificity: 11,\n\t            tag: DYNAMIC_SET_TAG\n\t        };\n\t        atom.contextMenu.itemSets.push(existingSet);\n\t        //saving used selector name\n\t        if (!_.find(usedSelectors, function (name) { return name == selector; })) {\n\t            usedSelectors.push(selector);\n\t        }\n\t    }\n\t    return existingSet;\n\t}\n\tfunction cleanExistingSets() {\n\t    var existingSets = _.filter(atom.contextMenu.itemSets, function (currentSet) {\n\t        return currentSet.tag && currentSet.tag == DYNAMIC_SET_TAG;\n\t    });\n\t    existingSets.forEach(function (existingSet) {\n\t        existingSet.items = [];\n\t    });\n\t}\n\tfunction postMenuDisplay() {\n\t    //commandManager.deleteCommandsByTag(commandManager.DYNAMIC_COMMAND_TAG)\n\t}\n\t\n\t//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = require(\"atom-package-deps\");\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// main.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 35c955107fd9a50579a2","\"use strict\";\n/// <reference path=\"../../typings/main.d.ts\" />\nvar editorTools = require(\"./editor-tools/editor-tools\");\nvar quickCommands = require(\"./quick-commands/quick-commands\");\nvar provider = require(\"./suggestion/provider\");\nvar decl = require(\"./dialogs/assist-utils\");\nvar linterUI = require(\"./core/linter-ui\");\nvar patchElements = require(\"./core/patchElements\");\nvar CompositeDisposable = require('atom').CompositeDisposable;\n// import sharedASTInitializer = require(\"./shared-ast-initializer\")\nvar commandManager = require(\"./quick-commands/command-manager\");\nvar contextMenu = require(\"./context-menu/contextMenu\");\n// import quickFixActions = require(\"./context-menu/quickFix\")\n// import actions = require(\"./context-menu/actions\")\nvar contextMenuImpl = require(\"./context-menu/contextMenuImpl\");\nvar package_entry_point;\n(function (package_entry_point) {\n    var subscriptions = new CompositeDisposable();\n    function activate(state) {\n        require('atom-package-deps').install('aml-workbench', true)\n            .then(function () {\n            subscriptions.add(atom.commands.add('atom-workspace', {\n                /*'api-workbench:popular-apis': apiList.showPopularApis,*/\n                'aml-workbench:editor-tools': editorTools.initEditorTools,\n                /*'api-workbench:console': Console.toggle,*/\n                'aml-workbench:go-to-definition': decl.gotoDeclaration,\n                'aml-workbench:find-usages': decl.findUsages,\n                /*'api-workbench:quick-outline':quickOutline.show,\n                'api-workbench:quick-commands': quickCommands.showCommands,*/\n                'aml-workbench:rename': decl.renameRAMLElement,\n                'aml-workbench:new-project': decl.newProject,\n            }));\n            subscriptions.add(atom.workspace.observeTextEditors(require(\"./grammar-detect\").handle));\n            //subscriptions.add(atom.workspace.addOpener(Console.opener))\n            ////subscriptions.add(atom.workspace.addOpener(RamlScriptReport.opener))\n            patchElements.doPatch();\n            commandManager.initialize();\n            contextMenu.initialize();\n            // sharedASTInitializer.initialize()\n            quickCommands.registerCommands();\n            // quickFixActions.initialize()\n            // actions.register();\n            editorTools.initEditorTools();\n            contextMenuImpl.initializeActionBasedMenu('atom-text-editor[data-grammar=\"source raml\"],.raml-outline');\n        });\n    }\n    package_entry_point.activate = activate;\n    function getProvider() {\n        return provider;\n    }\n    package_entry_point.getProvider = getProvider;\n    function provideLinter() {\n        return linterUI;\n    }\n    package_entry_point.provideLinter = provideLinter;\n    function consumeLinter(linterApi) {\n        subscriptions.add(linterUI.initEditorObservers(linterApi));\n    }\n    package_entry_point.consumeLinter = consumeLinter;\n    function deactivate() {\n        subscriptions.dispose();\n    }\n    package_entry_point.deactivate = deactivate;\n    package_entry_point.config = {\n        grammars: {\n            type: 'array',\n            default: [\n                'source.raml', 'source.syaml', 'source.sjson'\n            ]\n        },\n        openConsoleInSplitPane: {\n            type: 'boolean',\n            default: true\n        }\n    };\n})(package_entry_point || (package_entry_point = {}));\nmodule.exports = package_entry_point;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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dXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL21haW4uZC50c1wiIC8+XG5cbi8vIGltcG9ydCBDb25zb2xlID0gcmVxdWlyZSgnLi9jb25zb2xlL2luZGV4Jyk7XG5pbXBvcnQgYXBpTGlzdCA9IHJlcXVpcmUoJy4vcG9wdWxhci1hcGlzL3BvcHVsYXItYXBpcycpO1xuaW1wb3J0IGpRdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuaW1wb3J0IGVkaXRvclRvb2xzPXJlcXVpcmUoJy4vZWRpdG9yLXRvb2xzL2VkaXRvci10b29scycpXG5pbXBvcnQgcXVpY2tDb21tYW5kcyA9IHJlcXVpcmUoJy4vcXVpY2stY29tbWFuZHMvcXVpY2stY29tbWFuZHMnKVxuaW1wb3J0IHByb3ZpZGVyPXJlcXVpcmUoXCIuL3N1Z2dlc3Rpb24vcHJvdmlkZXJcIilcbmltcG9ydCBxdWlja091dGxpbmU9cmVxdWlyZShcIi4vcXVpY2stb3V0bGluZS9xdWljay1vdXRsaW5lXCIpXG5pbXBvcnQgZGVjbD1yZXF1aXJlKFwiLi9kaWFsb2dzL2Fzc2lzdC11dGlsc1wiKVxuaW1wb3J0IGxpbnRlclVJPXJlcXVpcmUoXCIuL2NvcmUvbGludGVyLXVpXCIpXG5pbXBvcnQgcGF0Y2hFbGVtZW50cz1yZXF1aXJlKFwiLi9jb3JlL3BhdGNoRWxlbWVudHNcIilcbnZhciBDb21wb3NpdGVEaXNwb3NhYmxlID0gcmVxdWlyZSgnYXRvbScpLkNvbXBvc2l0ZURpc3Bvc2FibGU7XG4vLyBpbXBvcnQgc2hhcmVkQVNUSW5pdGlhbGl6ZXIgPSByZXF1aXJlKFwiLi9zaGFyZWQtYXN0LWluaXRpYWxpemVyXCIpXG5pbXBvcnQgY29tbWFuZE1hbmFnZXIgPSByZXF1aXJlKFwiLi9xdWljay1jb21tYW5kcy9jb21tYW5kLW1hbmFnZXJcIilcbmltcG9ydCBjb250ZXh0TWVudSA9IHJlcXVpcmUoXCIuL2NvbnRleHQtbWVudS9jb250ZXh0TWVudVwiKVxuLy8gaW1wb3J0IHF1aWNrRml4QWN0aW9ucyA9IHJlcXVpcmUoXCIuL2NvbnRleHQtbWVudS9xdWlja0ZpeFwiKVxuLy8gaW1wb3J0IGFjdGlvbnMgPSByZXF1aXJlKFwiLi9jb250ZXh0LW1lbnUvYWN0aW9uc1wiKVxuaW1wb3J0IGNvbnRleHRNZW51SW1wbCA9IHJlcXVpcmUoXCIuL2NvbnRleHQtbWVudS9jb250ZXh0TWVudUltcGxcIilcblxubW9kdWxlIHBhY2thZ2VfZW50cnlfcG9pbnQge1xuXG4gICAgdmFyIHN1YnNjcmlwdGlvbnMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG5cbiAgICBleHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUgKHN0YXRlKSB7XG4gICAgICAgIHJlcXVpcmUoJ2F0b20tcGFja2FnZS1kZXBzJykuaW5zdGFsbCgnYW1sLXdvcmtiZW5jaCcsIHRydWUpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5hZGQoYXRvbS5jb21tYW5kcy5hZGQoJ2F0b20td29ya3NwYWNlJywge1xuICAgICAgICAgICAgICAgICAgICAvKidhcGktd29ya2JlbmNoOnBvcHVsYXItYXBpcyc6IGFwaUxpc3Quc2hvd1BvcHVsYXJBcGlzLCovXG4gICAgICAgICAgICAgICAgICAgICdhbWwtd29ya2JlbmNoOmVkaXRvci10b29scyc6ZWRpdG9yVG9vbHMuaW5pdEVkaXRvclRvb2xzLFxuICAgICAgICAgICAgICAgICAgICAvKidhcGktd29ya2JlbmNoOmNvbnNvbGUnOiBDb25zb2xlLnRvZ2dsZSwqL1xuICAgICAgICAgICAgICAgICAgICAnYW1sLXdvcmtiZW5jaDpnby10by1kZWZpbml0aW9uJzpkZWNsLmdvdG9EZWNsYXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgJ2FtbC13b3JrYmVuY2g6ZmluZC11c2FnZXMnOmRlY2wuZmluZFVzYWdlcyxcbiAgICAgICAgICAgICAgICAgICAgLyonYXBpLXdvcmtiZW5jaDpxdWljay1vdXRsaW5lJzpxdWlja091dGxpbmUuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgJ2FwaS13b3JrYmVuY2g6cXVpY2stY29tbWFuZHMnOiBxdWlja0NvbW1hbmRzLnNob3dDb21tYW5kcywqL1xuICAgICAgICAgICAgICAgICAgICAnYW1sLXdvcmtiZW5jaDpyZW5hbWUnOmRlY2wucmVuYW1lUkFNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICdhbWwtd29ya2JlbmNoOm5ldy1wcm9qZWN0JzpkZWNsLm5ld1Byb2plY3QsXG4gICAgICAgICAgICAgICAgICAgIC8qJ2FwaS13b3JrYmVuY2g6c2VsZWN0LW5vZGUnOmRlY2wuc2VsZWN0LCovXG4gICAgICAgICAgICAgICAgICAgIC8qJ2FwaS13b3JrYmVuY2g6cmV2YWxpZGF0ZSc6ZGVjbC5yZXZhbGlkYXRlKi9cbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25zLmFkZChhdG9tLndvcmtzcGFjZS5vYnNlcnZlVGV4dEVkaXRvcnMocmVxdWlyZShcIi4vZ3JhbW1hci1kZXRlY3RcIikuaGFuZGxlKSk7XG5cbiAgICAgICAgICAgICAgICAvL3N1YnNjcmlwdGlvbnMuYWRkKGF0b20ud29ya3NwYWNlLmFkZE9wZW5lcihDb25zb2xlLm9wZW5lcikpXG4gICAgICAgICAgICAgICAgLy8vL3N1YnNjcmlwdGlvbnMuYWRkKGF0b20ud29ya3NwYWNlLmFkZE9wZW5lcihSYW1sU2NyaXB0UmVwb3J0Lm9wZW5lcikpXG5cbiAgICAgICAgICAgICAgICBwYXRjaEVsZW1lbnRzLmRvUGF0Y2goKTtcblxuICAgICAgICAgICAgICAgIGNvbW1hbmRNYW5hZ2VyLmluaXRpYWxpemUoKVxuICAgICAgICAgICAgICAgIGNvbnRleHRNZW51LmluaXRpYWxpemUoKVxuICAgICAgICAgICAgICAgIC8vIHNoYXJlZEFTVEluaXRpYWxpemVyLmluaXRpYWxpemUoKVxuXG4gICAgICAgICAgICAgICAgcXVpY2tDb21tYW5kcy5yZWdpc3RlckNvbW1hbmRzKClcbiAgICAgICAgICAgICAgICAvLyBxdWlja0ZpeEFjdGlvbnMuaW5pdGlhbGl6ZSgpXG4gICAgICAgICAgICAgICAgLy8gYWN0aW9ucy5yZWdpc3RlcigpO1xuXG4gICAgICAgICAgICAgICAgZWRpdG9yVG9vbHMuaW5pdEVkaXRvclRvb2xzKClcblxuICAgICAgICAgICAgICAgIGNvbnRleHRNZW51SW1wbC5pbml0aWFsaXplQWN0aW9uQmFzZWRNZW51KCdhdG9tLXRleHQtZWRpdG9yW2RhdGEtZ3JhbW1hcj1cInNvdXJjZSByYW1sXCJdLC5yYW1sLW91dGxpbmUnKVxuICAgICAgICAgICAgfSlcbiAgICB9XG5cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRQcm92aWRlcigpe1xuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVMaW50ZXIoKXtcbiAgICAgICAgcmV0dXJuIGxpbnRlclVJO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBjb25zdW1lTGludGVyKGxpbnRlckFwaSkge1xuICAgICAgICBzdWJzY3JpcHRpb25zLmFkZChsaW50ZXJVSS5pbml0RWRpdG9yT2JzZXJ2ZXJzKGxpbnRlckFwaSkpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlKCl7XG4gICAgICAgIHN1YnNjcmlwdGlvbnMuZGlzcG9zZSgpXG4gICAgfVxuXG4gICAgZXhwb3J0IHZhciBjb25maWcgPSB7XG4gICAgICAgIGdyYW1tYXJzOiB7XG4gICAgICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICAgICAgZGVmYXVsdDogW1xuICAgICAgICAgICAgICAgICdzb3VyY2UucmFtbCcsICdzb3VyY2Uuc3lhbWwnLCAnc291cmNlLnNqc29uJ1xuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBvcGVuQ29uc29sZUluU3BsaXRQYW5lOiB7XG4gICAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgPXBhY2thZ2VfZW50cnlfcG9pbnRcbiJdfQ==\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/main.js\n// module id = 0\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar path = require(\"path\");\nvar atom = require(\"../core/atomWrapper\");\nvar detailsView = require(\"./details-view\");\nvar outlineView = require(\"./outline-view\");\nvar ramlServer = require(\"api-language-server\");\nvar markOccurrences = require(\"../core/markOccurences\");\nvar grammarDetect = require(\"../grammar-detect\");\nvar _bmc = 0;\nfunction benchmark(func) {\n    var t0 = new Date().getTime();\n    if (_bmc != 0 && func)\n        console.log(func + \" took \" + (t0 - _bmc) + \" miliseconds.\");\n    _bmc = t0;\n}\nvar EditorManager = /** @class */ (function () {\n    function EditorManager(display) {\n        if (display === void 0) { display = true; }\n        var _this = this;\n        this._initialized = false;\n        this.opened = false;\n        this.updateCount = 0;\n        this.outlineCount = 0;\n        this._cleanOutline = false;\n        this.performanceDebug = true;\n        this.fire = true;\n        this.placeholder = false;\n        manager = window[\"manager\"] = this;\n        //this.markOccurrencesReconciler = new ramlServer.Reconciler(ramlServer.getNodeClientConnection(), 200);\n        atom.workspace.onDidChangeActivePaneItem(function (e) { return _this.updateEverything(display); });\n        atom.workspace.observeTextEditors(function (editor) {\n            editor.onDidDestroy(function () {\n                var path = editor.getPath();\n                ramlServer.getNodeClientConnection().documentClosed(path);\n            });\n            editor.onDidChangeCursorPosition(function (event) { return _this.cursorChanged(editor, event.newBufferPosition); });\n        });\n        this.updateEverything(display);\n        this.addAutoCloseListener();\n        this.addListenersForStructure();\n    }\n    EditorManager.prototype.getPath = function () {\n        console.log(\"ETM::GetPath\");\n        return this.currentEditor ? this.currentEditor.getPath() : null;\n    };\n    EditorManager.prototype.getCurrentEditor = function () { return this.currentEditor; };\n    EditorManager.prototype.getCurrentPosition = function () {\n        return this.currentPosition;\n    };\n    EditorManager.prototype.cursorChanged = function (editor, newBufferPosition) {\n        markOccurrences.clearOccurences(editor);\n        //this.markOccurrencesReconciler.schedule(new markOccurrences.MarkOccurrenceRunnable(editor, newBufferPosition));\n        var buffer = editor.getBuffer();\n        var pos = buffer.characterIndexForPosition(editor.getCursorBufferPosition());\n        ramlServer.getNodeClientConnection().positionChanged(manager.unitPath, pos);\n        this.currentPosition = pos;\n    };\n    EditorManager.prototype.internalScheduleUpdateViews = function (count) {\n        var _this = this;\n        this.updateCount = count;\n        setTimeout(function () {\n            if (_this.updateCount == count) {\n                _this.updateViews();\n            }\n        }, 500);\n    };\n    EditorManager.prototype.scheduleViewsUpdate = function () {\n        if (this.fire) {\n            this.internalScheduleUpdateViews(this.updateCount + 1);\n        }\n    };\n    EditorManager.prototype.internalScheduleOutlineUpdate = function (count) {\n        var _this = this;\n        this.outlineCount = count;\n        setTimeout(function () {\n            if (_this.outlineCount == count) {\n                _this.updateOutline();\n            }\n        }, 500);\n    };\n    EditorManager.prototype.scheduleOutlineUpdate = function () {\n        this.internalScheduleOutlineUpdate(this.outlineCount + 1);\n    };\n    EditorManager.prototype.addAutoCloseListener = function () {\n        var _this = this;\n        atom.workspace.onDidDestroyPane(function (evt) {\n            try {\n                var edcount = atom.workspace.getPaneItems().filter(function (e) {\n                    return e['softTabs'] != undefined;\n                }).length;\n                if (edcount == 0) {\n                    // this.ast=null;\n                    // this.unit=null;\n                    // this._currentNode=null;\n                    _this.currentEditor = null;\n                    if (global.cleanCache) {\n                        global.cleanCache();\n                    }\n                    if (atom.workspace.paneForItem(_this._view))\n                        atom.workspace.paneForItem(_this._view).destroy();\n                    if (atom.workspace.paneForItem(_this._details))\n                        atom.workspace.paneForItem(_this._details).destroy();\n                    _this.opened = false;\n                }\n            }\n            catch (e) {\n                //TODO REMOVE IT LATER WE NEED TO BE PRETy DEFENSIVE AT THIS MOMENT\n                console.log(e);\n            }\n        });\n    };\n    EditorManager.prototype.getOrCreateView = function () {\n        if (!this._view) {\n            this._view = new outlineView.RamlOutline();\n            if (this.unitPath) {\n                this._view.setUnit(this.unitPath);\n            }\n            // if (this.ast){\n            //     this._view.setUnit(this.ast);\n            // }\n        }\n        return this._view;\n    };\n    EditorManager.prototype.getDetails = function () {\n        if (!EditorManager.DETAILS_SUPPORT)\n            return null;\n        if (!this._details)\n            this._details = new detailsView.RamlDetails();\n        return this._details;\n    };\n    EditorManager.prototype.updateDetails = function () {\n        this.getDetails().update();\n    };\n    EditorManager.prototype.reparseAST = function () {\n        if (this.currentEditor) {\n            var _path = this.currentEditor.getPath();\n            var bf = this.currentEditor.getBuffer();\n            this.unitPath = _path;\n            // var prj = project.createProject(path.dirname(_path));\n            // var unit = prj.setCachedUnitContent(path.basename(_path), this.currentEditor.getBuffer().getText());\n            //\n            // unit.project().addTextChangeListener(delta=>{\n            //     if (delta.unit!=unit){\n            //         return;\n            //     }\n            //     var cm=delta.offset;\n            //     var end=delta.replacementLength;\n            //     var text=delta.text;\n            //     var buffer=(<atom.IBuffer>this.currentEditor.getBuffer());\n            //     var start=buffer.positionForCharacterIndex(cm);\n            //     var endPosition=buffer.positionForCharacterIndex(cm+end);\n            //     try {\n            //         this.fire=false;\n            //         (<any>buffer).setTextInRange({start: start, end: endPosition}, text);\n            //         this.scheduleOutlineUpdate();\n            //     } finally{\n            //         this.fire=true;\n            //     }\n            // });\n            // this.ast = unit.highLevel();\n            // this.unit = unit;\n        }\n    };\n    EditorManager.prototype.isETPane = function (pane) {\n        if (!this._view) {\n            return;\n        }\n        var items = pane.getItems();\n        return ((EditorManager.DETAILS_SUPPORT && items.indexOf(this.getDetails()) >= 0)\n            || items.indexOf(this._view) >= 0);\n    };\n    EditorManager.prototype.display = function () {\n        console.log(\"ETM::Display\");\n        var aw = atom.workspace;\n        var fpane = atom.workspace.paneForItem(this.getCurrentEditor());\n        if (!fpane)\n            return;\n        if (!aw.paneForItem(this.getOrCreateView()))\n            doSplit(this.getOrCreateView());\n        if (EditorManager.DETAILS_SUPPORT) {\n            if (!aw.paneForItem(manager.getDetails()))\n                doSplit(this.getDetails(), SplitDirections.BOTTOM);\n        }\n        this.opened = true;\n    };\n    // updateText(node?: ll.ILowLevelASTNode) {\n    //     this.fire = false;\n    //     var editor = this.currentEditor;\n    //     var pos = node ? editor.getBuffer().positionForCharacterIndex(node.start()) : null;\n    //     editor.setText(this.unit.contents());\n    //     this.fire = true;\n    //     if (pos) (<any>editor).setCursorBufferPosition(pos);\n    // }\n    // selectNode(hnode: hl.IHighLevelNode) {\n    //     var node = hnode.lowLevel();\n    //     if (!node) return;\n    //     var editor = this.currentEditor;\n    //     if (!editor) return;\n    //     var pos = node ? editor.getBuffer().positionForCharacterIndex(node.start()) : null;\n    //     if (pos) (<any>editor).setCursorBufferPosition(pos);\n    // }\n    EditorManager.prototype.setViewsDisplayStyle = function (visible) {\n        if (this._details && this._details.element) {\n            this._details.element.style.display = visible ? null : \"none\";\n        }\n        if (this._view && this._view.element) {\n            this._view.element.style.display = visible ? null : \"none\";\n        }\n    };\n    EditorManager.prototype.isRaml = function (editor) {\n        if (!editor) {\n            return false;\n        }\n        var editorPath = editor.getPath();\n        if (!editorPath) {\n            return false;\n        }\n        var extName = path.extname(editorPath);\n        if (extName !== '.raml' && extName !== '.yaml') {\n            return false;\n        }\n        return true;\n    };\n    EditorManager.prototype.updateEverything = function (display) {\n        if (display === void 0) { display = true; }\n        var editor = atom.workspace.getActiveTextEditor();\n        if (editor) {\n            this.setViewsDisplayStyle(this.isAppropriateGrammar(editor));\n        }\n        if (!editor || editor == this.currentEditor || !this.isAppropriateGrammar(editor)) {\n            return;\n        }\n        this.currentEditor = editor;\n        if (this.opened == false && display)\n            this.display();\n        //we are not listening to the editor changes any more,\n        //instead we are listening to the reports of the server that something is avilable, like the structure\n        if (!editor.patched) {\n            this.addListenersToEditor(editor);\n        }\n        this.reparseAST();\n        var pos = editor.getBuffer().characterIndexForPosition(editor.getCursorBufferPosition());\n        this.positionUpdated(pos);\n        this.scheduleViewsUpdate();\n    };\n    EditorManager.prototype.addListenersToEditor = function (cedit) {\n        var _this = this;\n        var buffer = cedit.getBuffer();\n        buffer.onDidChange(function (x) {\n            try {\n                //this.reparseAST();\n                var pos = buffer.characterIndexForPosition(cedit.getCursorBufferPosition());\n                _this.positionUpdated(pos);\n                //this.scheduleViewsUpdate();\n            }\n            catch (e) {\n                console.log(e);\n            }\n        });\n        //updating ast node on position change\n        // cedit.getLastCursor().onDidChangePosition(x=> {\n        //     if (!this.fire) return;\n        //     this.positionUpdated(buffer.characterIndexForPosition(cedit.getCursorBufferPosition()));\n        //     this.scheduleViewsUpdate();\n        // });\n        this.addListenersOnMove(cedit);\n        this.currentEditor.patched = true;\n    };\n    EditorManager.prototype.addListenersForStructure = function () {\n        var _this = this;\n        ramlServer.getNodeClientConnection().onStructureReport(function (report) {\n            var categoryNames = [];\n            for (var categoryName in report.structure)\n                categoryNames.push(categoryName);\n            var categoryNamesString = categoryNames.join();\n            ramlServer.getNodeClientConnection().debug(\"Got new structure report with categories \"\n                + categoryNamesString, \"EditorManager\", \"addListenersForStructure\");\n            var editor = atom.workspace.getActiveTextEditor();\n            if (!editor || !_this.isAppropriateGrammar(editor)) {\n                return;\n            }\n            _this.updateOutline();\n        });\n    };\n    EditorManager.prototype.addListenersOnMove = function (cedit) {\n        var _this = this;\n        var movingPane = false;\n        atom.workspace.onDidAddPaneItem(function (event) {\n            if (movingPane || _this.isETPane(event.pane) == false || (event.item && !event.item.getText && event.item == _this.getOrCreateView()) || (EditorManager.DETAILS_SUPPORT && event.item == _this.getDetails()))\n                return event;\n            setTimeout(function () {\n                try {\n                    var fpane = atom.workspace.paneForItem(cedit);\n                    if (fpane) {\n                        movingPane = true;\n                        event.pane.moveItemToPane(event.item, fpane, null);\n                        movingPane = false;\n                        fpane.setActiveItem(event.item);\n                        fpane.activate();\n                    }\n                }\n                catch (e) {\n                    //TODO REMOVE IT LATER WE NEED TO BE PRETy DEFENSIVE AT THIS MOMENT\n                    console.log(e);\n                }\n            }, 18);\n        });\n    };\n    // _currentNode: hl.IHighLevelNode;\n    // //_selectedNode: hl.IHighLevelNode;\n    // patchCurrentNode(n:hl.IHighLevelNode){\n    //     this._currentNode=n;\n    // }\n    //\n    // getCurrentNode() {\n    //     if (this._currentNode == null) return this._currentNode = this.ast;\n    //     else return this._currentNode;\n    // }\n    // setSelectedNode(node: hl.IHighLevelNode) {\n    //     //this._selectedNode = node;\n    //\n    //     if (this.unit){\n    //         var unitPath=this.unit.absolutePath();\n    //         while (node.lowLevel().unit().absolutePath()!=unitPath){\n    //             if (!node.parent()){\n    //                 break;\n    //             }\n    //             else{\n    //                 node=node.parent();\n    //             }\n    //         }\n    //     }\n    //     var id=node.id();\n    //     var anode=this.ast.findById(id);\n    //     if (anode){\n    //         node=anode;\n    //     }\n    //     if (this._details){\n    //         this._details.show(node);\n    //     }\n    //     var editor = this.getCurrentEditor();\n    //     if (editor) {\n    //         this.fire=false;\n    //         try {\n    //             var buffer = editor.getBuffer();\n    //             var posStart = buffer.positionForCharacterIndex(node.lowLevel().start());\n    //             var posEnd = buffer.positionForCharacterIndex(node.lowLevel().end());\n    //             editor.setCursorBufferPosition(posStart);\n    //             this.positionUpdated(buffer.characterIndexForPosition(editor.getCursorBufferPosition()));\n    //         }finally{\n    //             this.fire=true;\n    //         }\n    //     }\n    // }\n    // getSelectedNode() {\n    //     return this.getCurrentNode()\n    //     //else return this._selectedNode;\n    // }\n    EditorManager.prototype.setText = function (text) {\n        console.log(\"ETM::SetText\");\n        var editor = this.currentEditor;\n        if (editor == null)\n            return;\n        editor.setText(text);\n    };\n    EditorManager.prototype.isFromEdgeRow = function () {\n        var editor = this.getCurrentEditor();\n        if (!editor) {\n            return false;\n        }\n        var currentPosition = editor.getCursorBufferPosition();\n        if (!currentPosition) {\n            return false;\n        }\n        var currentRow = currentPosition.row;\n        var previousRow = editor.previousRow;\n        editor.previousRow = currentRow;\n        if (previousRow === undefined) {\n            return false;\n        }\n        if (previousRow === currentRow) {\n            return false;\n        }\n        if (previousRow === editor.getBuffer().getLastRow() || previousRow === 0) {\n            return true;\n        }\n    };\n    EditorManager.prototype.updateViews = function () {\n        //var cNode = this.getCurrentNode();\n        var ds = new Date().getMilliseconds();\n        if (EditorManager.DETAILS_SUPPORT && this._details) {\n            this.getDetails().show(manager.unitPath, manager.currentPosition, this.isFromEdgeRow());\n        }\n        if (this._view) {\n            this.getOrCreateView().setUnit(manager.unitPath);\n            // this.getOrCreateView().setUnit(manager.ast);\n            //this.getOrCreateView().setSelection(cNode);\n        }\n        var d1 = new Date().getMilliseconds();\n        if (this.performanceDebug) {\n            console.log(\"Views update:\" + (d1 - ds));\n        }\n    };\n    EditorManager.prototype.updateOutline = function () {\n        ramlServer.getNodeClientConnection().debug(\"Updating outline\", \"EditorManager\", \"updateOutline\");\n        if (this._view) {\n            this.getOrCreateView().setUnit(manager.unitPath);\n        }\n    };\n    EditorManager.prototype.positionUpdated = function (newPosition) {\n        this.currentPosition = newPosition;\n        if (this._details) {\n            ramlServer.getNodeClientConnection().positionChanged(manager.unitPath, this.currentPosition);\n            // this.getDetails().show(manager.unitPath, this.currentPosition, this.isFromEdgeRow());\n        }\n        // if (this.ast){\n        //     this._currentNode=this.ast.findElementAtOffset(this.currentPosition);\n        // }\n    };\n    EditorManager.prototype.isAppropriateGrammar = function (editor) {\n        if (this.isRaml(editor) || grammarDetect.isSwaggerJson(editor) || grammarDetect.isSwaggerYaml(editor)) {\n            return true;\n        }\n        return false;\n    };\n    EditorManager.DETAILS_SUPPORT = false;\n    return EditorManager;\n}());\nvar manager = null;\nfunction initEditorTools(display) {\n    if (display === void 0) { display = true; }\n    if (manager == null)\n        manager = new EditorManager(display);\n    else if (display)\n        manager.display();\n}\nexports.initEditorTools = initEditorTools;\nfunction editorToolsStatus() {\n    return manager != null && manager.opened;\n}\nexports.editorToolsStatus = editorToolsStatus;\nfunction aquireManager() {\n    if (!manager) {\n        manager = new EditorManager(true);\n    }\n    return manager;\n}\nexports.aquireManager = aquireManager;\n// export function updateAndSelect(node:hl.IHighLevelNode){\n//     if (aquireManager()._view) {\n//         aquireManager()._view.refresh();\n//     }\n//     aquireManager().updateText();\n//     aquireManager().selectNode(node);\n// }\nvar SplitDirections;\n(function (SplitDirections) {\n    SplitDirections[SplitDirections[\"RIGHT\"] = 0] = \"RIGHT\";\n    SplitDirections[SplitDirections[\"LEFT\"] = 1] = \"LEFT\";\n    SplitDirections[SplitDirections[\"TOP\"] = 2] = \"TOP\";\n    SplitDirections[SplitDirections[\"BOTTOM\"] = 3] = \"BOTTOM\";\n})(SplitDirections = exports.SplitDirections || (exports.SplitDirections = {}));\nfunction doSplit(value, dir) {\n    if (dir === void 0) { dir = SplitDirections.RIGHT; }\n    var newPane = null;\n    switch (dir) {\n        case SplitDirections.BOTTOM:\n            newPane = atom.workspace.getActivePane().splitDown({});\n            break;\n        case SplitDirections.TOP:\n            newPane = atom.workspace.getActivePane().splitUp({});\n            break;\n        case SplitDirections.LEFT:\n            newPane = atom.workspace.getActivePane().splitLeft({});\n            break;\n        case SplitDirections.RIGHT:\n            newPane = atom.workspace.getActivePane().splitRight({});\n            break;\n    }\n    newPane.addItem(value);\n    return newPane;\n}\nexports.doSplit = doSplit;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/editor-tools/editor-tools.js\n// module id = 1\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 2\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar Workspace = /** @class */ (function () {\n    function Workspace() {\n    }\n    Workspace.prototype.onDidChangeActivePaneItem = function (callback) {\n        return atom.workspace.onDidChangeActivePaneItem(callback);\n    };\n    Workspace.prototype.onDidOpen = function (callback) {\n        return atom.workspace.onDidOpen(callback);\n    };\n    Workspace.prototype.addModalPanel = function (arg) {\n        return atom.workspace.addModalPanel(arg);\n    };\n    Workspace.prototype.getActiveTextEditor = function () {\n        return atom.workspace.getActiveTextEditor();\n    };\n    Workspace.prototype.getActivePane = function () {\n        return atom.workspace.getActivePane();\n    };\n    Workspace.prototype.getActiveEditor = function () {\n        return atom.workspace.getActiveEditor();\n    };\n    Workspace.prototype.addRightPanel = function (arg) {\n        return atom.workspace.addRightPanel(arg);\n    };\n    Workspace.prototype.paneForItem = function (arg) {\n        return atom.workspace.paneForItem(arg);\n    };\n    Workspace.prototype.getPaneItems = function () {\n        return atom.workspace.getPaneItems();\n    };\n    Workspace.prototype.onDidAddPaneItem = function (callback) {\n        return atom.workspace.onDidAddPaneItem(callback);\n    };\n    Workspace.prototype.onDidDestroyPane = function (callback) {\n        return atom.workspace.onDidDestroyPane(callback);\n    };\n    Workspace.prototype.open = function (path, args) {\n        atom.workspace.open(path, args);\n    };\n    Workspace.prototype.observeTextEditors = function (callback) {\n        atom.workspace.observeTextEditors(callback);\n    };\n    return Workspace;\n}());\nexports.Workspace = Workspace;\nfunction open(pathsToOpen) {\n    atom.open(pathsToOpen);\n}\nexports.open = open;\nexports.workspace = new Workspace();\nvar CommandManager = /** @class */ (function () {\n    function CommandManager() {\n    }\n    CommandManager.prototype.add = function (selector, type, callback) {\n        return atom.commands.add(selector, type, callback);\n    };\n    return CommandManager;\n}());\nexports.CommandManager = CommandManager;\nexports.commands = new CommandManager();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvcmUvYXRvbVdyYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBbUQ7QUFDbkQ7SUFBQTtJQWdEQSxDQUFDO0lBL0NHLDZDQUF5QixHQUF6QixVQUEwQixRQUEwQjtRQUNoRCxNQUFNLENBQU8sSUFBSSxDQUFDLFNBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsNkJBQVMsR0FBVCxVQUFVLFFBQTBCO1FBQ2hDLE1BQU0sQ0FBTyxJQUFJLENBQUMsU0FBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsaUNBQWEsR0FBYixVQUFjLEdBQW9CO1FBQzlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsdUNBQW1CLEdBQW5CO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUNoRCxDQUFDO0lBRUQsaUNBQWEsR0FBYjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFRCxtQ0FBZSxHQUFmO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVELGlDQUFhLEdBQWIsVUFBYyxHQUFRO1FBQ2xCLE1BQU0sQ0FBTyxJQUFJLENBQUMsU0FBVSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsK0JBQVcsR0FBWCxVQUFZLEdBQVE7UUFDaEIsTUFBTSxDQUFPLElBQUksQ0FBQyxTQUFVLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFDRCxnQ0FBWSxHQUFaO1FBQ0ksTUFBTSxDQUFRLElBQUksQ0FBQyxTQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDakQsQ0FBQztJQUNELG9DQUFnQixHQUFoQixVQUFpQixRQUFvRTtRQUNqRixNQUFNLENBQVEsSUFBSSxDQUFDLFNBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBQ0Qsb0NBQWdCLEdBQWhCLFVBQWlCLFFBQTBDO1FBQ3ZELE1BQU0sQ0FBUSxJQUFJLENBQUMsU0FBVSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFDRCx3QkFBSSxHQUFKLFVBQUssSUFBSSxFQUFFLElBQUk7UUFDWCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELHNDQUFrQixHQUFsQixVQUFtQixRQUFxQztRQUNwRCxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFDTCxnQkFBQztBQUFELENBaERBLEFBZ0RDLElBQUE7QUFoRFksOEJBQVM7QUFrRHRCLGNBQXFCLFdBQVc7SUFDdEIsSUFBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBRkQsb0JBRUM7QUE2RVUsUUFBQSxTQUFTLEdBQWEsSUFBSSxTQUFTLEVBQUUsQ0FBQztBQU1qRDtJQUFBO0lBSUEsQ0FBQztJQUhHLDRCQUFHLEdBQUgsVUFBSSxRQUFnQixFQUFFLElBQVksRUFBRSxRQUFvQjtRQUNwRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBQ0wscUJBQUM7QUFBRCxDQUpBLEFBSUMsSUFBQTtBQUpZLHdDQUFjO0FBTWhCLFFBQUEsUUFBUSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUMiLCJmaWxlIjoic3JjL2F0b20vY29yZS9hdG9tV3JhcHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi90eXBpbmdzL21haW4uZC50c1wiIC8+XG5leHBvcnQgY2xhc3MgV29ya3NwYWNlIHtcbiAgICBvbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtKGNhbGxiYWNrOihhcmc6YW55KSA9PiB2b2lkKTp2b2lkIHtcbiAgICAgICAgcmV0dXJuICg8YW55PmF0b20ud29ya3NwYWNlKS5vbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtKGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBvbkRpZE9wZW4oY2FsbGJhY2s6KGFyZzphbnkpID0+IHZvaWQpOnZvaWQge1xuICAgICAgICByZXR1cm4gKDxhbnk+YXRvbS53b3Jrc3BhY2UpLm9uRGlkT3BlbihjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgYWRkTW9kYWxQYW5lbChhcmc6QWRkTW9kYWxQYW5lbEFyZyk6YW55IHtcbiAgICAgICAgcmV0dXJuIGF0b20ud29ya3NwYWNlLmFkZE1vZGFsUGFuZWwoYXJnKTtcbiAgICB9XG5cbiAgICBnZXRBY3RpdmVUZXh0RWRpdG9yKCk6IElUZXh0RWRpdG9yIHtcbiAgICAgICAgcmV0dXJuIGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKTtcbiAgICB9XG5cbiAgICBnZXRBY3RpdmVQYW5lKCk6IElQYW5lIHtcbiAgICAgICAgcmV0dXJuIGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVBhbmUoKTtcbiAgICB9XG5cbiAgICBnZXRBY3RpdmVFZGl0b3IoKTogSUVkaXRvciB7XG4gICAgICAgIHJldHVybiBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVFZGl0b3IoKTtcbiAgICB9XG5cbiAgICBhZGRSaWdodFBhbmVsKGFyZzogYW55KSB7XG4gICAgICAgIHJldHVybiAoPGFueT5hdG9tLndvcmtzcGFjZSkuYWRkUmlnaHRQYW5lbChhcmcpO1xuICAgIH1cblxuICAgIHBhbmVGb3JJdGVtKGFyZzogYW55KSB7XG4gICAgICAgIHJldHVybiAoPGFueT5hdG9tLndvcmtzcGFjZSkucGFuZUZvckl0ZW0oYXJnKTtcbiAgICB9XG4gICAgZ2V0UGFuZUl0ZW1zKCkge1xuICAgICAgICByZXR1cm4gKDxhbnk+IGF0b20ud29ya3NwYWNlKS5nZXRQYW5lSXRlbXMoKTtcbiAgICB9XG4gICAgb25EaWRBZGRQYW5lSXRlbShjYWxsYmFjazogKGV2ZW50OiB7IGl0ZW06IGFueTsgcGFuZTogSVBhbmU7IGluZGV4OiBudW1iZXIgfSkgPT4gdm9pZCkge1xuICAgICAgICByZXR1cm4gKDxhbnk+IGF0b20ud29ya3NwYWNlKS5vbkRpZEFkZFBhbmVJdGVtKGNhbGxiYWNrKTtcbiAgICB9XG4gICAgb25EaWREZXN0cm95UGFuZShjYWxsYmFjazogKGV2ZW50OiB7IHBhbmU6IElQYW5lIH0pID0+IHZvaWQpIHtcbiAgICAgICAgcmV0dXJuICg8YW55PiBhdG9tLndvcmtzcGFjZSkub25EaWREZXN0cm95UGFuZShjYWxsYmFjayk7XG4gICAgfVxuICAgIG9wZW4ocGF0aCwgYXJncykge1xuICAgICAgICBhdG9tLndvcmtzcGFjZS5vcGVuKHBhdGgsIGFyZ3MpO1xuICAgIH1cblxuICAgIG9ic2VydmVUZXh0RWRpdG9ycyhjYWxsYmFjayA6IChlZGl0b3I6SVRleHRFZGl0b3IpPT52b2lkKSB7XG4gICAgICAgIGF0b20ud29ya3NwYWNlLm9ic2VydmVUZXh0RWRpdG9ycyhjYWxsYmFjayk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gb3BlbihwYXRoc1RvT3Blbikge1xuICAgICg8YW55PmF0b20pLm9wZW4ocGF0aHNUb09wZW4pO1xufVxuXG5pbnRlcmZhY2UgSVBhbmUge1xuICAgIHNwbGl0VXAoYXJnOmFueSk6IElQYW5lO1xuXG4gICAgc3BsaXREb3duKGFyZzphbnkpOiBJUGFuZTtcblxuICAgIHNwbGl0TGVmdChhcmc6YW55KTogSVBhbmU7XG5cbiAgICBzcGxpdFJpZ2h0KGFyZzphbnkpOiBJUGFuZTtcblxuICAgIGFkZEl0ZW0oaXRlbTphbnksIGluZGV4Om51bWJlcik7XG5cbiAgICBhY3RpdmF0ZUl0ZW1BdEluZGV4KGFyZzogYW55KTtcbiAgICBcbiAgICBtb3ZlSXRlbVRvUGFuZShpdGVtOmFueSwgcGFuZTpJUGFuZSwgaW5kZXg6bnVtYmVyKTp2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBvaW50e1xuICAgIHJvdzpudW1iZXI7XG4gICAgY29sdW1uOm51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSYW5nZSB7XG4gICAgc3RhcnQ6UG9pbnQ7XG4gICAgZW5kOlBvaW50O1xufVxuXG5leHBvcnQgIGludGVyZmFjZSAgSUN1cnNvciB7XG4gICAgZ2V0QnVmZmVyUG9zaXRpb24oKTogUG9pbnQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgIElCdWZmZXIge1xuICAgIHBvc2l0aW9uRm9yQ2hhcmFjdGVySW5kZXgoaW5kZXhPZjphbnkpOiBQb2ludDtcbiAgICBjaGFyYWN0ZXJJbmRleEZvclBvc2l0aW9uKHBvc2l0aW9uOlBvaW50KTpudW1iZXI7XG5cbiAgICByYW5nZUZvclJvdyhhbnkpOiBSYW5nZTtcblxuICAgIHNldFRleHQodGV4dCk7XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSAgSVRleHRFZGl0b3Ige1xuICAgIGdldFRleHQoKTogc3RyaW5nO1xuXG4gICAgZ2V0UGF0aCgpOiBzdHJpbmc7XG5cbiAgICBnZXRMYXN0Q3Vyc29yKCk6IElDdXJzb3I7XG5cbiAgICBnZXRCdWZmZXIoKTogSUJ1ZmZlcjtcblxuICAgIHNldFRleHQodGV4dCk7XG5cbiAgICBnZXRDdXJzb3JCdWZmZXJQb3NpdGlvbigpOlBvaW50O1xuXG4gICAgb25EaWREZXN0cm95KGNhbGxiYWNrOigpPT52b2lkKTtcblxuICAgIG9uRGlkQ2hhbmdlQ3Vyc29yUG9zaXRpb24oY2FsbGJhY2s6IChldmVudDp7XG4gICAgICAgICBvbGRCdWZmZXJQb3NpdGlvbjpQb2ludCxcbiAgICAgICAgIG9sZFNjcmVlblBvc2l0aW9uOlBvaW50LFxuICAgICAgICAgbmV3QnVmZmVyUG9zaXRpb246UG9pbnQsXG4gICAgICAgICBuZXdTY3JlZW5Qb3NpdGlvbjpQb2ludCxcbiAgICAgICAgIHRleHRDaGFuZ2VkOmJvb2xlYW4sXG4gICAgICAgICBjdXJzb3I6IElDdXJzb3JcbiAgICAgfSk9PnZvaWQpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlICBJRWRpdG9yIHtcbiAgICBnZXRCdWZmZXIoKTogSUJ1ZmZlcjtcblxuICAgIHNldFNlbGVjdGVkQnVmZmVyUmFuZ2UocmFuZ2U6IGFueSwgYXJnOiBhbnkpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFkZE1vZGFsUGFuZWxBcmcge1xuICAgIGl0ZW06IGFueTtcbn1cblxuZXhwb3J0IHZhciB3b3Jrc3BhY2U6V29ya3NwYWNlID0gbmV3IFdvcmtzcGFjZSgpO1xuXG5leHBvcnQgaW50ZXJmYWNlIElDb21tYW5kTWFuYWdlciB7XG4gICAgYWRkKHNlbGVjdG9yOiBzdHJpbmcsIHR5cGU6IHN0cmluZywgY2FsbGJhY2s6ICgpID0+IHZvaWQpOiBBdG9tQ29yZS5EaXNwb3NhYmxlO1xufVxuXG5leHBvcnQgY2xhc3MgQ29tbWFuZE1hbmFnZXIge1xuICAgIGFkZChzZWxlY3Rvcjogc3RyaW5nLCB0eXBlOiBzdHJpbmcsIGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHJldHVybiBhdG9tLmNvbW1hbmRzLmFkZChzZWxlY3RvciwgdHlwZSwgY2FsbGJhY2spO1xuICAgIH1cbn1cblxuZXhwb3J0IHZhciBjb21tYW5kcyA9IG5ldyBDb21tYW5kTWFuYWdlcigpOyJdfQ==\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/core/atomWrapper.js\n// module id = 3\n// module chunks = 0","\"use strict\";\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar UI = require(\"atom-ui-lib\");\nvar SC = require(\"../util/ScrollViewUI\");\nvar CompositeDisposable = UI.CompositeDisposable;\nvar details = require(\"./details\");\nvar editorTools = require(\"./editor-tools\");\nvar ramlServer = require(\"api-language-server\");\nvar reconciler_1 = require(\"./reconciler\");\nvar RamlDetails = /** @class */ (function (_super) {\n    __extends(RamlDetails, _super);\n    function RamlDetails(allowStructureChanges) {\n        if (allowStructureChanges === void 0) { allowStructureChanges = true; }\n        var _this = _super.call(this) || this;\n        _this.allowStructureChanges = allowStructureChanges;\n        _this.disposables = new CompositeDisposable();\n        _this.addClass('raml-details');\n        var connection = ramlServer.getNodeClientConnection();\n        connection.onDetailsReport(function (report) { return _this.onDetailsReport(report); });\n        _this.reconciler = new reconciler_1.Reconciler(connection, 800);\n        return _this;\n    }\n    RamlDetails.prototype.getTitle = function () {\n        return \"Details\";\n    };\n    RamlDetails.prototype.attached = function () {\n        try {\n            this.element.innerHTML = \"<div></div>\";\n            this._children = [];\n            this.container = UI.vc();\n            this.addChild(this.container);\n            this.ui().appendChild(this.container.ui());\n            _super.prototype.attached.call(this);\n        }\n        catch (e) {\n        }\n    };\n    RamlDetails.prototype.setResource = function (detailsNode, context) {\n        if (this.wasSchema) {\n            this.schemaView.dispose();\n            this.schemaView = null;\n        }\n        this.wasSchema = false;\n        window[\"detailsnode\"] = detailsNode;\n        window[\"detailscontext\"] = context;\n        if (detailsNode == null)\n            this.displayEmpty();\n        details.updateDetailsPanel(detailsNode, context, this.container, true);\n    };\n    RamlDetails.prototype.update = function () {\n        if (window[\"detailsnode\"]) {\n            this.setResource(window[\"detailsnode\"], window[\"detailscontext\"]);\n        }\n    };\n    RamlDetails.prototype.displayEmpty = function () {\n        this.container.clear();\n        // if (!editorTools.aquireManager().ast) {\n        //     this.container.addChild(UI.h3(\"Our API is fabulously empty\").margin(8, 8, 20, 8));\n        //     var create = new UI.Button(\"Create new API\", UI.ButtonSizes.LARGE, UI.ButtonHighlights.SUCCESS, UI.Icon.REPO_CLONE, ()=>dialogs.newApi());\n        //     create.margin(8, 8, 20, 0);\n        //     this.container.addChild(create);\n        // }\n    };\n    RamlDetails.prototype.destroy = function () {\n        editorTools.aquireManager()._details = null;\n        this.disposables.dispose();\n        this._unitPath = null;\n        this._position = null;\n        this.container.dispose();\n        this.container = null;\n        window[\"detailsnode\"] = null;\n        window[\"detailscontext\"] = null;\n        this._children = [];\n        if (details.oldItem) {\n            details.oldItem.detach();\n        }\n        if (this.wasSchema) {\n            this.schemaView.dispose();\n            this.schemaView = null;\n        }\n        details.oldItem = null;\n    };\n    RamlDetails.prototype.show = function (unitPath, position, force) {\n        var _this = this;\n        if (force === void 0) { force = false; }\n        if (!force && this._unitPath == unitPath && this._position === position)\n            return;\n        this._unitPath = unitPath;\n        this._position = position;\n        var reconciler = this.reconciler;\n        try {\n            // if (isSchema(node))\n            //     this.setSchema(this._node);\n            // else\n            //     this.setResource(node);\n            ramlServer.getNodeClientConnection().getDetails(unitPath, position).then(function (detailsNode) {\n                _this.setResource(detailsNode, {\n                    uri: unitPath,\n                    position: position,\n                    localModel: false,\n                    reconciler: reconciler\n                });\n            });\n        }\n        catch (e) { }\n    };\n    RamlDetails.prototype.onDetailsReport = function (report) {\n        var _this = this;\n        if (report.uri != this._unitPath)\n            return;\n        var reconciler = this.reconciler;\n        //if (this._position == report.position) return;\n        ramlServer.getNodeClientConnection().getLatestVersion(report.uri).then(function (latestVersion) {\n            //ignoring outdated reports\n            if (report.version != null && report.version < latestVersion)\n                return;\n            _this.setResource(report.details, {\n                uri: report.uri,\n                position: report.position,\n                localModel: false,\n                reconciler: reconciler,\n            });\n        });\n    };\n    return RamlDetails;\n}(SC.Scrollable));\nexports.RamlDetails = RamlDetails;\n// function isSchema(p: hl.IHighLevelNode) {\n//     if (!p){\n//         return false;\n//     }\n//     return universeHelpers.isGlobalSchemaType(p.definition());\n// } \n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/editor-tools/details-view.js\n// module id = 4\n// module chunks = 0","module.exports = require(\"atom-ui-lib\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"atom-ui-lib\"\n// module id = 5\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Created by kor on 22/06/15.\n */\nvar SpacePenViews = require(\"atom-space-pen-views\");\nvar Scrollable = /** @class */ (function (_super) {\n    __extends(Scrollable, _super);\n    function Scrollable() {\n        var _this = _super.call(this) || this;\n        _this._children = [];\n        return _this;\n    }\n    Scrollable.content = function () {\n        var v = this.div({ class: 'scrollpad pane-item padded', tabindex: -1, style: \"overflow:scroll;\" });\n        return v;\n    };\n    Scrollable.prototype.dispose = function () {\n    };\n    Scrollable.prototype.caption = function () { return \"\"; };\n    Scrollable.prototype.scroll = function (top, left) {\n        this.element.scrollTop = top;\n        this.element.scrollLeft = left;\n    };\n    Scrollable.prototype.size = function () {\n        return {\n            top: this.element.scrollTop,\n            left: this.element.scrollLeft,\n            bottom: this.element.scrollTop + this.element.clientHeight,\n            right: this.element.scrollLeft + this.element.clientWidth\n        };\n    };\n    Scrollable.prototype.changed = function () { };\n    Scrollable.prototype.refresh = function () { };\n    Scrollable.prototype.ui = function () {\n        return this.element;\n    };\n    Scrollable.prototype.setParent = function (p) {\n        if (this._parent != null)\n            this._parent.removeChild(this);\n        this._parent = p;\n    };\n    //TODO REMOVE COPY PASTE\n    Scrollable.prototype.addChild = function (child) {\n        child.setParent(this);\n        this._children.push(child);\n        //this.changed();\n    };\n    Scrollable.prototype.removeChild = function (child) {\n        this._children = this._children.filter(function (x) { return x != child; });\n        // this.changed();\n    };\n    Scrollable.prototype.doRender = function () {\n        return this.innerRenderUI();\n    };\n    /**\n     *\n     * @returns not null element;\n     */\n    Scrollable.prototype.selfRender = function () {\n        return document.createElement(\"div\");\n    };\n    Scrollable.prototype.attached = function () {\n        this.html(this.innerRenderUI());\n    };\n    Scrollable.prototype.innerRenderUI = function () {\n        var start = this.selfRender();\n        this._children.forEach(function (x) {\n            var el = x.renderUI();\n            if (el) {\n                start.appendChild(el);\n            }\n        });\n        return start;\n    };\n    Scrollable.prototype.renderUI = function () {\n        return this.element;\n    };\n    Scrollable.prototype.parent = function () {\n        return null;\n    };\n    Scrollable.prototype.children = function () {\n        return this._children;\n    };\n    Scrollable.prototype.isAttached = function () {\n        return true;\n    };\n    return Scrollable;\n}(SpacePenViews.ScrollView));\nexports.Scrollable = Scrollable;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL3V0aWwvU2Nyb2xsVmlld1VJLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOztHQUVHO0FBQ0gsb0RBQXVEO0FBRXZEO0lBQWdDLDhCQUF3QjtJQUlwRDtRQUFBLFlBQ0ksaUJBQU8sU0FDVjtRQUpBLGVBQVMsR0FBcUIsRUFBRSxDQUFBOztJQUlqQyxDQUFDO0lBQ00sa0JBQU8sR0FBZDtRQUNJLElBQUksQ0FBQyxHQUFTLElBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsNEJBQTRCLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUE7UUFFekcsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNiLENBQUM7SUFDRCw0QkFBTyxHQUFQO0lBRUEsQ0FBQztJQUlELDRCQUFPLEdBQVAsY0FBWSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV4QiwyQkFBTSxHQUFOLFVBQU8sR0FBVyxFQUFFLElBQVk7UUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUNuQyxDQUFDO0lBRUQseUJBQUksR0FBSjtRQUNJLE1BQU0sQ0FBQztZQUNILEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVM7WUFDM0IsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVTtZQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZO1lBQzFELEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVc7U0FDNUQsQ0FBQTtJQUNMLENBQUM7SUFFRCw0QkFBTyxHQUFQLGNBQVksQ0FBQztJQUNiLDRCQUFPLEdBQVAsY0FBWSxDQUFDO0lBR2IsdUJBQUUsR0FBRjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFJRCw4QkFBUyxHQUFULFVBQVUsQ0FBaUI7UUFDdkIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVELHdCQUF3QjtJQUN4Qiw2QkFBUSxHQUFSLFVBQVMsS0FBNEM7UUFDakQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixpQkFBaUI7SUFDckIsQ0FBQztJQUNELGdDQUFXLEdBQVgsVUFBWSxLQUFxQjtRQUM3QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFHLE9BQUEsQ0FBQyxJQUFJLEtBQUssRUFBVixDQUFVLENBQUMsQ0FBQztRQUN2RCxrQkFBa0I7SUFDdEIsQ0FBQztJQUNELDZCQUFRLEdBQVI7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFDRDs7O09BR0c7SUFDSywrQkFBVSxHQUFsQjtRQUNJLE1BQU0sQ0FBTSxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCw2QkFBUSxHQUFSO1FBQ1UsSUFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0lBRUQsa0NBQWEsR0FBYjtRQUNJLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7WUFDcEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFBO1lBQ3JCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxQixDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCw2QkFBUSxHQUFSO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELDJCQUFNLEdBQU47UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCw2QkFBUSxHQUFSO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELCtCQUFVLEdBQVY7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDTCxpQkFBQztBQUFELENBdkdBLEFBdUdDLENBdkcrQixhQUFhLENBQUMsVUFBVSxHQXVHdkQ7QUF2R1ksZ0NBQVUiLCJmaWxlIjoic3JjL2F0b20vdXRpbC9TY3JvbGxWaWV3VUkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkga29yIG9uIDIyLzA2LzE1LlxuICovXG5pbXBvcnQgU3BhY2VQZW5WaWV3cyA9IHJlcXVpcmUoJ2F0b20tc3BhY2UtcGVuLXZpZXdzJyk7XG5pbXBvcnQgVUkgPSByZXF1aXJlKFwiYXRvbS11aS1saWJcIilcbmV4cG9ydCBjbGFzcyBTY3JvbGxhYmxlIGV4dGVuZHMgU3BhY2VQZW5WaWV3cy5TY3JvbGxWaWV3IGltcGxlbWVudHMgVUkuVUlDb21wb25lbnQge1xuXG4gICAgIF9jaGlsZHJlbjogVUkuVUlDb21wb25lbnRbXSA9IFtdXG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgc3RhdGljIGNvbnRlbnQoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICB2YXIgdiA9ICg8YW55PnRoaXMpLmRpdih7IGNsYXNzOiAnc2Nyb2xscGFkIHBhbmUtaXRlbSBwYWRkZWQnLCB0YWJpbmRleDogLTEsIHN0eWxlOiBcIm92ZXJmbG93OnNjcm9sbDtcIiB9KVxuXG4gICAgICAgIHJldHVybiB2O1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuXG4gICAgfVxuICAgIGVsZW1lbnQ6SFRNTEVsZW1lbnRcblxuXG4gICAgY2FwdGlvbigpIHsgcmV0dXJuIFwiXCI7IH1cblxuICAgIHNjcm9sbCh0b3A6IG51bWJlciwgbGVmdDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zY3JvbGxUb3AgPSB0b3A7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zY3JvbGxMZWZ0ID0gbGVmdDsgICAgXG4gICAgfVxuICAgIFxuICAgIHNpemUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IHRoaXMuZWxlbWVudC5zY3JvbGxUb3AsXG4gICAgICAgICAgICBsZWZ0OiB0aGlzLmVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICAgICAgICAgIGJvdHRvbTogdGhpcy5lbGVtZW50LnNjcm9sbFRvcCArIHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgICAgICByaWdodDogdGhpcy5lbGVtZW50LnNjcm9sbExlZnQgKyB0aGlzLmVsZW1lbnQuY2xpZW50V2lkdGhcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoYW5nZWQoKSB7IH1cbiAgICByZWZyZXNoKCkgeyB9XG5cbiAgICBwcml2YXRlIF91aTogVUkuSFRNTFR5cGVzO1xuICAgIHVpKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xuICAgIH1cblxuICAgIHByaXZhdGUgX3BhcmVudDogVUkuVUlDb21wb25lbnQ7XG5cbiAgICBzZXRQYXJlbnQocDogVUkuVUlDb21wb25lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3BhcmVudCAhPSBudWxsKVxuICAgICAgICAgICAgdGhpcy5fcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHA7XG4gICAgfVxuXG4gICAgLy9UT0RPIFJFTU9WRSBDT1BZIFBBU1RFXG4gICAgYWRkQ2hpbGQoY2hpbGQ6IFVJLlVJQ29tcG9uZW50fFVJLkJhc2ljQ29tcG9uZW50PGFueT4pIHtcbiAgICAgICAgY2hpbGQuc2V0UGFyZW50KHRoaXMpO1xuICAgICAgICB0aGlzLl9jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgICAgLy90aGlzLmNoYW5nZWQoKTtcbiAgICB9XG4gICAgcmVtb3ZlQ2hpbGQoY2hpbGQ6IFVJLlVJQ29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMuX2NoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW4uZmlsdGVyKHg9PiB4ICE9IGNoaWxkKTtcbiAgICAgICAgLy8gdGhpcy5jaGFuZ2VkKCk7XG4gICAgfVxuICAgIGRvUmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbm5lclJlbmRlclVJKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHJldHVybnMgbm90IG51bGwgZWxlbWVudDtcbiAgICAgKi9cbiAgICBwcml2YXRlIHNlbGZSZW5kZXIoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gPGFueT5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIH1cblxuICAgIGF0dGFjaGVkKCkge1xuICAgICAgICAoPGFueT50aGlzKS5odG1sKHRoaXMuaW5uZXJSZW5kZXJVSSgpKVxuICAgIH1cblxuICAgIGlubmVyUmVuZGVyVUkoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNlbGZSZW5kZXIoKTtcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4uZm9yRWFjaCh4PT4ge1xuICAgICAgICAgICAgdmFyIGVsID0geC5yZW5kZXJVSSgpXG4gICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICBzdGFydC5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzdGFydDtcbiAgICB9XG5cbiAgICByZW5kZXJVSSgpOiBVSS5IVE1MVHlwZXMge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xuICAgIH1cblxuICAgIHBhcmVudCgpOiBhbnkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjaGlsZHJlbigpOiBVSS5VSUNvbXBvbmVudFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuO1xuICAgIH1cblxuICAgIGlzQXR0YWNoZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn0iXX0=\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/util/ScrollViewUI.js\n// module id = 6\n// module chunks = 0","module.exports = require(\"atom-space-pen-views\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"atom-space-pen-views\"\n// module id = 7\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar UI = require(\"atom-ui-lib\");\nvar detailElements = require(\"./detailElements\");\nvar HTTPANDHTTPS = \"HTTP, HTTPS\";\nvar HTTPHTTPS = \"HTTP/HTTPS\";\nexports.nodes = {\n    Api: {\n        properties: [\"title\", \"version\", \"baseUri\", \"mediaType\", \"protocols\"],\n        actions: []\n    },\n    Resource: {\n        properties: [\"relativeUri\", \"displayName\", \"description\", \"is\", \"type\"]\n    },\n    Method: {\n        properties: [\"method\", \"displayName\", \"description\", \"is\", \"type\", \"protocols\", \"securedBy\"]\n    },\n    DataElement: {\n        properties: [\"name\", \"displayName\", \"description\", \"default\", \"required\"]\n    },\n    Response: {\n        properties: [\"code\", \"description\"]\n    }\n};\nexports.filterOut = {\n    properties: [\"location\", \"annotations\", \"repeat\", \"locationKind\", \"signature\"]\n};\nvar focusedPropertyName = null;\nvar focusedPosition = -1;\nvar toFocus = null;\nfunction updateDetailsPanel(detailsReport, context, panel, updateTextOnDone) {\n    if (updateTextOnDone === void 0) { updateTextOnDone = false; }\n    panel.clear();\n    var cfg = atom.config;\n    var l = atom.styles.emitter.handlersByEventName;\n    var sadd = [].concat(l['did-add-style-element']);\n    var sremove = [].concat(l['did-remove-style-element']);\n    var schange = [].concat(l['did-update-style-element']);\n    var cfgCh = [].concat(cfg.emitter.handlersByEventName['did-change']);\n    var grammars = (atom.grammars.emitter || atom.grammars.textmateRegistry.emitter);\n    var addGrammar = [].concat(grammars[\"did-add-grammar\"]);\n    var updateGrammar = [].concat(grammars[\"did-update-grammar\"]);\n    var emptyGrammarListeners = [].concat(atom.grammars.nullGrammar.emitter.handlersByEventName[\"did-update\"]);\n    try {\n        var empty = true;\n        var item = detailElements.buildItem(detailsReport, context, false);\n        // item.addListener(x=> {\n        //     editorTools.aquireManager().updateText(null);\n        // })\n        var rend;\n        try {\n            rend = item.render({});\n        }\n        finally {\n            if (exports.oldItem) {\n                exports.oldItem.detach();\n            }\n            exports.oldItem = item;\n            if (rend) {\n                panel.addChild(rend);\n            }\n            empty = false;\n        }\n        if (toFocus) {\n            var field = toFocus.getActualField().ui();\n            field.focus();\n            field.getModel().setCursorBufferPosition(focusedPosition);\n            toFocus = null;\n            focusedPosition = null;\n            focusedPropertyName = null;\n        }\n        if (empty) {\n            var errLabel = UI.h3(\"Object has no additional properties.\");\n            UI.applyStyling(UI.TextClasses.WARNING, errLabel);\n            errLabel.setStyle(\"text-align\", \"center\").margin(0, 0, 24, 12);\n            panel.addChild(errLabel);\n        }\n    }\n    catch (Error) {\n        throw Error;\n    }\n    finally {\n        cfg.emitter.handlersByEventName['did-change'] = cfgCh;\n        l['did-add-style-element'] = sadd;\n        l['did-remove-style-element'] = sremove;\n        l['did-update-style-element'] = schange;\n        grammars[\"did-add-grammar\"] = addGrammar;\n        grammars[\"did-update-grammar\"] = updateGrammar;\n        atom.grammars.nullGrammar.emitter.handlersByEventName[\"did-update\"] = emptyGrammarListeners;\n    }\n}\nexports.updateDetailsPanel = updateDetailsPanel;\n// function getSchemaType(value: string)\n// {\n//     var schema = schemautil.createSchema(value, null);\n//     if (!schema || !schema.getType) return \"Invalid\";\n//     switch (schema.getType()) {\n//         case \"source.json\":\n//             return \"JSON\";\n//         case \"text.xml\":\n//             return \"XML\";\n//         default :\n//             return \"Unknown type\";\n//     }\n// }\n// export function getStringValue(x : string | hl.IStructuredValue) : string {\n//     if (typeof x ===\"object\") return (<hl.IStructuredValue>x).valueName();\n//     else return <string>x;\n// }\n//\n// export function propertyInfo(node: hl.IHighLevelNode, name: string) {\n//     var prop = node.definition().property(name);\n//     if (prop.isValueProperty() == false) return null;\n//     var isMulti = prop.isMultiValue();\n//     var required = prop.isRequired();\n//     var value : string;\n//     var values = [];\n//     var type : string;\n//     var ipath: string;\n//     var rangeName = prop.range().nameId();\n//\n//     if (isMulti) {\n//         values = node.attributes(name).map(x=>x.value());\n//         value = values.map(x=>getStringValue(x)).join(\", \");\n//         switch (rangeName) {\n//             case \"StringType\":\n//                 type = 'enum';\n//                 if (!node.definition().getAdapter(def.RAMLService).isUserDefined()&&name==\"protocols\"){\n//                     type=\"protocols\"\n//                 }\n//                 break;\n//             case \"TraitRef\":\n//                 type = 'trait';\n//                 break;\n//             default:\n//                 type = 'unknown';\n//         }\n//     } else {\n//         var attr = node.attr(name);\n//         value = attr && attr.value() ? attr.value() : \"\";\n//\n//         switch (rangeName) {\n//             case \"MarkdownString\":\n//                 type = 'markdown';\n//                 values = value.split(\"\\n\");\n//                 value =  values[0];\n//                 break;\n//             case \"SchemaString\":\n//                 type = 'schema';\n//                 if (value.indexOf(\"\\n\") >= 0) {\n//                     values = [value];\n//                     value = \"(\" + getSchemaType(value) + \" Schema)\";\n//                 }\n//                 break;\n//             case \"ExampleString\":\n//                 type = 'schexample';\n//                 try {\n//                     ipath = attr.lowLevel().includePath();\n//                 } catch(e) { ipath = \"\"; }\n//                 values = [value, ipath];\n//                 value =  \"Example\" + (ipath != \"\" ? \" (referenced from \" + ipath + \")\" : \"\");\n//                 break;\n//             case \"ResourceTypeRef\":\n//                 type = \"type\";\n//                 break;\n//             default:\n//                 type = 'string';\n//         }\n//         if (type == \"string\") {\n//             if (value.indexOf(\"\\n\") >= 0) {\n//                 values = value.split(\"\\n\");\n//                 value = \"(\" + values.length + \" lines) \" + values[0].substring(0, 20) + \" ...\";\n//                 type = \"multiline\";\n//             }\n//             if (attr)\n//                 ipath = attr.lowLevel().includePath();\n//\n//             if (ipath) {\n//                 value = \"(included from \" + ipath +\")\";\n//                 type = \"include\";\n//             }\n//         }\n//     }\n//     var ret = {\n//         value: value,\n//         values: values,\n//         type: type,\n//         include: ipath,\n//         required: required,\n//     };\n//     return ret;\n// }\n// export function stringView(node: hl.IHighLevelNode, name: string) {\n//     return getStringValue(propertyInfo(node, name).value);\n// } \n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/editor-tools/details.js\n// module id = 8\n// module chunks = 0","\"use strict\";\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\nvar UI = require(\"atom-ui-lib\");\n//import contextActions = require(\"raml-actions\")\nvar assistUtils = require(\"../dialogs/assist-utils\");\nvar ramlServer = require(\"api-language-server\");\nvar assist_utils_1 = require(\"../dialogs/assist-utils\");\nvar contextMenuImpl_1 = require(\"../context-menu/contextMenuImpl\");\nvar lastSelectedCaption;\nvar inRender = false;\n/**\n * Runnable that updates details values remotely\n */\nvar UpdateModelRunnable = /** @class */ (function () {\n    function UpdateModelRunnable(context, item, newValue) {\n        this.context = context;\n        this.item = item;\n        this.newValue = newValue;\n        this.cancelled = false;\n    }\n    /**\n     * Performs the actual business logics.\n     * Should resolve the promise when finished.\n     */\n    UpdateModelRunnable.prototype.run = function () {\n        if (this.context.localModel) {\n            this.context.localModel[this.item.id] = this.newValue;\n            return Promise.resolve([]);\n        }\n        var connection = ramlServer.getNodeClientConnection();\n        return connection.changeDetailValue(this.context.uri, this.context.position, this.item.id, this.newValue);\n    };\n    /**\n     * Whether two runnable conflict with each other.\n     * Must work fast as its called often.\n     * @param other\n     */\n    UpdateModelRunnable.prototype.conflicts = function (other) {\n        if (isUpdateModelRunnable(other)) {\n            return this.getUri() === other.getUri();\n        }\n        return false;\n    };\n    /**\n     * Cancels the runnable. run() method should do nothing if launched later,\n     * if cancel is called during the run() method execution, run() should stop as soon as it can.\n     */\n    UpdateModelRunnable.prototype.cancel = function () {\n        this.cancelled = true;\n    };\n    /**\n     * Whether cancel() method was called at least once.\n     */\n    UpdateModelRunnable.prototype.isCanceled = function () {\n        return this.cancelled;\n    };\n    UpdateModelRunnable.prototype.getUri = function () {\n        return this.context.uri;\n    };\n    return UpdateModelRunnable;\n}());\n/**\n * Instanceof for UpdateModelRunnable\n * @param runnable\n */\nfunction isUpdateModelRunnable(runnable) {\n    return runnable.getUri != null;\n}\nvar Item = /** @class */ (function () {\n    function Item(_title, description) {\n        if (description === void 0) { description = \"\"; }\n        this._title = _title;\n        this.description = description;\n        this.listeners = [];\n    }\n    Item.prototype.needsSeparateLabel = function () {\n        return false;\n    };\n    Item.prototype.detach = function () {\n        this.dispose();\n        this.children().forEach(function (x) {\n            if (x.detach)\n                x.detach();\n        });\n    };\n    Item.prototype.addListener = function (r) {\n        this.listeners.push(r);\n    };\n    Item.prototype.removeListener = function (r) {\n        this.listeners = this.listeners.filter(function (x) { return x != r; });\n    };\n    Item.prototype.add = function (i) {\n        throw new Error(\"Not supported\");\n    };\n    Item.prototype.root = function () {\n        if (this.parent) {\n            return this.parent.root();\n        }\n        return this;\n    };\n    Item.prototype.title = function () {\n        return this._title;\n    };\n    Item.prototype.children = function () {\n        return [];\n    };\n    Item.prototype.setDescription = function (desc) {\n        this.description = desc;\n    };\n    Item.prototype.setTitle = function (t) {\n        this._title = t;\n    };\n    Item.prototype.render = function (r) {\n        if (r === void 0) { r = {}; }\n        throw new Error(\"Not Implemented\");\n    };\n    Item.prototype.item = function (name) {\n        return null;\n    };\n    Item.prototype.setError = function (text) {\n    };\n    Item.prototype.clearErrors = function () {\n    };\n    return Item;\n}());\nexports.Item = Item;\nvar TypeDisplayItem = /** @class */ (function (_super) {\n    __extends(TypeDisplayItem, _super);\n    function TypeDisplayItem(detailsNode, context) {\n        var _this = _super.call(this, \"Type \" + detailsNode.title, \"\") || this;\n        _this.detailsNode = detailsNode;\n        _this.context = context;\n        return _this;\n    }\n    TypeDisplayItem.prototype.render = function (r) {\n        var container = new UI.WrapPanel();\n        container.setCaption(this.title());\n        return container;\n        //return typeDisplay.render(this.detailsNode);\n    };\n    TypeDisplayItem.prototype.dispose = function () {\n    };\n    return TypeDisplayItem;\n}(Item));\nexports.TypeDisplayItem = TypeDisplayItem;\nvar Category = /** @class */ (function (_super) {\n    __extends(Category, _super);\n    function Category() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._children = [];\n        return _this;\n    }\n    Category.prototype.add = function (i) {\n        i.parent = this;\n        this._children.push(i);\n    };\n    Category.prototype.children = function () {\n        return this._children;\n    };\n    Category.prototype.plainChildren = function () {\n        return this._children.filter(function (x) { return !(x instanceof Category); });\n    };\n    Category.prototype.categories = function () {\n        return this._children.filter(function (x) { return (x instanceof Category); });\n    };\n    Category.prototype.item = function (name) {\n        var it;\n        this._children.forEach(function (x) {\n            if (x.title() == name) {\n                it = x;\n            }\n            var rr = x.item(name);\n            if (rr) {\n                it = rr;\n            }\n        });\n        return it;\n    };\n    Category.prototype.render = function (r) {\n        var _this = this;\n        if (r === void 0) { r = {}; }\n        var section = this.createSection(r);\n        this._result = section;\n        if (this.description && r.showDescription) {\n            this.descriptionLabel = UI.label(this.description);\n            section.addChild(this.descriptionLabel);\n        }\n        this.contributeTop(section);\n        this.plainChildren().forEach(function (x) { return _this.addChild(section, x); });\n        var wrappedChild = this.createWrappedChild(section);\n        this.subCategories = wrappedChild;\n        var cats = this.categories();\n        var remap = {};\n        cats.forEach(function (x) { return remap[x.title()] = x; });\n        var newCats = [];\n        if (remap[\"General\"]) {\n            newCats.push(remap[\"General\"]);\n            delete remap[\"General\"];\n        }\n        if (remap[\"Facets\"]) {\n            newCats.push(remap[\"Facets\"]);\n            delete remap[\"Facets\"];\n        }\n        for (var c in remap) {\n            newCats.push(remap[c]);\n        }\n        newCats.forEach(function (x) { return _this.addChild(wrappedChild, x); });\n        return section;\n    };\n    Category.prototype.detach = function () {\n        _super.prototype.detach.call(this);\n        this._result.dispose();\n    };\n    Category.prototype.createSection = function (r) {\n        if (r.showHeader) {\n            return new UI.Section(UI.h3(this.title()), false);\n        }\n        var pnl = new UI.Panel();\n        pnl.setCaption(this.title());\n        return pnl;\n    };\n    Category.prototype.createWrappedChild = function (section) {\n        return section;\n    };\n    Category.prototype.addChild = function (section, item) {\n        var child = item.render();\n        if (section instanceof UI.TabFolder) {\n            var tf = section;\n            tf.add(child.caption(), UI.Icon.NONE, child);\n        }\n        else {\n            if (item.needsSeparateLabel()) {\n                var firstLabel = UI.label(item.title());\n                firstLabel.margin(0, 5, 0, 0);\n                section.addChild(firstLabel);\n                section.addChild(UI.label(item.description));\n            }\n            section.addChild(child);\n        }\n    };\n    Category.prototype.contributeTop = function (section) {\n    };\n    Category.prototype.dispose = function () {\n    };\n    Category.prototype.setError = function (text) {\n    };\n    Category.prototype.clearErrors = function () {\n        this._children.forEach(function (x) { return x.clearErrors(); });\n    };\n    Category.prototype.update = function (i) {\n    };\n    return Category;\n}(Item));\nvar TopLevelNode = /** @class */ (function (_super) {\n    __extends(TopLevelNode, _super);\n    function TopLevelNode(detailsNode, context) {\n        var _this = _super.call(this, detailsNode ? detailsNode.title : \"API\", detailsNode ? detailsNode.description : \"\") || this;\n        _this.detailsNode = detailsNode;\n        _this.context = context;\n        _this.ep = null;\n        return _this;\n    }\n    TopLevelNode.prototype.detach = function () {\n        _super.prototype.detach.call(this);\n        this._result.dispose();\n    };\n    TopLevelNode.prototype.createWrappedChild = function (section) {\n        var tf = new UI.TabFolder();\n        tf.setOnSelected(function () {\n            if (!inRender) {\n                lastSelectedCaption = (tf.selectedComponent().caption());\n            }\n        });\n        section.addChild(tf);\n        return tf;\n    };\n    TopLevelNode.prototype.subCategoryByNameOrCreate = function (name) {\n        var item = _.find(this.children(), function (x) { return x.title() == name; });\n        if (!item) {\n            var rs = new Category(name);\n            this.add(rs);\n            return rs;\n        }\n        return item;\n    };\n    TopLevelNode.prototype.addItemToCategory = function (name, it) {\n        if (name == null) {\n            this._children.push(it);\n            it.parent = this;\n            return;\n        }\n        this.subCategoryByNameOrCreate(name).add(it);\n    };\n    TopLevelNode.prototype.contributeTop = function (section) {\n        this.errorLabel = UI.label(\"\", UI.Icon.BUG, UI.TextClasses.ERROR);\n        this.ep = UI.hc(this.errorLabel);\n        this.ep.setDisplay(false);\n        section.addChild(this.ep);\n    };\n    TopLevelNode.prototype.render = function (r) {\n        if (r === void 0) { r = {}; }\n        inRender = true;\n        try {\n            var result = _super.prototype.render.call(this, r);\n            this._options = r;\n            this._panel = result;\n            var tf = this.subCategories;\n            for (var n = 0; n < tf.tabsCount(); n++) {\n                var item = tf.get(n);\n                if (item.header == lastSelectedCaption) {\n                    tf.setSelectedIndex(n);\n                    return result;\n                }\n            }\n            var documentation = \"\";\n            if (this.detailsNode.description) {\n                documentation = this.detailsNode.description;\n            }\n            if (documentation.length && !r.showDescription) {\n                result.addChild(UI.html(\"<hr/>\"));\n                result.addChild(UI.label(documentation, UI.Icon.INBOX, UI.TextClasses.SUBTLE));\n            }\n            this.update(this);\n            return result;\n        }\n        finally {\n            inRender = false;\n        }\n    };\n    TopLevelNode.prototype.dispose = function () {\n        this.detailsNode = null;\n    };\n    TopLevelNode.prototype.update = function (i) {\n        // if (!this._panel){\n        //     return;\n        // }\n        // if (i instanceof PropertyEditorInfo){\n        //     var prInfo=<PropertyEditorInfo>i;\n        //     if (prInfo.property.getAdapter(def.RAMLPropertyService).isTypeExpr()||prInfo.property.isDescriminator()){\n        //         rp.utils.updateType(this.node);\n        //         var extras=<Category>this.item(\"Facets\");\n        //         if (extras&&extras._result) {\n        //             extras._result.clear();\n        //         }\n        //\n        //         var item=buildItem(this.node,false);\n        //         var newExtras=<Category>item.item(\"Facets\");\n        //         if (newExtras) {\n        //             if (extras&&extras._result) {\n        //                 extras._children = newExtras._children;\n        //                 extras._children.forEach(x=>x.parent = extras);\n        //                 if (extras._children.length > 0) {\n        //                     extras._result.setDisplay(true);\n        //                     //workaroung events flow issue in UI.ts\n        //                 }\n        //                 newExtras.children().forEach(x=> {\n        //                     extras._result.addChild(x.render(this._options))\n        //                 })\n        //             }\n        //             else{\n        //                 this._children.push(newExtras);\n        //                 if (this._panel) {\n        //                     this._panel.addChild(newExtras.render(this._options))\n        //                 }\n        //             }\n        //         }\n        //         else{\n        //             if (extras&&extras._result) {\n        //                 extras._result.setDisplay(false);\n        //             }\n        //         }\n        //     }\n        // }\n        // var kp=null;\n        // this.node.definition().allProperties().forEach(x=>{\n        //     if (x.getAdapter(def.RAMLPropertyService).isKey()){\n        //         kp=x;\n        //     }\n        // })\n        // if (kp){\n        //     var keyItem=<PropertyEditorInfo>this.item(kp.nameId());\n        //     if (keyItem){\n        //         var m=keyItem.fld;\n        //         var vl=m.getBinding().get();\n        //         if ((!vl)||vl.trim().length==0){\n        //             this._panel.getBinding().setStatus(UI.errorStatus(\"\"));\n        //         }\n        //         else{\n        //             this._panel.getBinding().setStatus(UI.okStatus());\n        //         }\n        //     }\n        // }\n        //\n        // var errors;\n        //\n        // if(this.node.property() && universehelpers.isExampleProperty(this.node.property())) {\n        //     var parent = this.node.parent()\n        //\n        //     if(parent) {\n        //         var parsed = parent.parsedType();\n        //\n        //         var exampleMeta =  _.find((<any>parsed).metaInfo || [], (meta: any): boolean => {\n        //             return meta && meta._name === 'example';\n        //         });\n        //\n        //         if(exampleMeta) {\n        //             var validateObject = exampleMeta.validateSelf(this.node.types().getAnnotationTypeRegistry());\n        //\n        //             errors = ((validateObject && validateObject.getErrors()) || []).map(error => {\n        //                 return this.node.createIssue(error);\n        //             });\n        //         }\n        //     }\n        // } else {\n        //     errors = this.node.errors();\n        // }\n        //\n        // this.clearErrors();\n        // this.ep.setDisplay(false)\n        // if (!resourceRegistry.hasAsyncRequests() && errors&&errors.length>0){\n        //     var notFound=[];\n        //     errors.forEach(error=>{\n        //         if (error.extras&&error.extras.length>0){\n        //             error=error.extras[0];\n        //         }\n        //         var item = error.node && this.item(error.node.name());\n        //         if (item){\n        //             item.setError(error.message);\n        //         }\n        //         else{notFound.push(error);}\n        //     })\n        //     if (notFound.length>0){\n        //         this.errorLabel.setIcon(UI.Icon.BUG)\n        //         var et=notFound.map(x=>x.node.name()+\":\"+x.message).join(\",\");\n        //         if (et.length>100){\n        //             et=et.substring(0,100)+\"...\";\n        //         }\n        //         this.errorLabel.setText(et)\n        //         this.ep.setDisplay(true);\n        //     }\n        //     else{\n        //         this.ep.setDisplay(false);\n        //     }\n        // }\n    };\n    return TopLevelNode;\n}(Category));\nvar CheckBox2 = /** @class */ (function (_super) {\n    __extends(CheckBox2, _super);\n    function CheckBox2() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CheckBox2.prototype.setLabelWidth = function (n) {\n        this.setStyle(\"margin-left\", (n + 2) + \"ch\");\n    };\n    return CheckBox2;\n}(UI.CheckBox));\nvar PropertyEditorInfo = /** @class */ (function (_super) {\n    __extends(PropertyEditorInfo, _super);\n    function PropertyEditorInfo(outlineNode, context) {\n        var _this = _super.call(this, outlineNode ? outlineNode.title : \"\", outlineNode ? outlineNode.description : \"\") || this;\n        _this.outlineNode = outlineNode;\n        _this.context = context;\n        _this.rendered = false;\n        _this.update = function (newValue, oldValue) {\n            if (!_this.rendered) {\n                return;\n            }\n            _this.fromEditorToModel(newValue, oldValue);\n        };\n        return _this;\n    }\n    PropertyEditorInfo.prototype.dispose = function () {\n        this.outlineNode = null;\n        if (!this.fld) {\n            return;\n        }\n        this.fld.getBinding().removeListener(this.update);\n    };\n    PropertyEditorInfo.prototype.clearErrors = function () {\n        this.setError(null);\n    };\n    PropertyEditorInfo.prototype.setError = function (text) {\n        if (text) {\n            this.errorLabel.setText(text);\n            this.errorLabel.setDisplay(true);\n        }\n        else {\n            if (this.errorLabel) {\n                this.errorLabel.setDisplay(false);\n            }\n        }\n    };\n    PropertyEditorInfo.prototype.fromEditorToModel = function (newValue, oldValue) {\n        var detailsChangeRunnable = new UpdateModelRunnable(this.context, this.outlineNode, newValue);\n        var context = this.context;\n        context.reconciler.schedule(detailsChangeRunnable).then(function (changedDocuments) {\n            if (context.localModel) {\n                return;\n            }\n            assistUtils.applyChangedDocuments(changedDocuments);\n            assistUtils.gotoPosition(context.position);\n        });\n    };\n    PropertyEditorInfo.prototype.toLocalValue = function (inputValue) {\n        return inputValue;\n    };\n    PropertyEditorInfo.prototype.toUIValue = function (value) {\n        return value;\n    };\n    PropertyEditorInfo.prototype.fromModelToEditor = function () {\n        if (this.fld) {\n            this.fld.getBinding().set(this.outlineNode.valueText);\n        }\n    };\n    PropertyEditorInfo.prototype.render = function () {\n        var container = new UI.WrapPanel();\n        this.errorLabel = UI.label(\"\", UI.Icon.BUG, UI.TextClasses.ERROR);\n        this.errorLabel.setDisplay(false);\n        this.errorLabel.setStyle(\"margin-left\", (this._title.length + 1) + \"ch\");\n        var field = this.createField();\n        this.fld = field;\n        if (field) {\n            field.getBinding().addListener(this.update);\n        }\n        container.setCaption(this.title());\n        this.fromModelToEditor();\n        if (field) {\n            container.addChild(field);\n        }\n        container.addChild(this.errorLabel);\n        this.rendered = true;\n        return container;\n    };\n    PropertyEditorInfo.prototype.createField = function () {\n        return UI.texfField(this.needsSeparateLabel() ? \"\" : this.outlineNode.title, \"\", function (x) { });\n    };\n    return PropertyEditorInfo;\n}(Item));\nvar SimpleMultiEditor = /** @class */ (function (_super) {\n    __extends(SimpleMultiEditor, _super);\n    function SimpleMultiEditor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // fromEditorToModel(){\n    //     // var field=this.fld;\n    //     // var vl=field.getBinding().get();\n    //     // if (vl==null){\n    //     //     vl=\"\";\n    //     // }\n    //     // var attrs=this.node.attributes(this.property.nameId());\n    //     // var av=attrs.map(x=>escapeValue(\"\"+x.value())).join(\", \");\n    //     // if (av==vl){\n    //     //     return;\n    //     // }\n    //     // var ww=vl.split(\",\");\n    //     // var vl=ww.filter(x=>x.trim().length>0).map(x=>x.trim());\n    //     //\n    //     // if(this.node.lowLevel().includePath() && !this.node.lowLevel().unit().resolve(this.node.lowLevel().includePath())) {\n    //     //     return;\n    //     // }\n    //     //\n    //     // var attribute = this.node.attrOrCreate(this.property.nameId());\n    //     // attribute.setValues(vl)\n    //     //\n    //     // var root=this.root()\n    //     // if (root){\n    //     //     root.update(this);\n    //     // }\n    // }\n    SimpleMultiEditor.prototype.fromModelToEditor = function () {\n        if (!this.fld) {\n            return;\n        }\n        this.fld.getBinding().set(this.outlineNode.valueText);\n    };\n    return SimpleMultiEditor;\n}(PropertyEditorInfo));\nfunction escapeValue(v) {\n    if (v.length > 0) {\n        if (v.charAt(0) == \"'\") {\n            return '\"' + v + '\"';\n        }\n        if (v.charAt(0) == '\"') {\n            return '\"' + v + '\"';\n        }\n    }\n    if (v.indexOf(' ') != -1 || v.indexOf(',') != -1) {\n        if (v.indexOf('\"') == -1) {\n            return '\"' + v + '\"';\n        }\n        if (v.indexOf(\"'\") == -1) {\n            return \"'\" + v + \"'\";\n        }\n    }\n    return v;\n}\nvar CheckBoxField = /** @class */ (function (_super) {\n    __extends(CheckBoxField, _super);\n    function CheckBoxField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CheckBoxField.prototype.createField = function () {\n        return new CheckBox2(this.outlineNode.title, UI.Icon.NONE, function (x) { });\n    };\n    CheckBoxField.prototype.toUIValue = function (value) {\n        if (!value) {\n            return false;\n        }\n        if (value === true || value.trim() === 'true') {\n            return true;\n        }\n        return false;\n    };\n    CheckBoxField.prototype.toLocalValue = function (value) {\n        return value + \"\";\n    };\n    return CheckBoxField;\n}(PropertyEditorInfo));\n// class ActionsItem extends Item{\n//\n//     constructor(private node:hl.IHighLevelNode){\n//         super(\"Actions\",\"\");\n//     }\n//     render(r:RenderingOptions){\n//         return suggestions.generateSuggestionsPanel(this.node);\n//     }\n//     dispose(){\n//         this.node=null;\n//     }\n//\n// }\n// class ContextActionsItem extends Item{\n//     constructor(node:hl.IHighLevelNode,name:string,private actions:contextActions.IContextDependedAction[]){\n//         super(name,\"\");\n//     }\n//     dispose(){\n//\n//     }\n//\n//     render(r:RenderingOptions){\n//         var result=UI.hc();\n//         result.addChild(UI.h3(this.title()))\n//         this.actions.forEach(x=>{\n//             result.addChild(UI.button(x.name,UI.ButtonSizes.EXTRA_SMALL,UI.ButtonHighlights.SUCCESS,UI.Icon.CHECKLIST,a=>x.onClick()).margin(3,3,3,3))\n//         })\n//         return result;\n//     }\n// }\nvar MarkdownFieldUI = /** @class */ (function (_super) {\n    __extends(MarkdownFieldUI, _super);\n    function MarkdownFieldUI(text, onchange) {\n        var _this = _super.call(this, text, onchange) || this;\n        _this.margin(0, 0, 6, 12);\n        _this.setMini(false);\n        _this.setStyle(\"min-height\", \"100px\");\n        //this.setStyle(\"max-height\",\"200px\");\n        _this.setStyle(\"border\", \"solid\");\n        _this.setStyle(\"border-width\", \"1px\");\n        _this.setStyle(\"border-radius\", \"2px\");\n        _this.setStyle(\"font-size\", \"1.15em\");\n        _this.setStyle(\"border-color\", \"rgba(0,0,0,0.2)\");\n        _this.setGrammar('source.mdcustom');\n        return _this;\n    }\n    MarkdownFieldUI.prototype.setLabelWidth = function () {\n    };\n    MarkdownFieldUI.prototype.setLabelHeight = function () {\n    };\n    MarkdownFieldUI.prototype.setRequired = function (v) {\n    };\n    return MarkdownFieldUI;\n}(UI.AtomEditorElement));\nvar XMLField = /** @class */ (function (_super) {\n    __extends(XMLField, _super);\n    function XMLField(text, onchange) {\n        var _this = _super.call(this, text, onchange) || this;\n        _this.margin(0, 0, 6, 12);\n        _this.setMini(false);\n        _this.setStyle(\"min-height\", \"100px\");\n        //this.setStyle(\"max-height\",\"200px\");\n        _this.setStyle(\"border\", \"solid\");\n        _this.setStyle(\"border-width\", \"1px\");\n        _this.setStyle(\"border-radius\", \"2px\");\n        _this.setStyle(\"font-size\", \"1.15em\");\n        _this.setStyle(\"border-color\", \"rgba(0,0,0,0.2)\");\n        _this.setGrammar('text.xml');\n        return _this;\n    }\n    XMLField.prototype.setLabelWidth = function () {\n    };\n    XMLField.prototype.setLabelHeight = function () {\n    };\n    XMLField.prototype.setRequired = function (v) {\n    };\n    return XMLField;\n}(UI.AtomEditorElement));\nvar JSONField = /** @class */ (function (_super) {\n    __extends(JSONField, _super);\n    function JSONField(text, onchange) {\n        var _this = _super.call(this, text, onchange) || this;\n        _this.margin(0, 0, 6, 12);\n        _this.setMini(false);\n        _this.setStyle(\"min-height\", \"100px\");\n        //this.setStyle(\"max-height\",\"200px\");\n        _this.setStyle(\"border\", \"solid\");\n        _this.setStyle(\"border-width\", \"1px\");\n        _this.setStyle(\"border-radius\", \"2px\");\n        _this.setStyle(\"font-size\", \"1.15em\");\n        _this.setStyle(\"border-color\", \"rgba(0,0,0,0.2)\");\n        _this.setGrammar('source.json');\n        return _this;\n    }\n    JSONField.prototype.setLabelWidth = function () {\n    };\n    JSONField.prototype.setLabelHeight = function () {\n    };\n    JSONField.prototype.setRequired = function (v) {\n    };\n    return JSONField;\n}(UI.AtomEditorElement));\nvar MarkdownField = /** @class */ (function (_super) {\n    __extends(MarkdownField, _super);\n    function MarkdownField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MarkdownField.prototype.createField = function () {\n        var editor = new MarkdownFieldUI(\"\", function (x) { });\n        return editor;\n    };\n    MarkdownField.prototype.needsSeparateLabel = function () {\n        return true;\n    };\n    return MarkdownField;\n}(PropertyEditorInfo));\nvar ExampleField = /** @class */ (function (_super) {\n    __extends(ExampleField, _super);\n    function ExampleField(outlineNode, context) {\n        return _super.call(this, outlineNode, context) || this;\n    }\n    ExampleField.prototype.createField = function () {\n        var editor = new JSONField(this.outlineNode.valueText, function (x) { });\n        return editor;\n    };\n    ExampleField.prototype.needsSeparateLabel = function () {\n        return true;\n    };\n    ExampleField.prototype.fromModelToEditor = function () {\n    };\n    ExampleField.prototype.fromEditorToModel = function (newValue, oldValue) {\n    };\n    return ExampleField;\n}(PropertyEditorInfo));\nvar XMLExampleField = /** @class */ (function (_super) {\n    __extends(XMLExampleField, _super);\n    function XMLExampleField(outlineNode, context) {\n        return _super.call(this, outlineNode, context) || this;\n    }\n    XMLExampleField.prototype.createField = function () {\n        var editor = new XMLField(this.outlineNode.valueText, function (x) { });\n        return editor;\n    };\n    XMLExampleField.prototype.needsSeparateLabel = function () {\n        return true;\n    };\n    XMLExampleField.prototype.fromModelToEditor = function () {\n    };\n    XMLExampleField.prototype.fromEditorToModel = function (newValue, oldValue) {\n    };\n    return XMLExampleField;\n}(PropertyEditorInfo));\nvar XMLSchemaField = /** @class */ (function (_super) {\n    __extends(XMLSchemaField, _super);\n    function XMLSchemaField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    XMLSchemaField.prototype.createField = function () {\n        var editor = new XMLField(\"\", function (x) { });\n        return editor;\n    };\n    XMLSchemaField.prototype.needsSeparateLabel = function () {\n        return true;\n    };\n    return XMLSchemaField;\n}(PropertyEditorInfo));\nvar JSONSchemaField = /** @class */ (function (_super) {\n    __extends(JSONSchemaField, _super);\n    function JSONSchemaField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    JSONSchemaField.prototype.createField = function () {\n        var editor = new JSONField(\"\", function (x) { });\n        return editor;\n    };\n    JSONSchemaField.prototype.needsSeparateLabel = function () {\n        return true;\n    };\n    return JSONSchemaField;\n}(PropertyEditorInfo));\nvar SelectBox = /** @class */ (function (_super) {\n    __extends(SelectBox, _super);\n    function SelectBox(outlineNode, context) {\n        var _this = _super.call(this, outlineNode, context) || this;\n        _this.outlineNode = outlineNode;\n        return _this;\n    }\n    SelectBox.prototype.createField = function () {\n        var options = this.outlineNode.options ? this.outlineNode.options : [];\n        var select = new UI.SelectField(this.outlineNode.title, function (x) { }, \"\", UI.Icon.NONE, options);\n        select.getActualField().setOptions(options);\n        return select;\n    };\n    return SelectBox;\n}(PropertyEditorInfo));\nvar TypeSelectBox = /** @class */ (function (_super) {\n    __extends(TypeSelectBox, _super);\n    function TypeSelectBox() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TypeSelectBox.prototype.fromEditorToModel = function (newValue, oldValue) {\n        // //current implementation only allows changing the facets of certain types for safety\n        // //TODO change this to arbitrary facets (remove type filtering)\n        //\n        // var oldNames : string[] = [];\n        // var savedAttrs = [];\n        // if (newValue && oldValue) {\n        //     try {\n        //         this.node.definition().allSuperTypes().forEach(superType=> {\n        //             if (this.isAllowedTypeToReplaceFacets(superType)) {\n        //                 this.addTypeFacets(superType, oldNames)\n        //             }\n        //         })\n        //\n        //         savedAttrs = [].concat(this.node.attrs())\n        //     } catch (err) {console.log(err)}\n        // }\n        //\n        // super.fromEditorToModel();\n        //\n        // if (newValue && oldValue) {\n        //     try {\n        //         //collecting facets allowed to remove\n        //         var currentUniverse = this.node.definition().universe();\n        //         var names : string[] = [];\n        //\n        //         this.node.definition().allSuperTypes().forEach(superType=>{\n        //             if (this.isAllowedTypeToReplaceFacets(superType)) {\n        //                 this.addTypeFacets(superType, names)\n        //             }\n        //         })\n        //\n        //         if (oldNames.length > 0 && names.length > 0) {\n        //             savedAttrs.forEach(attribute => {\n        //                 if (_.find(oldNames, facetName => facetName == attribute.name())\n        //                     && !_.find(names, facetName => facetName == attribute.name())) {\n        //\n        //                     this.node.remove(attribute)\n        //                 }\n        //             })\n        //         }\n        //     } catch (err) {console.log(err)}\n        // }\n    };\n    return TypeSelectBox;\n}(SelectBox));\nvar TreeField = /** @class */ (function (_super) {\n    __extends(TreeField, _super);\n    function TreeField(outlineNode, context) {\n        var _this = _super.call(this) || this;\n        _this.context = context;\n        var renderer = {\n            render: function (node) {\n                var left = UI.label(node.title, UI.Icon.CIRCUIT_BOARD, UI.TextClasses.HIGHLIGHT);\n                var right = UI.label(node.valueText ? (\":\" + node.valueText) : \"\", UI.Icon.NONE, UI.TextClasses.SUCCESS);\n                var result = UI.hc(left, right);\n                return result;\n            }\n        };\n        var getChildren = function (node) {\n            return node.children ? node.children : [];\n        };\n        var viewer = UI.treeViewer(getChildren, renderer, function (x) { return x.title; });\n        var inputValue = {\n            children: [outlineNode]\n        };\n        viewer.setInput(inputValue);\n        _this.addChild(UI.label(outlineNode.title));\n        _this.addChild(viewer);\n        return _this;\n    }\n    TreeField.prototype.setLabelWidth = function () {\n    };\n    TreeField.prototype.setLabelHeight = function () {\n    };\n    TreeField.prototype.setRequired = function (v) {\n    };\n    return TreeField;\n}(UI.Panel));\nvar StructuredField = /** @class */ (function (_super) {\n    __extends(StructuredField, _super);\n    function StructuredField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    StructuredField.prototype.createField = function () {\n        var children = this.outlineNode.children;\n        if (!children || children.length != 1)\n            return null;\n        var tm = new TreeField(children[0], this.context);\n        return tm;\n    };\n    return StructuredField;\n}(PropertyEditorInfo));\nvar LowLevelTreeField = /** @class */ (function (_super) {\n    __extends(LowLevelTreeField, _super);\n    function LowLevelTreeField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    LowLevelTreeField.prototype.createField = function () {\n        var children = this.outlineNode.children;\n        if (!children || children.length != 1)\n            return null;\n        var tm = new TreeField(children[0], this.context);\n        return tm;\n    };\n    return LowLevelTreeField;\n}(PropertyEditorInfo));\nvar ActionsItem = /** @class */ (function (_super) {\n    __extends(ActionsItem, _super);\n    function ActionsItem(context) {\n        var _this = _super.call(this, \"Actions\", \"\") || this;\n        _this.context = context;\n        _this.nodes = [];\n        return _this;\n    }\n    ActionsItem.prototype.addNode = function (node) {\n        this.nodes.push(node);\n    };\n    ActionsItem.prototype.render = function (r) {\n        var _this = this;\n        var result = UI.vc();\n        var hc = UI.hc();\n        result.addChild(UI.h3(\"Insertions and Delete: \"));\n        result.addChild(hc);\n        this.nodes.forEach(function (node) {\n            if (node.subType == \"INSERT\") {\n                hc.addChild(UI.button(node.title, UI.ButtonSizes.EXTRA_SMALL, UI.ButtonHighlights.INFO, UI.Icon.NONE, function (x) {\n                    _this.run(node.id);\n                }).margin(3, 3, 3, 3));\n            }\n        });\n        this.nodes.forEach(function (node) {\n            if (node.subType == \"INSERT_VALUE\") {\n                hc.addChild(UI.button(node.title, UI.ButtonSizes.EXTRA_SMALL, UI.ButtonHighlights.WARNING, UI.Icon.NONE, function (x) {\n                    _this.run(node.id);\n                }).margin(3, 3, 3, 3));\n            }\n        });\n        this.nodes.forEach(function (node) {\n            if (node.subType == \"DELETE\") {\n                hc.addChild(UI.button(node.title, UI.ButtonSizes.EXTRA_SMALL, UI.ButtonHighlights.ERROR, UI.Icon.NONE, function (x) {\n                    _this.run(node.id);\n                }).margin(3, 3, 3, 3));\n            }\n        });\n        return result;\n    };\n    ActionsItem.prototype.run = function (actionID) {\n        var connection = ramlServer.getNodeClientConnection();\n        connection.executeDetailsAction(this.context.uri, actionID, this.context.position).then((function (changedDocuments) {\n            assist_utils_1.applyChangedDocuments(changedDocuments);\n        }));\n    };\n    ActionsItem.prototype.dispose = function () {\n    };\n    return ActionsItem;\n}(Item));\n/**\n * Instanceof check for ActionsItem.\n * @param item\n * @return {boolean}\n */\nfunction isInstanceOfActionsItem(item) {\n    return item.addNode != null;\n}\nvar CustomActionsItem = /** @class */ (function (_super) {\n    __extends(CustomActionsItem, _super);\n    function CustomActionsItem(context) {\n        var _this = _super.call(this, \"Actions\", \"\") || this;\n        _this.context = context;\n        _this.nodes = [];\n        return _this;\n    }\n    CustomActionsItem.prototype.addAction = function (node) {\n        this.nodes.push(node);\n    };\n    CustomActionsItem.prototype.render = function (r) {\n        var _this = this;\n        var result = UI.vc();\n        var hc = UI.hc();\n        result.addChild(UI.h3(\"Custom Actions: \"));\n        result.addChild(hc);\n        this.nodes.forEach(function (node) {\n            hc.addChild(UI.button(node.title, UI.ButtonSizes.EXTRA_SMALL, UI.ButtonHighlights.INFO, UI.Icon.NONE, function (x) {\n                _this.run(node.id);\n            }).margin(3, 3, 3, 3));\n        });\n        return result;\n    };\n    CustomActionsItem.prototype.run = function (actionID) {\n        contextMenuImpl_1.launchServerActionByID(this.context.uri, actionID, this.context.position);\n    };\n    CustomActionsItem.prototype.dispose = function () {\n    };\n    return CustomActionsItem;\n}(Item));\n/**\n * Instanceof check for ActionsItem.\n * @param item\n * @return {boolean}\n */\nfunction isInstanceOfCustomActionsItem(item) {\n    return item.addAction != null;\n}\n// function category(p:hl.IProperty,node:hl.IHighLevelNode):string{\n//     if (p.getAdapter(def.RAMLPropertyService).isKey()||p.isRequired()){\n//         return null;\n//     }\n//     if (p.domain()&&!p.domain().getAdapter(def.RAMLService).isUserDefined()) {\n//         if (universehelpers.isDocumentationProperty(p) ||\n//             universehelpers.isUsageProperty(p) ||\n//             universehelpers.isDescriptionProperty(p) ||\n//             universehelpers.isDisplayNameProperty(p) ||\n//             universehelpers.isTitleProperty(p)) {\n//             return \"Documentation\";\n//         }\n//         if (universehelpers.isAnnotationsProperty(p) ||\n//             universehelpers.isIsProperty(p) ||\n//             universehelpers.isSecuredByProperty(p) ||\n//             (universehelpers.isTypeProperty(p)&&!p.getAdapter(def.RAMLPropertyService).isTypeExpr())) {\n//             return \"References\";\n//         }\n//         if (universehelpers.isProtocolsProperty(p)){\n//             return \"General\";\n//         }\n//     }\n//\n//     if (universehelpers.isTypeProperty(p)){\n//         if (p.domain()&&!p.domain().getAdapter(def.RAMLService).isUserDefined()){\n//             return null;\n//         }\n//     }\n//     if (node.property()) {\n//         if (p.domain() && p.domain() != node.property().range()) {\n//             return \"Facets\";\n//         }\n//     }\n//     return \"General\";\n// }\n//\n// var valueOptions = function (x:hl.IProperty, node:hl.IHighLevelNode):string[] {\n//     var vls = search.enumValues(x,node);\n//     if (universehelpers.isNameProperty(x)){\n//         if (node.definition().isAssignableFrom(universe.Universe10.TypeDeclaration.name)){\n//             if (node.property()&&universehelpers.isBodyProperty(node.property())){\n//                 if (!(node.property() instanceof def.UserDefinedProp)) {\n//                     if (node.parent()&&\n//                         universehelpers.isMethodType(node.parent().definition())){\n//                         return [\"application/json\", \"application/xml\",\"multipart/form-data\",\"application/x-www-form-urlencoded\"]\n//                     }\n//                     return [\"application/json\", \"application/xml\"]\n//                 }\n//             }\n//         }\n//     }\n//     if ((!vls) || vls.length == 0) {\n//         var sug = (<def.Property>x).suggester()\n//         if (sug) {\n//             vls = sug(node);\n//\n//         }\n//         if ((!vls) || vls.length == 0) {\n//             vls = (<def.Property>x).getOftenKeys();\n//\n//         }\n//     }\n//     return _.unique(vls);\n// };\n//\n// function addExampleControl(property: hl.IProperty, node : hl.IHighLevelNode,\n//                            exampleElement : hl.IHighLevelNode, example : def.rt.nominalTypes.IExpandableExample,\n//                            container : TopLevelNode) {\n//\n//     if (example.isYAML()) {\n//         container.addItemToCategory(category(property, node),\n//             new LowLevelTreeField(property, node, exampleElement.lowLevel(), example.name()));\n//     } else if (example.isJSONString()) {\n//         container.addItemToCategory(category(property, node),\n//             new ExampleField(property, node, example.asString(), example.name()));\n//     } else if (example.isXMLString()) {\n//         container.addItemToCategory(category(property, node),\n//             new XMLExampleField(property, node, example.asString(), example.name()));\n//     }\n// }\nfunction buildItem(detailsNode, context, dialog) {\n    var root = new TopLevelNode(detailsNode, context);\n    try {\n        if (detailsNode && detailsNode.children) {\n            for (var _i = 0, _a = detailsNode.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                if (child.type == \"CATEGORY\") {\n                    var categoryName = child.title;\n                    if (child.children) {\n                        for (var _b = 0, _c = child.children; _b < _c.length; _b++) {\n                            var childOfChild = _c[_b];\n                            buildItemInCategory(childOfChild, root, categoryName, context);\n                        }\n                    }\n                }\n                else {\n                    buildItemInCategory(child, root, null, context);\n                }\n            }\n        }\n    }\n    catch (error) {\n        console.log(error);\n    }\n    return root;\n}\nexports.buildItem = buildItem;\nfunction buildItemInCategory(detailsNode, root, categoryName, context) {\n    var item = null;\n    try {\n        if (detailsNode.type == \"CHECKBOX\") {\n            item = new CheckBoxField(detailsNode, context);\n        }\n        else if (detailsNode.type == \"JSONSCHEMA\"\n            && detailsNode.valueText !== null) {\n            item = new JSONSchemaField(detailsNode, context);\n        }\n        else if (detailsNode.type == \"XMLSCHEMA\"\n            && detailsNode.valueText !== null) {\n            item = new XMLSchemaField(detailsNode, context);\n        }\n        else if (detailsNode.type == \"MARKDOWN\") {\n            item = new MarkdownField(detailsNode, context);\n        }\n        else if (detailsNode.type == \"SELECTBOX\"\n            && detailsNode.options !== null) {\n            item = new SelectBox(detailsNode, context);\n        }\n        else if (detailsNode.type == \"MULTIEDITOR\") {\n            item = new SimpleMultiEditor(detailsNode, context);\n        }\n        else if (detailsNode.type == \"TREE\") {\n            item = new LowLevelTreeField(detailsNode, context);\n        }\n        else if (detailsNode.type == \"STRUCTURED\") {\n            item = new StructuredField(detailsNode, context);\n        }\n        else if (detailsNode.type == \"TYPEDISPLAY\") {\n            item = new TypeDisplayItem(detailsNode, context);\n        }\n        else if (detailsNode.type == \"TYPESELECT\") {\n            item = new TypeSelectBox(detailsNode, context);\n        }\n        else if (detailsNode.type == \"JSONEXAMPLE\"\n            && detailsNode.valueText !== null) {\n            item = new ExampleField(detailsNode, context);\n        }\n        else if (detailsNode.type == \"XMLEXAMPLE\"\n            && detailsNode.valueText !== null) {\n            item = new XMLExampleField(detailsNode, context);\n        }\n        else if (detailsNode.type == \"ATTRIBUTETEXT\") {\n            item = new PropertyEditorInfo(detailsNode, context);\n        }\n        else if (detailsNode.type == \"DETAILS_ACTION\") {\n            if (detailsNode.subType != \"CUSTOM_ACTION\") {\n                var actionItem = findOrCreateActionItemInCategory(root, categoryName, context);\n                actionItem.addNode(detailsNode);\n            }\n            else {\n                var customActionItem = findOrCreateCustomActionItemInCategory(root, categoryName, context);\n                customActionItem.addAction(detailsNode);\n            }\n        }\n    }\n    catch (error) {\n        console.log(error);\n    }\n    if (item != null) {\n        root.addItemToCategory(categoryName, item);\n    }\n    else {\n        console.log(\"Can not recognize element \" + detailsNode.type);\n    }\n}\nfunction findOrCreateActionItemInCategory(root, categoryName, context) {\n    var category = root.subCategoryByNameOrCreate(categoryName);\n    for (var _i = 0, _a = category.children(); _i < _a.length; _i++) {\n        var child = _a[_i];\n        if (isInstanceOfActionsItem(child)) {\n            return child;\n        }\n    }\n    var actionsItem = new ActionsItem(context);\n    category.children().unshift(actionsItem);\n    return actionsItem;\n}\nfunction findActionItemInCategory(root, categoryName, context) {\n    var category = root.subCategoryByNameOrCreate(categoryName);\n    for (var _i = 0, _a = category.children(); _i < _a.length; _i++) {\n        var child = _a[_i];\n        if (isInstanceOfActionsItem(child)) {\n            return child;\n        }\n    }\n    return null;\n}\nfunction findOrCreateCustomActionItemInCategory(root, categoryName, context) {\n    var category = root.subCategoryByNameOrCreate(categoryName);\n    for (var _i = 0, _a = category.children(); _i < _a.length; _i++) {\n        var child = _a[_i];\n        if (isInstanceOfCustomActionsItem(child)) {\n            return child;\n        }\n    }\n    var customActionsItem = new CustomActionsItem(context);\n    var inserterActionsItem = findActionItemInCategory(root, categoryName, context);\n    if (inserterActionsItem) {\n        category.children().splice(1, 0, customActionsItem);\n    }\n    else {\n        category.children().unshift(customActionsItem);\n    }\n    return customActionsItem;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/editor-tools/detailElements.js\n// module id = 9\n// module chunks = 0","module.exports = require(\"underscore\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"underscore\"\n// module id = 10\n// module chunks = 0","\"use strict\";\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar UI = require(\"atom-ui-lib\");\nvar SpacePenViews = require(\"atom-space-pen-views\");\n// import yaml = require(\"yaml-ast-parser\")\nvar linterUI = require(\"../core/linter-ui\");\nvar editorTools = require(\"../editor-tools/editor-tools\");\nvar ramlServer = require(\"api-language-server\");\nvar textEditProcessor = ramlServer.textEditProcessor;\n// export function createGlobalSchema(attr:hl.IAttribute){\n//     var r=attr.parent().root();\n//     var t:def.NodeClass=<def.NodeClass>attr.property().range().universe().type(\"GlobalSchema\");\n//     var sc=stubs.createStubNode(t,(<any>t.universe().type(\"Api\")).property(\"schemas\"),\"\"+attr.value());\n//     sc.attrOrCreate(\"value\").setValue(\"!include \"+\"schemas/\"+attr.value()+\".json\")\n//     r.add(sc);\n//     var ed=atom.workspace.getActiveTextEditor();\n//     ed.getBuffer().setText(r.lowLevel().unit().contents());\n//     var sdir=path.resolve(path.dirname(ed.getPath()),\"schemas\");\n//     if (!fs.existsSync(sdir)){\n//         fs.mkdirSync(sdir);\n//     }\n//     var shFile=path.resolve(sdir,attr.value()+\".json\");\n//     fs.writeFileSync(shFile,`\n// {\n//   \"$schema\" : \"http://json-schema.org/draft-04/schema\" ,\n//   \"type\" : \"object\" ,\n//   \"properties\" : {\n//    }\n// }\n// `)\n//    atom.workspace.open(shFile,{});\n// }\n// export function createGlobalSchemaFromNameAndContent(root:hl.IHighLevelNode,name:string,schp:string,content:string, absolutePath?: string){\n//     if (universeHelpers.isRAML10Node(root)) {\n//         createGlobalSchemaFromNameAndContent10(root, name, schp, content, absolutePath);\n//     } else if (universeHelpers.isRAML08Node(root)) {\n//         createGlobalSchemaFromNameAndContent08(root, name, schp, content, absolutePath);\n//     }\n// }\nfunction createSchemaFile(content, schemaPath, absolutePath) {\n    var ed = getActiveEditor();\n    var sdir = absolutePath ? path.dirname(absolutePath) : path.resolve(path.dirname(ed.getPath()), path.dirname(schemaPath));\n    if (!fs.existsSync(sdir)) {\n        fs.mkdirSync(sdir);\n    }\n    var shFile = absolutePath ? absolutePath : path.resolve(path.dirname(ed.getPath()), schemaPath);\n    fs.writeFileSync(shFile, content);\n}\n// export function createGlobalSchemaFromNameAndContent10(root:hl.IHighLevelNode,name:string,\n//                                                        schemaPath:string,content:string, absolutePath?: string){\n//     var t:def.NodeClass=<def.NodeClass>root.definition().universe().type(universes.Universe10.TypeDeclaration.name);\n//     var sc=stubs.createStubNode(t,\n//         (<any>t.universe().type(universes.Universe10.Api.name)).property(universes.Universe10.Api.properties.types.name),\n//         \"\"+name);\n//\n//     sc.attrOrCreate(universes.Universe10.TypeDeclaration.properties.type.name).setValue(\"!include \"+schemaPath)\n//\n//     root.add(sc);\n//\n//     createSchemaFile(content, schemaPath, absolutePath);\n// }\n// export function createGlobalSchemaFromNameAndContent08(root:hl.IHighLevelNode,name:string,schp:string,content:string, absolutePath?: string){\n//     var t:def.NodeClass=<def.NodeClass>root.definition().universe().type(universes.Universe08.GlobalSchema.name);\n//     var sc=stubs.createStubNode(t,\n//         (<any>t.universe().type(universes.Universe08.Api.name)).property(universes.Universe08.Api.properties.schemas.name),\n//         \"\"+name);\n//\n//     sc.attrOrCreate(universes.Universe08.GlobalSchema.properties.value.name).setValue(\"!include \"+schp)\n//\n//     root.add(sc);\n//\n//     createSchemaFile(content, schp, absolutePath);\n// }\n// export function saveExample(r:hl.IHighLevelNode,schp:string,content:string){\n//     var ed=getActiveEditor();\n//     var sdir=path.resolve(path.dirname(ed.getPath()),path.dirname(schp));\n//     if (!fs.existsSync(sdir)){\n//         fs.mkdirSync(sdir);\n//     }\n//     var shFile=path.resolve(path.dirname(ed.getPath()),schp);\n//     fs.writeFileSync(shFile,content)\n// }\nvar NewProjectDialog = /** @class */ (function () {\n    function NewProjectDialog(title) {\n        if (title === void 0) { title = \"Create RAML Project\"; }\n        this.title = title;\n        this.apititle = \"New API\";\n        this.version = \"v1\";\n        this.baseUri = \"http://api.samplehost.com\";\n        this._raml1 = true;\n        this._defStructure = true;\n        this._createSampleResource = true;\n        this.sourceValue = path.resolve(this.generateDefaultProjectParentFolder(), \"newRamlProject\");\n    }\n    NewProjectDialog.prototype.generateDefaultProjectParentFolder = function () {\n        return UI.fdUtils.getHome();\n    };\n    NewProjectDialog.prototype.extraContent = function (s) {\n    };\n    NewProjectDialog.prototype.validateProjectLocation = function (value) {\n        var toValidate = value ? value.trim() : \"\";\n        if (!toValidate) {\n            return UI.errorStatus(\"Path should't be empty\");\n        }\n        var parentDirectory = path.dirname(toValidate);\n        if (!parentDirectory || parentDirectory == \".\")\n            return UI.errorStatus(\"Can not find path parent\");\n        if (!fs.existsSync(parentDirectory))\n            return UI.errorStatus(\"Parent directory does not exist\");\n        return UI.okStatus();\n    };\n    NewProjectDialog.prototype.validateTitle = function (value) {\n        var toValidate = value ? value.trim() : \"\";\n        if (!toValidate || toValidate.length < 1) {\n            return UI.errorStatus(\"Title field is required\");\n        }\n        return UI.okStatus();\n    };\n    NewProjectDialog.prototype.show = function () {\n        var _this = this;\n        var zz = null;\n        var section = UI.section(this.title, UI.Icon.BOOK, false, false, UI.h3(\"Please select location to place your project:\")).pad(10, 10);\n        var panel = new UI.Panel(UI.LayoutType.BLOCK);\n        var statusLabel = UI.label(\"\", null, UI.TextClasses.ERROR);\n        var slf = new UI.CustomField(\"\", statusLabel, function (x) { return x; });\n        slf.setDisplay(this.validateProjectLocation(this.sourceValue).code == UI.StatusCode.ERROR);\n        panel.addChild(slf);\n        var projectLocationInput = UI.texfField(\"\", this.sourceValue, function (x) { return _this.sourceValue = x.getBinding().get(); });\n        projectLocationInput.getBinding().addValidator(function () { return _this.validateProjectLocation(_this.sourceValue); });\n        projectLocationInput.setStyle(\"width\", \"400px\");\n        projectLocationInput.getBinding().addListener(function (value) {\n            //var st = projectLocationInput.getBinding().status()\n            var st = _this.validateProjectLocation(value);\n            if (st.code != UI.StatusCode.ERROR) {\n                //this.updateUI(q, x)\n                statusLabel.setText(\"\");\n                statusLabel.setIcon(UI.Icon.NONE);\n                slf.setDisplay(false);\n            }\n            else {\n                statusLabel.setText(st.message);\n                statusLabel.setIcon(UI.Icon.BUG);\n                slf.setDisplay(true);\n            }\n        });\n        panel.addChild(\n        //UI.hc(\n        projectLocationInput\n        //UI.buttonSimple(\"Browse\",\n        //    ()=>UI.fdUtils..openFolderDialog(\"Select project location\",\n        //            newLocation=> {\n        //                this.sourceValue=newLocation\n        //                projectLocationInput.getBinding().set(newLocation)\n        //                //var atomEditor = projectLocationInput.getActualField()\n        //                //var atomEditorUI = atomEditor.ui()\n        //                //var atomEditorUIModel = atomEditorUI.getModel();\n        //                //atomEditorUIModel.setText(newLocation)\n        //            },\n        //            true, this.sourceValue)\n        //).margin(10,0).setStyle(\"margin-bottom\", \"0.75em\")\n        //).setPercentWidth(100)\n        );\n        panel.addChild(UI.h3(\"Title of your API:\"));\n        var titleStatusLabel = UI.label(\"\", null, UI.TextClasses.ERROR);\n        var titleStatusMessage = new UI.CustomField(\"\", titleStatusLabel, function (x) { return x; });\n        titleStatusMessage.setDisplay(false);\n        panel.addChild(titleStatusMessage);\n        var titleTextField = UI.texfField(\"\", this.apititle, function (x) { return _this.apititle = x.getBinding().get(); });\n        titleTextField.getBinding().addValidator(function () { return _this.validateTitle(_this.apititle); });\n        titleTextField.getBinding().addListener(function (value) {\n            var status = _this.validateTitle(value);\n            if (status.code !== UI.StatusCode.ERROR) {\n                titleStatusLabel.setText(\"\");\n                titleStatusLabel.setIcon(UI.Icon.NONE);\n                titleStatusMessage.setDisplay(false);\n            }\n            else {\n                titleStatusLabel.setText(status.message);\n                titleStatusLabel.setIcon(UI.Icon.BUG);\n                titleStatusMessage.setDisplay(true);\n            }\n        });\n        panel.addChild(titleTextField);\n        panel.addChild(UI.h3(\"Version of your API\"));\n        panel.addChild(UI.texfField(\"\", this.version, function (x) { return _this.version = x.getBinding().get(); }));\n        panel.addChild(UI.h3(\"Base URI of your API\"));\n        panel.addChild(UI.texfField(\"\", this.baseUri, function (x) { return _this.baseUri = x.getBinding().get(); }));\n        section.addChild(panel);\n        var r1 = UI.checkBox(\"Use RAML 1.0\");\n        r1.setValue(this._raml1);\n        r1.getBinding().addListener(function (x) { return _this._raml1 = r1.getValue(); });\n        section.addChild(r1);\n        var r2 = UI.checkBox(\"Create default directory structure\");\n        r2.setValue(this._defStructure);\n        r2.getBinding().addListener(function (x) { return _this._defStructure = r2.getValue(); });\n        section.addChild(r2);\n        var r3 = UI.checkBox(\"Create sample resource and method\");\n        r3.setValue(this._createSampleResource);\n        r3.getBinding().addListener(function (x) { return _this._createSampleResource = r3.getValue(); });\n        section.addChild(r3);\n        var buttonBar = UI.hc().setPercentWidth(100).setStyle(\"display\", \"flex\");\n        buttonBar.addChild(UI.label(\"\", null, null, null).setStyle(\"flex\", \"1\"));\n        buttonBar.addChild(UI.button(\"Cancel\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.NO_HIGHLIGHT, UI.Icon.NONE, function (x) { zz.destroy(); }).margin(10, 10));\n        buttonBar.addChild(UI.button(\"Create\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.SUCCESS, UI.Icon.NONE, function (x) {\n            if (_this.validateTitle(_this.apititle).code === UI.StatusCode.ERROR) {\n                return;\n            }\n            if (_this.validateProjectLocation(_this.sourceValue).code === UI.StatusCode.ERROR) {\n                return;\n            }\n            _this.onOk(zz);\n            zz.destroy();\n        }));\n        section.addChild(buttonBar);\n        zz = atom.workspace.addModalPanel({ item: section.renderUI() });\n    };\n    NewProjectDialog.prototype.createIfNotExist = function (p) {\n        var ps = path.resolve(this.sourceValue, p);\n        if (!fs.existsSync(ps)) {\n            fs.mkdirSync(ps);\n        }\n    };\n    NewProjectDialog.prototype.onOk = function (zz) {\n        if (!fs.existsSync(this.sourceValue)) {\n            fs.mkdirSync(this.sourceValue);\n        }\n        if (this._defStructure) {\n            this.createIfNotExist(\"schemas\");\n            this.createIfNotExist(\"examples\");\n            this.createIfNotExist(\"traits\");\n            this.createIfNotExist(\"resourceTypes\");\n            this.createIfNotExist(\"securitySchemes\");\n            this.createIfNotExist(\"documentation\");\n            if (this._raml1) {\n                this.createIfNotExist(\"notebooks\");\n                this.createIfNotExist(\"scripts\");\n            }\n        }\n        var content = createRAMLFile(this.apititle, this.version, this.baseUri, this._createSampleResource, this._raml1);\n        var ps = path.resolve(this.sourceValue, \"api.raml\");\n        fs.writeFileSync(ps, content);\n        atom.open({ pathsToOpen: [this.sourceValue, ps] });\n    };\n    return NewProjectDialog;\n}());\nfunction createRAMLFile(title, version, baseUri, sample, raml1) {\n    if (sample === void 0) { sample = true; }\n    if (raml1 === void 0) { raml1 = true; }\n    var apiLines = [(raml1 ? \"#%RAML 1.0\" : \"#%RAML 0.8\"), \"title: \" + title];\n    if (version)\n        apiLines.push(\"version: \" + version);\n    if (baseUri)\n        apiLines.push(\"baseUri: \" + baseUri);\n    var typesLines = [\n        'types:',\n        '  TestType:',\n        '    type: object',\n        '    properties:',\n        '      id: number',\n        '      optional?: string',\n        '      expanded:',\n        '        type: object',\n        '        properties:',\n        '          count: number'\n    ], resourceLines = [\n        '/helloWorld:',\n        '  get:',\n        '    responses:',\n        '      200:',\n        '        body:',\n        '          application/json:',\n        '            example: |',\n        '              {',\n        '                \"message\" : \"Hello World\"',\n        '              }'\n    ];\n    var result = apiLines;\n    if (sample) {\n        if (raml1)\n            result = result.concat(typesLines);\n        result = result.concat(resourceLines);\n    }\n    return result.join('\\n') + '\\n';\n}\nexports.createRAMLFile = createRAMLFile;\nfunction newProject() {\n    new NewProjectDialog().show();\n}\nexports.newProject = newProject;\n// export function moveResource(h:hl.IHighLevelNode){\n//     new move.MoveElementsDialog(h, \"Resource Type\",true).show()\n// }\nfunction splitOnLines(text) {\n    var lines = text.match(/^.*((\\r\\n|\\n|\\r)|$)/gm);\n    return lines;\n}\nexports.splitOnLines = splitOnLines;\nfunction cleanEmptyLines(text) {\n    var lines = splitOnLines(text);\n    var rs = [];\n    for (var i = 0; i < lines.length; i++) {\n        if (lines[i].trim().length > 0) {\n            rs.push(lines[i]);\n        }\n    }\n    return rs.join(\"\");\n}\nexports.cleanEmptyLines = cleanEmptyLines;\n//FIXME remove it from here duplication with jsyaml2lowLevel.ts\nfunction stripIndent(text, indent) {\n    var lines = splitOnLines(text);\n    var rs = [];\n    for (var i = 0; i < lines.length; i++) {\n        if (i == 0) {\n            rs.push(lines[0]);\n        }\n        else {\n            rs.push(lines[i].substring(indent.length));\n        }\n    }\n    return rs.join(\"\");\n}\n// var leadingIndent = function (node:lowLevel.ILowLevelASTNode, text:string) {\n//     var leading = \"\";\n//     var pos = node.start() - 1;\n//     while (pos > 0) {\n//         var ch = text[pos];\n//         if (ch == '\\r' || ch == '\\n') break;\n//         leading = ch + leading;\n//         pos--;\n//     }\n//     return leading;\n// };\nfunction indent(line) {\n    var rs = \"\";\n    for (var i = 0; i < line.length; i++) {\n        var c = line[i];\n        if (c == '\\r' || c == '\\n') {\n            continue;\n        }\n        if (c == ' ' || c == '\\t') {\n            rs += c;\n            continue;\n        }\n        break;\n    }\n    return rs;\n}\nfunction getActiveEditor() {\n    var activeEditor = atom.workspace.getActiveTextEditor();\n    if (activeEditor) {\n        return activeEditor;\n    }\n    if (editorTools.aquireManager())\n        return editorTools.aquireManager().getCurrentEditor();\n    return null;\n}\nexports.getActiveEditor = getActiveEditor;\n/**\n * Sets active editor cursor at the position (starting from 0).\n * @param position\n */\nfunction gotoPosition(position) {\n    var activeEditor = getActiveEditor();\n    if (!activeEditor) {\n        return;\n    }\n    var bufferPos = activeEditor.getBuffer().positionForCharacterIndex(position);\n    activeEditor.setSelectedBufferRange({ start: bufferPos, end: bufferPos }, {});\n}\nexports.gotoPosition = gotoPosition;\nfunction gotoDeclaration() {\n    var editor = getActiveEditor();\n    if (!editor)\n        return;\n    var position = editor.getCursorBufferPosition();\n    var offset = editor.getBuffer().characterIndexForPosition(position);\n    var path = editor.getPath();\n    ramlServer.getNodeClientConnection().openDeclaration(path, offset).then(function (locations) {\n        if (!locations || locations.length == 0)\n            return;\n        atom.workspace.open(locations[0].uri, {}).then(function (x) {\n            var activeEditor = getActiveEditor();\n            var p1 = activeEditor.getBuffer().positionForCharacterIndex(locations[0].range.start);\n            var p2 = activeEditor.getBuffer().positionForCharacterIndex(locations[0].range.end);\n            activeEditor.setSelectedBufferRange({ start: p1, end: p2 }, {});\n        });\n    });\n}\nexports.gotoDeclaration = gotoDeclaration;\n// export class MoveToNewFileDialog{\n//\n//     constructor(private node:hl.IHighLevelNode){\n//\n//     }\n//     destination:string;\n//\n//     show(){\n//         var zz:any=null;\n//         var node=this.node;\n//         var vc=UI.section(\"Move node content to new file \",UI.Icon.GIST_NEW,false,false);\n//         var errorLabel=UI.label(\"please enter correct destination path\",UI.Icon.BUG,UI.TextClasses.ERROR,UI.HighLightClasses.NONE);\n//         vc.addChild(UI.vc(errorLabel));\n//         vc.addChild(UI.label(\"Please enter destination path\"));\n//         var txt=UI.texfField(\"\",\"\",x=>{\n//             if (!txt){\n//                 return;\n//             }\n//             this.destination=txt.getBinding().get();\n//             var isError=this.destination.trim().length==0\n//             if (!isError) {\n//                 if (path.extname(this.destination) != '.raml') {\n//                     isError = true;\n//                 }\n//             }\n//             if (!isError) {\n//                 var dir = path.resolve(path.dirname(getActiveEditor().getPath()), path.dirname(this.destination));\n//                 if (!fs.existsSync(dir)) {\n//                     isError = true;\n//                 }\n//                 else{\n//                     var st=fs.statSync(dir)\n//                     if (!st.isDirectory()){\n//                         isError=true;\n//                     }\n//                 }\n//             }\n//\n//             errorLabel.setDisplay(isError);\n//             okButton.setDisabled(isError);\n//         });\n//         vc.addChild(UI.vc(txt));\n//         var buttonBar=UI.hc().setPercentWidth(100).setStyle(\"display\",\"flex\");\n//         buttonBar.addChild(UI.label(\"\",null,null,null).setStyle(\"flex\",\"1\"))\n//         buttonBar.addChild(UI.button(\"Cancel\",UI.ButtonSizes.NORMAL,UI.ButtonHighlights.NO_HIGHLIGHT,UI.Icon.NONE,x=>{zz.destroy()}).margin(10,10))\n//         var okButton=UI.button(\"Move\",UI.ButtonSizes.NORMAL,UI.ButtonHighlights.SUCCESS,UI.Icon.NONE,x=>{\n//             var d=path.resolve(path.dirname(getActiveEditor().getPath()), this.destination);\n//             var dump=this.node.lowLevel().dump();\n//             var ci=splitOnLines(dump);\n//             var li=ci.length>1?indent(ci[1]):indent(ci[0]);\n//             dump=dump.substring(this.node.lowLevel().keyEnd()-this.node.lowLevel().start()+1).trim();\n//             dump=stripIndent(dump,li);\n//             dump=\"#%RAML 0.8 \"+this.node.definition().nameId()+\"\\n\"+dump;\n//             fs.writeFileSync(d,dump);\n//             //no we need to replace content of the node with text;\n//\n//             var txt=node.lowLevel().unit().contents();\n//             var endPart=txt.substring(node.lowLevel().end());\n//             var startPart=txt.substring(0,node.lowLevel().keyEnd()+1);\n//             var vl=startPart+\" !include \"+this.destination+endPart;\n//             getActiveEditor().setText(vl);\n//             zz.destroy();\n//         });\n//         okButton.setDisabled(true)\n//         buttonBar.addChild(okButton);\n//         vc.addChild(buttonBar)\n//         var html=vc.renderUI();\n//         zz=(<any>atom).workspace.addModalPanel( { item: html});\n//         html.focus();\n//     }\n//\n//\n// }\n// export function moveOut(h:hl.IHighLevelNode){\n//     new MoveToNewFileDialog(h).show()\n// }\nfunction revalidate() {\n    var currentEditor = getActiveEditor();\n    if (!currentEditor)\n        return;\n    linterUI.relint(currentEditor);\n}\nexports.revalidate = revalidate;\n/**\n * Gets opened editor for specified path or uri.\n * Currently only returns active editor if applicable, in future may also return other opened editors.\n * @param path\n * @returns {any}\n */\nfunction getEditorByUriOrPath(path) {\n    //TODO consider also returning other opened editors\n    var activeEditor = getActiveEditor();\n    if (activeEditor.getPath() == path)\n        return activeEditor;\n    return null;\n}\nexports.getEditorByUriOrPath = getEditorByUriOrPath;\n/**\n * Applies a set of changed documents to current documents and files\n * @param changedDocuments\n */\nfunction applyChangedDocuments(changedDocuments) {\n    for (var _i = 0, changedDocuments_1 = changedDocuments; _i < changedDocuments_1.length; _i++) {\n        var changedDocument = changedDocuments_1[_i];\n        var editor = getEditorByUriOrPath(changedDocument.uri);\n        var oldContents = null;\n        if (editor) {\n            oldContents = editor.getText();\n        }\n        else {\n            oldContents = fs.readFileSync(changedDocument.uri).toString();\n        }\n        var newText = null;\n        if (changedDocument.text) {\n            newText = changedDocument.text;\n        }\n        else if (changedDocument.textEdits) {\n            newText = textEditProcessor.applyDocumentEdits(oldContents, changedDocument.textEdits);\n        }\n        else {\n            continue;\n        }\n        if (editor) {\n            editor.getBuffer().setText(newText);\n        }\n        else {\n            fs.writeFileSync(changedDocument.uri, newText);\n        }\n    }\n}\nexports.applyChangedDocuments = applyChangedDocuments;\n/**\n * Tries to detect the name/symbol at position.\n * In practise it is impossible to do properly in all cases unless having AST at hands\n * or making the server to do this, but MS LSP does not have an interface for this.\n *\n * @param contents\n * @param offset\n */\nfunction findCurrentName(contents, offset) {\n    //we cant use alpha-numeric detection due to potential non-english alphabets.\n    //so we have to defined some stop characters and expand the list when a bug case is detected\n    var stopCharacters = [\n        \"\\r\", \"\\n\", \"[\", \"]\", \":\", \".\", \",\", \" \", \"\\t\", \"{\", \"}\", \"'\", \"'\", \"\\\"\"\n    ];\n    var beginning = 0;\n    for (var currentOffset = offset - 1; currentOffset >= 0; currentOffset--) {\n        var currentChar = contents.charAt(currentOffset);\n        var found = false;\n        for (var _i = 0, stopCharacters_1 = stopCharacters; _i < stopCharacters_1.length; _i++) {\n            var stopChar = stopCharacters_1[_i];\n            if (currentChar == stopChar) {\n                beginning = currentOffset + 1;\n                found = true;\n                break;\n            }\n        }\n        if (found)\n            break;\n    }\n    var end = contents.length;\n    for (var currentOffset = offset; currentOffset < contents.length; currentOffset++) {\n        var currentChar = contents.charAt(currentOffset);\n        var found = false;\n        for (var _a = 0, stopCharacters_2 = stopCharacters; _a < stopCharacters_2.length; _a++) {\n            var stopChar = stopCharacters_2[_a];\n            if (currentChar == stopChar) {\n                end = currentOffset;\n                found = true;\n                break;\n            }\n        }\n        if (found)\n            break;\n    }\n    return contents.substring(beginning, end);\n}\n/**\n * Activates renaming for current active editor and cursor position\n */\nfunction renameRAMLElement() {\n    var editor = getActiveEditor();\n    if (!editor)\n        return;\n    if (path.extname(editor.getPath()) != '.raml')\n        return;\n    var position = editor.getCursorBufferPosition();\n    var offset = editor.getBuffer().characterIndexForPosition(position);\n    var editorPath = editor.getPath();\n    var currentName = findCurrentName(editor.getText(), offset);\n    // UI.prompt(\"Enter new name for: \", newName=> {\n    //     ramlServer.getNodeClientConnection().\n    //         rename(editorPath, offset, newName).then(changedDocuments=>{\n    //\n    //         applyChangedDocuments(changedDocuments);\n    //     })\n    // }, currentName)\n}\nexports.renameRAMLElement = renameRAMLElement;\nvar getKeyValue = function (offset, txt) {\n    var m = offset;\n    for (var i = offset; i >= 0; i--) {\n        var c = txt.charAt(i);\n        if (c == ' ' || c == '\\r' || c == '\\n' || c == '\\t') {\n            m = i + 1;\n            break;\n        }\n    }\n    var res = \"\";\n    for (var i = m; m < txt.length; i++) {\n        var c = txt.charAt(i);\n        if (c == ' ' || c == '\\r' || c == '\\n' || c == '\\t' || c == ':') {\n            break;\n        }\n        res += c;\n    }\n    return res;\n};\n// export function select(){\n//     var ed=getActiveEditor();\n//     var request={editor:ed,bufferPosition:ed.getCursorBufferPosition()};\n//     var node=provider.getAstNode(request,false);\n//     if (!node){\n//         return;\n//     }\n//     var start=ed.getBuffer().positionForCharacterIndex(node.lowLevel().start());\n//     var end=ed.getBuffer().positionForCharacterIndex(node.lowLevel().end());\n//     ed.setSelectedBufferRange({start:start,end:end},{});\n// }\n//export function expandSignature(attr:hl.IAttribute){\n//    var tr=signature.convertToTrait(signature.parse(attr));\n//    //console.log('trait:\\n' + tr.highLevel().lowLevel().dump());\n//    var res = attr.parent();\n//    //pr.remove(attr); // incorrect usage!!! remove attributes as below\n//    attr.remove();\n//    tr.highLevel().elements().forEach(x=>{\n//        res.add(<any>x)\n//    });\n//    var ed=getActiveEditor();\n//    ed.setText(attr.root().lowLevel().unit().contents());\n//}\nfunction findUsagesImpl(renderer) {\n    if (renderer === void 0) { renderer = display; }\n    var editor = getActiveEditor();\n    var position = editor.getCursorBufferPosition();\n    var offset = editor.getBuffer().characterIndexForPosition(position);\n    var path = editor.getPath();\n    ramlServer.getNodeClientConnection().findReferences(path, offset).then(function (locations) {\n        if (!locations)\n            return;\n        renderer(locations);\n    });\n}\nexports.findUsagesImpl = findUsagesImpl;\nfunction display(n) {\n    if (sv) {\n        sv.setInput(n);\n    }\n    else {\n        sv = new SearchResultView(n);\n        sv.panel = atom.workspace.addBottomPanel({ item: sv });\n    }\n}\nfunction findUsages() {\n    findUsagesImpl(display);\n}\nexports.findUsages = findUsages;\nvar SearchResultView = /** @class */ (function (_super) {\n    __extends(SearchResultView, _super);\n    function SearchResultView(_result) {\n        var _this = _super.call(this) || this;\n        _this._result = _result;\n        _this.isAttached = false;\n        return _this;\n    }\n    SearchResultView.prototype.initialize = function () {\n        _super.prototype.initialize.apply(this, arguments);\n        return true;\n    };\n    SearchResultView.content = function () {\n        return this.div({ class: 'raml-console pane-item', tabindex: -1 });\n    };\n    SearchResultView.prototype.attached = function () {\n        if (this.isAttached) {\n            return;\n        }\n        this.load();\n        this.isAttached = true;\n    };\n    SearchResultView.prototype.setInput = function (_result) {\n        this._result = _result;\n        this.load();\n    };\n    SearchResultView.prototype.load = function () {\n        var _this = this;\n        var section = UI.section(\"References\", UI.Icon.SEARCH);\n        var view = UI.list(this._result, function (location) {\n            var p1 = getActiveEditor().getBuffer().positionForCharacterIndex(location.range.start);\n            var res = UI.hc(UI.a(location.uri, function (y) {\n                atom.workspace.open(location.uri, {}).then(function (x) {\n                    var activeEditor = getActiveEditor();\n                    var p1 = activeEditor.getBuffer().positionForCharacterIndex(location.range.start);\n                    var p2 = activeEditor.getBuffer().positionForCharacterIndex(location.range.end);\n                    activeEditor.setSelectedBufferRange({ start: p1, end: p2 }, {});\n                });\n            }), UI.label(\" line:\", UI.Icon.NONE, UI.TextClasses.SUBTLE).pad(5, 5), UI.label(\"\" + p1.row, UI.Icon.NONE, UI.TextClasses.SUCCESS));\n            return res;\n        });\n        view.setStyle(\"max-height\", \"400px\");\n        section.addChild(view);\n        section.addChild(UI.button(\"Close\", UI.ButtonSizes.SMALL, UI.ButtonHighlights.PRIMARY, UI.Icon.NONE, function (x) { _this.panel.destroy(); sv = null; }));\n        this.html(section.renderUI());\n    };\n    return SearchResultView;\n}(SpacePenViews.ScrollView));\nvar sv;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/dialogs/assist-utils.js\n// module id = 11\n// module chunks = 0","module.exports = require(\"fs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 12\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar fs = require(\"fs\");\n// import parser = require(\"raml-1-parser\");\n// import parserUtils = parser.utils;\nvar unitUtils = require(\"../util/unit\");\nvar TextBuffer = require(\"basarat-text-buffer\");\nvar editorManager = require(\"./editorManager\");\nvar ramlServer = require(\"api-language-server\");\nvar grammarDetect = require(\"../grammar-detect\");\nexports.grammarScopes = ['source.raml', 'source.syaml', 'source.sjson'];\nexports.scope = 'file';\nexports.lintOnFly = true;\nvar api_language_server_1 = require(\"api-language-server\");\nfunction relint(editor) {\n    Promise.resolve(\"\").then(editorManager.toggleEditorTools);\n    editor.getBuffer().emitter.emit(\"did-change\", {\n        oldText: editor.getBuffer().getText(),\n        newText: editor.getBuffer().getText()\n    });\n}\nexports.relint = relint;\nfunction initEditorObservers(linter) {\n    atom.workspace.observeTextEditors(function (editor) { return relint(editor); });\n    return {\n        dispose: function () {\n        }\n    };\n}\nexports.initEditorObservers = initEditorObservers;\nfunction destroyLinter(linterApi, linter) {\n    linterApi.deleteMessages(linter);\n    linterApi.deleteLinter(linter);\n}\nfunction isRAMLUnit(editor) {\n    var contents = editor.getBuffer().getText();\n    return unitUtils.isRAMLUnit(contents);\n}\nfunction isAppropriateGrammar(editor) {\n    if (isRAMLUnit(editor) || grammarDetect.isSwaggerJson(editor) || grammarDetect.isSwaggerYaml(editor)) {\n        return true;\n    }\n    return false;\n}\nvar combErrors = function (result) {\n    var map = {};\n    result.forEach(function (x) {\n        var original = JSON.parse(JSON.stringify(x));\n        original.trace = null;\n        var newKey = JSON.stringify(original);\n        var tr = map[newKey];\n        if (tr) {\n            tr.push(x);\n        }\n        else {\n            map[newKey] = [x];\n        }\n    });\n    var rs = [];\n    for (var i in map) {\n        var mes = JSON.parse(i);\n        mes.trace = [];\n        var ms = map[i];\n        ms.forEach(function (x) {\n            if (x.trace) {\n                mes.trace = mes.trace.concat(x.trace);\n            }\n        });\n        mes.trace = combErrors(mes.trace);\n        rs.push(mes);\n    }\n    return rs;\n};\nfunction tabWarnings(textEditor) {\n    var result = [];\n    var text = textEditor.getBuffer().getText();\n    var tab = 0;\n    while (true) {\n        var tab = text.indexOf('\\t', tab);\n        if (tab != -1) {\n            var p1 = textEditor.getBuffer().positionForCharacterIndex(tab);\n            var p2 = textEditor.getBuffer().positionForCharacterIndex(tab + 1);\n            var message = {\n                type: (\"Warning\"),\n                filePath: textEditor.getPath(),\n                text: \"Using tabs  can lead to unpredictable results\",\n                trace: [],\n                range: [[p1.row, p1.column], [p2.row, p2.column]]\n            };\n            result.push(message);\n            tab++;\n        }\n        else {\n            break;\n        }\n    }\n    return result;\n}\nfunction postPocessError(editor, error, buffers) {\n    var editorPath = editor.getPath();\n    if (!buffers[editorPath]) {\n        buffers[editorPath] = editor.getBuffer();\n    }\n    return Promise.resolve(error).then(function (error) {\n        if (!error.filePath) {\n            error.filePath = editorPath;\n        }\n        var buffer = buffers[error.filePath];\n        if (!buffer) {\n            return new Promise(function (resolve, reject) {\n                fs.readFile(error.filePath, function (err, data) {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        buffer = new TextBuffer(data.toString());\n                        buffers[error.filePath] = buffer;\n                        resolve(buffer);\n                    }\n                });\n            });\n        }\n        return buffer;\n    }).then(function (buffer) {\n        clientConnection.debugDetail(\"Converting an error with range: [\" + error.range.start + \" , \" + error.range.end + \"]\", \"Linter-ui\", \"postPocessError\");\n        if (error.range.start != null && error.range.end != null) {\n            clientConnection.debugDetail(\"Converting an error with range as array: [\" + error.range[0] + \" , \" + error.range[1] + \"]\", \"Linter-ui\", \"postPocessError\");\n            var p1 = buffer.positionForCharacterIndex(error.range.start);\n            var p2 = buffer.positionForCharacterIndex(error.range.end);\n            clientConnection.debugDetail(\"Result error range: [\" + p1.row + \" , \" + p1.column + \"] ; [\" + p2.row + \" , \" + p2.column + \"]\", \"Linter-ui\", \"postPocessError\");\n            error.range = [[p1.row, p1.column], [p2.row, p2.column]];\n        }\n        var traceErrors = error.trace || [];\n        var tracePromises = traceErrors.map(function (traceError) { return postPocessError(editor, traceError, buffers); });\n        return Promise.all(tracePromises).then(function (trace) {\n            error.trace = trace;\n            return error;\n        });\n    });\n}\nfunction getEditorId(textEditor) {\n    return textEditor.id;\n}\nvar ValidationReportExpected = /** @class */ (function () {\n    function ValidationReportExpected() {\n    }\n    return ValidationReportExpected;\n}());\nvar clientConnection = api_language_server_1.getNodeClientConnection();\nvar expectedValidationReports = [];\nfunction findAndRemoveExpectedReports(uri, versionLimit) {\n    var result = [];\n    expectedValidationReports = expectedValidationReports.filter(function (reportExpected) {\n        if (reportExpected.uri == uri\n            && (versionLimit == null || reportExpected.expectedVersion == null ||\n                versionLimit >= reportExpected.expectedVersion)) {\n            result.push(reportExpected);\n            return false;\n        }\n        return true;\n    });\n    return result;\n}\nvar latestRecievedReport = null;\nclientConnection.onValidationReport(function (report) {\n    clientConnection.debugDetail(\"Got debug report for uri \" + report.pointOfViewUri +\n        \" and version \" + report.version, \"linter-ui\", \"onValidationReport\");\n    var expectedReports = findAndRemoveExpectedReports(report.pointOfViewUri, report.version);\n    clientConnection.debugDetail(\"Found expected reports: \" + expectedReports.length, \"linter-ui\", \"onValidationReport\");\n    for (var _i = 0, expectedReports_1 = expectedReports; _i < expectedReports_1.length; _i++) {\n        var expectedReport = expectedReports_1[_i];\n        expectedReport.resolve(report.issues);\n    }\n    latestRecievedReport = report;\n});\nfunction runValidationSheduleUpdater(textEditor, resolve, reject) {\n    var uri = textEditor.getPath();\n    //in any way, lets report current state, it should not hurt.\n    clientConnection.documentChanged({\n        uri: uri,\n        text: textEditor.getBuffer().getText()\n    });\n    clientConnection.getLatestVersion(uri).then(function (version) {\n        clientConnection.debugDetail(\"Scheduling validation for uri \" + uri + \" and version \" +\n            version, \"linter-ui\", \"runValidationSheduleUpdater\");\n        if (latestRecievedReport && latestRecievedReport.version &&\n            latestRecievedReport.version >= version) {\n            //we already know validation report for this version\n            clientConnection.debugDetail(\"Previous report found v \" +\n                latestRecievedReport.version + \" resolving, issues \" +\n                (latestRecievedReport.issues ? latestRecievedReport.issues.length : 0), \"linter-ui\", \"runValidationSheduleUpdater\");\n            resolve(latestRecievedReport.issues);\n        }\n        else {\n            //lets wait until the server provides a report for this or later version\n            expectedValidationReports.push({\n                uri: uri,\n                expectedVersion: version,\n                resolve: resolve,\n                reject: reject\n            });\n            clientConnection.debugDetail(\"Pushing the expected report to the list for version \" +\n                version, \"linter-ui\", \"runValidationSheduleUpdater\");\n        }\n    });\n}\nfunction lint(textEditor) {\n    if (!isAppropriateGrammar(textEditor)) {\n        return Promise.resolve([]);\n    }\n    Promise.resolve(\"\").then(editorManager.toggleEditorTools);\n    var promise = new Promise(function (resolve, reject) {\n        runValidationSheduleUpdater(textEditor, resolve, reject);\n    }).then(function (errors) {\n        clientConnection.debugDetail(\"Update report handled in with issues \" +\n            (errors ? errors.length : 0), \"linter-ui\", \"lint\");\n        var buffers = {};\n        var promises = errors.map(function (error) { return postPocessError(textEditor, error, buffers); });\n        var tabs = tabWarnings(textEditor);\n        promises = promises.concat(tabs);\n        return Promise.all(promises).then(function (errors) {\n            var result = combErrors(errors);\n            var warnings = 0;\n            return result.filter(function (error) { return error ? true : false; }).filter(function (error) {\n                return error.type === 'Warning' && warnings++ >= 20 ? false : true;\n            });\n        });\n    });\n    clientConnection.debugDetail(\"Before returning from lint\", \"linter-ui\", \"lint\");\n    return promise;\n}\nexports.lint = lint;\nfunction addListenersToEditor(editor) {\n    var currentBuffer = editor.getBuffer();\n    currentBuffer.onDidChange(function (x) {\n        try {\n            ramlServer.getNodeClientConnection().debug(\"Change detected\", \"linter-ui\", \"addListenersToEditor\");\n            ramlServer.getNodeClientConnection().documentChanged({\n                uri: currentBuffer.getPath(),\n                text: currentBuffer.getText()\n            });\n        }\n        catch (e) {\n            console.log(e);\n        }\n    });\n}\nfunction addListenersToWorkspace() {\n    atom.workspace.onDidChangeActivePaneItem(function (e) {\n        var editor = atom.workspace.getActiveTextEditor();\n        if (editor) {\n            addListenersToEditor(editor);\n        }\n    });\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/core/linter-ui.js\n// module id = 13\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns whether the current text matches RAML unit.\n * @param contents\n * @returns {RegExpMatchArray}\n */\nfunction isRAMLUnit(contents) {\n    return contents.match(/^(\\s*#%RAML\\s+(\\d\\.\\d)\\s*(\\w*)\\s*)|(swagger.*)$/m);\n}\nexports.isRAMLUnit = isRAMLUnit;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL3V0aWwvdW5pdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0dBSUc7QUFDSCxvQkFBMkIsUUFBZ0I7SUFDdkMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztBQUM5RSxDQUFDO0FBRkQsZ0NBRUMiLCJmaWxlIjoic3JjL2F0b20vdXRpbC91bml0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgdGV4dCBtYXRjaGVzIFJBTUwgdW5pdC5cbiAqIEBwYXJhbSBjb250ZW50c1xuICogQHJldHVybnMge1JlZ0V4cE1hdGNoQXJyYXl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1JBTUxVbml0KGNvbnRlbnRzOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gY29udGVudHMubWF0Y2goL14oXFxzKiMlUkFNTFxccysoXFxkXFwuXFxkKVxccyooXFx3KilcXHMqKXwoc3dhZ2dlci4qKSQvbSk7XG59Il19\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/util/unit.js\n// module id = 14\n// module chunks = 0","module.exports = require(\"basarat-text-buffer\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"basarat-text-buffer\"\n// module id = 15\n// module chunks = 0","\"use strict\";\n/**\n * Created by kor on 24/07/15.\n */\n/// <reference path=\"../../../typings/main.d.ts\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// import fs = require ('fs')\n// import path = require ('path')\nvar editorTools = require(\"../editor-tools/editor-tools\");\n// import rp=require(\"raml-1-parser\")\n// import project=rp.project;\n// export function ast(editor:AtomCore.IEditor):rp.IHighLevelNode{\n//     var man=editorTools.aquireManager();\n//     if (editorTools.aquireManager()){\n//         if (man.getCurrentEditor()==editor){\n//             return man.ast;\n//         }\n//     }\n//     var p=editor.getPath();\n//     var prj=project.createProject(path.dirname(p));\n//     var unit=prj.unit(path.basename(p));\n//     var text=editor.getBuffer().getText();\n//     if (!unit){\n//         return null;\n//     }\n//     unit.updateContent(text);\n//     var ast=<rp.IHighLevelNode>unit.highLevel();\n//     return ast;\n// }\nfunction toggleEditorTools() {\n    var man = editorTools.aquireManager();\n    if (man) {\n        man.getCurrentEditor();\n    }\n}\nexports.toggleEditorTools = toggleEditorTools;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvcmUvZWRpdG9yTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7QUFDSCxtREFBbUQ7O0FBRW5ELDZCQUE2QjtBQUM3QixpQ0FBaUM7QUFDakMsMERBQTBEO0FBQzFELHFDQUFxQztBQUNyQyw2QkFBNkI7QUFFN0Isa0VBQWtFO0FBQ2xFLDJDQUEyQztBQUMzQyx3Q0FBd0M7QUFDeEMsK0NBQStDO0FBQy9DLDhCQUE4QjtBQUM5QixZQUFZO0FBQ1osUUFBUTtBQUNSLDhCQUE4QjtBQUM5QixzREFBc0Q7QUFDdEQsMkNBQTJDO0FBQzNDLDZDQUE2QztBQUM3QyxrQkFBa0I7QUFDbEIsdUJBQXVCO0FBQ3ZCLFFBQVE7QUFDUixnQ0FBZ0M7QUFDaEMsbURBQW1EO0FBQ25ELGtCQUFrQjtBQUNsQixJQUFJO0FBRUo7SUFDSSxJQUFJLEdBQUcsR0FBRyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7SUFFdEMsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQztRQUNKLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzNCLENBQUM7QUFDTCxDQUFDO0FBTkQsOENBTUMiLCJmaWxlIjoic3JjL2F0b20vY29yZS9lZGl0b3JNYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IGtvciBvbiAyNC8wNy8xNS5cbiAqL1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvbWFpbi5kLnRzXCIgLz5cblxuLy8gaW1wb3J0IGZzID0gcmVxdWlyZSAoJ2ZzJylcbi8vIGltcG9ydCBwYXRoID0gcmVxdWlyZSAoJ3BhdGgnKVxuaW1wb3J0IGVkaXRvclRvb2xzPXJlcXVpcmUoXCIuLi9lZGl0b3ItdG9vbHMvZWRpdG9yLXRvb2xzXCIpXG4vLyBpbXBvcnQgcnA9cmVxdWlyZShcInJhbWwtMS1wYXJzZXJcIilcbi8vIGltcG9ydCBwcm9qZWN0PXJwLnByb2plY3Q7XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBhc3QoZWRpdG9yOkF0b21Db3JlLklFZGl0b3IpOnJwLklIaWdoTGV2ZWxOb2Rle1xuLy8gICAgIHZhciBtYW49ZWRpdG9yVG9vbHMuYXF1aXJlTWFuYWdlcigpO1xuLy8gICAgIGlmIChlZGl0b3JUb29scy5hcXVpcmVNYW5hZ2VyKCkpe1xuLy8gICAgICAgICBpZiAobWFuLmdldEN1cnJlbnRFZGl0b3IoKT09ZWRpdG9yKXtcbi8vICAgICAgICAgICAgIHJldHVybiBtYW4uYXN0O1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIHZhciBwPWVkaXRvci5nZXRQYXRoKCk7XG4vLyAgICAgdmFyIHByaj1wcm9qZWN0LmNyZWF0ZVByb2plY3QocGF0aC5kaXJuYW1lKHApKTtcbi8vICAgICB2YXIgdW5pdD1wcmoudW5pdChwYXRoLmJhc2VuYW1lKHApKTtcbi8vICAgICB2YXIgdGV4dD1lZGl0b3IuZ2V0QnVmZmVyKCkuZ2V0VGV4dCgpO1xuLy8gICAgIGlmICghdW5pdCl7XG4vLyAgICAgICAgIHJldHVybiBudWxsO1xuLy8gICAgIH1cbi8vICAgICB1bml0LnVwZGF0ZUNvbnRlbnQodGV4dCk7XG4vLyAgICAgdmFyIGFzdD08cnAuSUhpZ2hMZXZlbE5vZGU+dW5pdC5oaWdoTGV2ZWwoKTtcbi8vICAgICByZXR1cm4gYXN0O1xuLy8gfVxuXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlRWRpdG9yVG9vbHMoKTogdm9pZCB7XG4gICAgdmFyIG1hbiA9IGVkaXRvclRvb2xzLmFxdWlyZU1hbmFnZXIoKTtcbiAgICBcbiAgICBpZihtYW4pe1xuICAgICAgICBtYW4uZ2V0Q3VycmVudEVkaXRvcigpO1xuICAgIH1cbn1cbiJdfQ==\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/core/editorManager.js\n// module id = 16\n// module chunks = 0","module.exports = require(\"api-language-server\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"api-language-server\"\n// module id = 17\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar grammarHandlers = {};\nfunction handle(editor) {\n    console.log(\"Editor Opened: \" + editor.getURI());\n    var uri = editor.getURI() || \"\";\n    updateGrammar(editor);\n    editor.onDidChange(function () {\n        updateGrammar(editor);\n    });\n}\nexports.handle = handle;\nfunction updateGrammar(editor) {\n    Object.keys(grammarHandlers).forEach(function (extension) { return tryUpdateGrammarForLanguage(editor, extension); });\n}\nfunction tryUpdateGrammarForLanguage(editor, extension) {\n    if (!isUriEndsWith(editor, extension)) {\n        return;\n    }\n    try {\n        if (grammarHandlers[extension](editor)) {\n            setGrammar(editor, \"source.s\" + extension);\n            return;\n        }\n    }\n    catch (e) {\n        return;\n    }\n    setGrammar(editor, \"source.\" + extension);\n}\nfunction isSwaggerJson(editor) {\n    if (JSON.parse(editor.getText()).swagger) {\n        return true;\n    }\n    return false;\n}\nexports.isSwaggerJson = isSwaggerJson;\nfunction isSwaggerYaml(editor) {\n    if (editor.getText().trim().indexOf(\"swagger:\") == 0) {\n        return true;\n    }\n    return false;\n}\nexports.isSwaggerYaml = isSwaggerYaml;\nfunction isUriEndsWith(editor, extension) {\n    return (editor.getURI() || \"\").toLowerCase().endsWith(\".\" + extension);\n}\nfunction setGrammar(editor, grammarId) {\n    if (editor.getGrammar() && editor.getGrammar().scopeName === grammarId) {\n        return;\n    }\n    editor.setGrammar(atom.workspace.grammarRegistry.grammarForId(grammarId));\n}\ngrammarHandlers[\"json\"] = isSwaggerJson;\ngrammarHandlers[\"yaml\"] = isSwaggerYaml;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2dyYW1tYXItZGV0ZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxlQUFlLEdBQTBELEVBQUUsQ0FBQztBQUVoRixnQkFBdUIsTUFBd0I7SUFDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBUyxNQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUV4RCxJQUFJLEdBQUcsR0FBUyxNQUFPLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO0lBRXZDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV0QixNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ2YsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQVZELHdCQVVDO0FBRUQsdUJBQXVCLE1BQXdCO0lBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsU0FBUyxJQUFJLE9BQUEsMkJBQTJCLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxFQUE5QyxDQUE4QyxDQUFDLENBQUM7QUFDdEcsQ0FBQztBQUVELHFDQUFxQyxNQUF3QixFQUFFLFNBQWlCO0lBQzVFLEVBQUUsQ0FBQSxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDO0lBQ1gsQ0FBQztJQUVELElBQUksQ0FBQztRQUNELEVBQUUsQ0FBQSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEMsVUFBVSxDQUFDLE1BQU0sRUFBRSxVQUFVLEdBQUcsU0FBUyxDQUFDLENBQUM7WUFFM0MsTUFBTSxDQUFDO1FBQ1gsQ0FBQztJQUNMLENBQUM7SUFBQyxLQUFLLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1IsTUFBTSxDQUFDO0lBQ1gsQ0FBQztJQUVELFVBQVUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFFRCx1QkFBOEIsTUFBd0I7SUFDbEQsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQU5ELHNDQU1DO0FBRUQsdUJBQThCLE1BQXdCO0lBQ2xELEVBQUUsQ0FBQSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFORCxzQ0FNQztBQUVELHVCQUF1QixNQUF3QixFQUFFLFNBQWlCO0lBQzlELE1BQU0sQ0FBQyxDQUFPLE1BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0FBQ2xGLENBQUM7QUFFRCxvQkFBb0IsTUFBd0IsRUFBRSxTQUFpQjtJQUMzRCxFQUFFLENBQUEsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sQ0FBQztJQUNYLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFPLElBQUssQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ3JGLENBQUM7QUFFRCxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDO0FBQ3hDLGVBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxhQUFhLENBQUMiLCJmaWxlIjoic3JjL2F0b20vZ3JhbW1hci1kZXRlY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ3JhbW1hckhhbmRsZXJzOiB7W2lkOiBzdHJpbmddOiAoZWRpdG9yOiBBdG9tQ29yZS5JRWRpdG9yKSA9PiBib29sZWFufSA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlKGVkaXRvcjogQXRvbUNvcmUuSUVkaXRvcik6IGFueSB7XG4gICAgY29uc29sZS5sb2coXCJFZGl0b3IgT3BlbmVkOiBcIiArICg8YW55PmVkaXRvcikuZ2V0VVJJKCkpO1xuICAgIFxuICAgIHZhciB1cmkgPSAoPGFueT5lZGl0b3IpLmdldFVSSSgpIHx8IFwiXCI7XG5cbiAgICB1cGRhdGVHcmFtbWFyKGVkaXRvcik7XG5cbiAgICBlZGl0b3Iub25EaWRDaGFuZ2UoKCkgPT4ge1xuICAgICAgICB1cGRhdGVHcmFtbWFyKGVkaXRvcik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUdyYW1tYXIoZWRpdG9yOiBBdG9tQ29yZS5JRWRpdG9yKTogdm9pZCB7XG4gICAgT2JqZWN0LmtleXMoZ3JhbW1hckhhbmRsZXJzKS5mb3JFYWNoKGV4dGVuc2lvbiA9PiB0cnlVcGRhdGVHcmFtbWFyRm9yTGFuZ3VhZ2UoZWRpdG9yLCBleHRlbnNpb24pKTtcbn1cblxuZnVuY3Rpb24gdHJ5VXBkYXRlR3JhbW1hckZvckxhbmd1YWdlKGVkaXRvcjogQXRvbUNvcmUuSUVkaXRvciwgZXh0ZW5zaW9uOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZighaXNVcmlFbmRzV2l0aChlZGl0b3IsIGV4dGVuc2lvbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICB0cnkge1xuICAgICAgICBpZihncmFtbWFySGFuZGxlcnNbZXh0ZW5zaW9uXShlZGl0b3IpKSB7XG4gICAgICAgICAgICBzZXRHcmFtbWFyKGVkaXRvciwgXCJzb3VyY2Uuc1wiICsgZXh0ZW5zaW9uKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgc2V0R3JhbW1hcihlZGl0b3IsIFwic291cmNlLlwiICsgZXh0ZW5zaW9uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3dhZ2dlckpzb24oZWRpdG9yOiBBdG9tQ29yZS5JRWRpdG9yKTogYm9vbGVhbiB7XG4gICAgaWYoSlNPTi5wYXJzZShlZGl0b3IuZ2V0VGV4dCgpKS5zd2FnZ2VyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N3YWdnZXJZYW1sKGVkaXRvcjogQXRvbUNvcmUuSUVkaXRvcik6IGJvb2xlYW4ge1xuICAgIGlmKGVkaXRvci5nZXRUZXh0KCkudHJpbSgpLmluZGV4T2YoXCJzd2FnZ2VyOlwiKSA9PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVXJpRW5kc1dpdGgoZWRpdG9yOiBBdG9tQ29yZS5JRWRpdG9yLCBleHRlbnNpb246IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoKDxhbnk+ZWRpdG9yKS5nZXRVUkkoKSB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKFwiLlwiICsgZXh0ZW5zaW9uKTtcbn1cblxuZnVuY3Rpb24gc2V0R3JhbW1hcihlZGl0b3I6IEF0b21Db3JlLklFZGl0b3IsIGdyYW1tYXJJZDogc3RyaW5nKSB7XG4gICAgaWYoZWRpdG9yLmdldEdyYW1tYXIoKSAmJiBlZGl0b3IuZ2V0R3JhbW1hcigpLnNjb3BlTmFtZSA9PT0gZ3JhbW1hcklkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgZWRpdG9yLnNldEdyYW1tYXIoKDxhbnk+YXRvbSkud29ya3NwYWNlLmdyYW1tYXJSZWdpc3RyeS5ncmFtbWFyRm9ySWQoZ3JhbW1hcklkKSk7XG59XG5cbmdyYW1tYXJIYW5kbGVyc1tcImpzb25cIl0gPSBpc1N3YWdnZXJKc29uO1xuZ3JhbW1hckhhbmRsZXJzW1wieWFtbFwiXSA9IGlzU3dhZ2dlcllhbWw7XG4iXX0=\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/grammar-detect.js\n// module id = 18\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\nvar ramlServer = require(\"api-language-server\");\nvar editorTools = require(\"../editor-tools/editor-tools\");\nvar uilibsModule = require(\"atom-ui-lib\");\nvar fs = require(\"fs\");\nvar mkdirp = require(\"mkdirp\");\nvar pathModule = require(\"path\");\nvar actionUIManager = require(\"./actionUIManager\");\nvar uiBuilder = require(\"../editor-tools/detailElements\");\nvar contributors = {};\n/**\n * Adds new contributor to the list. All contributors are asked for the menu items\n * before the menu is displayed.\n * @param contributor\n */\nfunction registerContributor(contributor) {\n    contributors[contributor.id] = contributor;\n}\nexports.registerContributor = registerContributor;\n/**\n * Generally it is recommended to use contributor-based architecture instead.\n * This method allows adding a single menu item manually, if needed.\n * @param name\n * @param onClick\n * @param categories\n * @param shouldDisplay\n */\nfunction addMenuItem(name, onClick, categories, shouldDisplay) {\n}\nexports.addMenuItem = addMenuItem;\n/**\n * Generally it is recommended to use contributor-based architecture instead.\n * Deletes all menu items with a given selector. Should almost never be called.\n * Can not delete contributor-based menu items.\n * @param selector\n */\nfunction deleteMenuItems(selector) {\n    //TODO implement\n}\nexports.deleteMenuItems = deleteMenuItems;\n/**\n * Generally it is recommended to use contributor-based architecture instead.\n * Deletes menu item by its selector, name, and optionally categories.\n * Can not delete contributor-based menu items.\n * @param selector\n * @param name\n * @param categories\n */\nfunction deleteMenuItem(selector, name, categories) {\n    //TODO implement\n}\nexports.deleteMenuItem = deleteMenuItem;\nvar ContextMenuItemNode = /** @class */ (function () {\n    function ContextMenuItemNode(menuItem, nameOverride) {\n        this.selector = menuItem.selector;\n        if (nameOverride) {\n            this.name = nameOverride;\n        }\n        else {\n            this.name = menuItem.name;\n        }\n        this.categories = menuItem.categories;\n        this.onClick = menuItem.onClick;\n        this.children = [];\n    }\n    return ContextMenuItemNode;\n}());\n/**\n * Calculates current menu items tree.\n * @returns {IContextMenuItemNode[]}\n */\nfunction calculateMenuItemsTree() {\n    for (var contributorId in contributors) {\n        var contributor = contributors[contributorId];\n        if (contributor.calculationStarted) {\n            contributor.calculationStarted();\n        }\n    }\n    var contributorPromises = [];\n    for (var contributorId in contributors) {\n        var contributor = contributors[contributorId];\n        contributorPromises.push(contributor.calculateItems());\n    }\n    return Promise.all(contributorPromises).then(function (contributorItems) {\n        var result = [];\n        contributorItems.forEach(function (items) {\n            items.forEach(function (item) {\n                addItemsTreeNode(result, item);\n            });\n        });\n        for (var contributorId in contributors) {\n            var contributor = contributors[contributorId];\n            if (contributor.calculationFinished) {\n                contributor.calculationFinished();\n            }\n        }\n        return result;\n    });\n}\nexports.calculateMenuItemsTree = calculateMenuItemsTree;\nfunction addItemsTreeNode(roots, item) {\n    var currentList = roots;\n    if (item.categories) {\n        for (var catIndex in item.categories) {\n            var currentSegment = item.categories[catIndex];\n            var existingNode = _.find(currentList, function (node) {\n                return node.name == currentSegment;\n            });\n            if (!existingNode) {\n                existingNode = new ContextMenuItemNode(item, currentSegment);\n                currentList.push(existingNode);\n            }\n            if (!existingNode.children) {\n                currentList = [];\n                existingNode.children = currentList;\n            }\n            else {\n                currentList = existingNode.children;\n            }\n        }\n    }\n    var leafNode = _.find(currentList, function (node) {\n        return node.name == item.name;\n    });\n    if (leafNode) {\n        var index = currentList.indexOf(leafNode, 0);\n        if (index != undefined) {\n            currentList.splice(index, 1);\n        }\n    }\n    leafNode = new ContextMenuItemNode(item);\n    currentList.push(leafNode);\n}\nvar actionBasedMenuInitialized = false;\nfunction launchServerAction(path, action, position) {\n    launchServerActionByID(path, action.id, position);\n}\nexports.launchServerAction = launchServerAction;\nfunction launchServerActionByID(path, actionID, position) {\n    ramlServer.getNodeClientConnection().executeContextActionByID(path, actionID, position).then(function (changes) {\n        var editorManager = editorTools.aquireManager();\n        if (!editorManager)\n            return Promise.resolve([]);\n        var path = editorManager.getPath();\n        var _loop_1 = function (change) {\n            if (change.uri == path && change.text != null) {\n                editorManager.getCurrentEditor().getBuffer().setText(change.text);\n                ramlServer.getNodeClientConnection().documentChanged({\n                    uri: path,\n                    text: change.text\n                });\n            }\n            else if (change.text != null) {\n                var editorFound_1 = false;\n                atom.workspace.getTextEditors().forEach(function (currentEditor) {\n                    if (currentEditor.getPath && currentEditor.getPath() == change.uri) {\n                        currentEditor.getBuffer().setText(change.text);\n                        editorFound_1 = true;\n                    }\n                });\n                if (!editorFound_1) {\n                    mkdirp.sync(pathModule.dirname(change.uri));\n                    fs.writeFileSync(change.uri, change.text);\n                }\n            }\n        };\n        //TODO handle all cases\n        for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {\n            var change = changes_1[_i];\n            _loop_1(change);\n        }\n    });\n}\nexports.launchServerActionByID = launchServerActionByID;\n/**\n * Initializes and registers standard context menu contributor, based on currently available context actions.\n * @param selector - CSS selector, can be null if not used in the display.\n */\nfunction initializeActionBasedMenu(selector) {\n    var editorContextMenuContributor = {\n        id: \"editorContextActionContributor\",\n        calculateItems: function () {\n            var editorManager = editorTools.aquireManager();\n            if (!editorManager)\n                return Promise.resolve([]);\n            var path = editorManager.getPath();\n            if (!path)\n                return Promise.resolve([]);\n            var position = editorManager.getCurrentPosition();\n            return Promise.resolve([]);\n            // return ramlServer.getNodeClientConnection()\n            //     .calculateEditorContextActions(path, position).then(currentActions=>{\n            //\n            //     var result : contextMenu.IContextMenuItem[] = []\n            //\n            //     currentActions.forEach(action => {\n            //         // if (action.hasUI) {\n            //         //     return;\n            //         // }\n            //\n            //         result.push({\n            //\n            //             selector : selector,\n            //\n            //             name : action.label ? action.label : action.name,\n            //\n            //             categories : action.category,\n            //\n            //             onClick: ()=>{\n            //                 launchServerAction(path, action, position)\n            //             },\n            //\n            //             children: []\n            //         })\n            //     })\n            //\n            //     let updatedPosition = editorManager.getCurrentPosition();\n            //     if (updatedPosition !== position) {\n            //         return [];\n            //     }\n            //\n            //     return result\n            // })\n        }\n    };\n    registerContributor(editorContextMenuContributor);\n    handleActionUI();\n    configureServerActions();\n    actionBasedMenuInitialized = true;\n}\nexports.initializeActionBasedMenu = initializeActionBasedMenu;\nfunction handleActionUI() {\n    ramlServer.getNodeClientConnection().onDisplayActionUI(function (uiDisplayRequest) {\n        ramlServer.getNodeClientConnection().debug(\"Got UI display request\", \"contextActions\", \"contextMenuImpl#handleActionUI\");\n        var actionUI = actionUIManager.getUICode(uiDisplayRequest.action.id);\n        if (!actionUI) {\n            ramlServer.getNodeClientConnection().error(\"Can not find UI for action \" +\n                uiDisplayRequest.action.id, \"contextActions\", \"handleActionUI\");\n            return Promise.resolve({});\n        }\n        global.IDE = atom;\n        global.UI = uilibsModule;\n        global.UIBuilder = uiBuilder;\n        return actionUI.run(uiDisplayRequest.initialUIState).then(function (result) {\n            ramlServer.getNodeClientConnection().debugDetail(\"Client: got result on dialog finish\", \"contextActions\", \"handleActionUI\");\n            return result;\n        });\n    });\n}\nfunction configureServerActions() {\n    ramlServer.getNodeClientConnection().setServerConfiguration({\n        actionsConfiguration: {\n            enableUIActions: true\n        }\n    });\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/context-menu/contextMenuImpl.js\n// module id = 19\n// module chunks = 0","module.exports = require(\"mkdirp\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"mkdirp\"\n// module id = 20\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar completeBodyUI = require(\"./actions/completeBody/ui\");\nvar newMethodUI = require(\"./actions/newMethod/ui\");\nvar simpleActionUi = require(\"./actions/simpleAction/ui\");\nfunction getUICode(actionID) {\n    if (actionID == \"completeBody\") {\n        return completeBodyUI;\n    }\n    if (actionID == \"newMethod\") {\n        return newMethodUI;\n    }\n    if (actionID == \"Create new Response\") {\n        return simpleActionUi;\n    }\n    if (actionID == \"Create new URI Parameter\") {\n        return simpleActionUi;\n    }\n    if (actionID == \"Create new Query Parameter\") {\n        return simpleActionUi;\n    }\n    if (actionID == \"Create new Header\") {\n        return simpleActionUi;\n    }\n    if (actionID == \"Create new Response Header\") {\n        return simpleActionUi;\n    }\n    if (actionID == \"Create new Response Body\") {\n        return simpleActionUi;\n    }\n    if (actionID == \"Create new Property\") {\n        return simpleActionUi;\n    }\n    if (actionID == \"Create new Body\") {\n        return simpleActionUi;\n    }\n    return null;\n}\nexports.getUICode = getUICode;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvbnRleHQtbWVudS9hY3Rpb25VSU1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwREFBNEQ7QUFDNUQsb0RBQXNEO0FBRXRELDBEQUE0RDtBQU01RCxtQkFBMEIsUUFBZ0I7SUFDdEMsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUMxQixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDekIsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUN2QixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLHFCQUFxQixDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFRCxFQUFFLENBQUEsQ0FBQyxRQUFRLElBQUksMEJBQTBCLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQUVELEVBQUUsQ0FBQSxDQUFDLFFBQVEsSUFBSSw0QkFBNEIsQ0FBQyxDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUMxQixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLG1CQUFtQixDQUFDLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFRCxFQUFFLENBQUEsQ0FBQyxRQUFRLElBQUksNEJBQTRCLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQUVELEVBQUUsQ0FBQSxDQUFDLFFBQVEsSUFBSSwwQkFBMEIsQ0FBQyxDQUFDLENBQUM7UUFDeEMsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUMxQixDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLHFCQUFxQixDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFRCxFQUFFLENBQUEsQ0FBQyxRQUFRLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQTFDRCw4QkEwQ0MiLCJmaWxlIjoic3JjL2F0b20vY29udGV4dC1tZW51L2FjdGlvblVJTWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb21wbGV0ZUJvZHlVSSA9IHJlcXVpcmUoXCIuL2FjdGlvbnMvY29tcGxldGVCb2R5L3VpXCIpXG5pbXBvcnQgbmV3TWV0aG9kVUkgPSByZXF1aXJlKFwiLi9hY3Rpb25zL25ld01ldGhvZC91aVwiKVxuXG5pbXBvcnQgc2ltcGxlQWN0aW9uVWkgPSByZXF1aXJlKFwiLi9hY3Rpb25zL3NpbXBsZUFjdGlvbi91aVwiKVxuXG5pbnRlcmZhY2UgQWN0aW9uVUkge1xuICAgIHJ1bihpbml0aWFsU3RhdGU/OiBhbnkpOiBQcm9taXNlPGFueT47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVSUNvZGUoYWN0aW9uSUQ6IHN0cmluZyk6IEFjdGlvblVJIHtcbiAgICBpZihhY3Rpb25JRCA9PSBcImNvbXBsZXRlQm9keVwiKSB7XG4gICAgICAgIHJldHVybiBjb21wbGV0ZUJvZHlVSTtcbiAgICB9XG5cbiAgICBpZihhY3Rpb25JRCA9PSBcIm5ld01ldGhvZFwiKSB7XG4gICAgICAgIHJldHVybiBuZXdNZXRob2RVSTtcbiAgICB9XG5cbiAgICBpZihhY3Rpb25JRCA9PSBcIkNyZWF0ZSBuZXcgUmVzcG9uc2VcIikge1xuICAgICAgICByZXR1cm4gc2ltcGxlQWN0aW9uVWk7XG4gICAgfVxuXG4gICAgaWYoYWN0aW9uSUQgPT0gXCJDcmVhdGUgbmV3IFVSSSBQYXJhbWV0ZXJcIikge1xuICAgICAgICByZXR1cm4gc2ltcGxlQWN0aW9uVWk7XG4gICAgfVxuXG4gICAgaWYoYWN0aW9uSUQgPT0gXCJDcmVhdGUgbmV3IFF1ZXJ5IFBhcmFtZXRlclwiKSB7XG4gICAgICAgIHJldHVybiBzaW1wbGVBY3Rpb25VaTtcbiAgICB9XG5cbiAgICBpZihhY3Rpb25JRCA9PSBcIkNyZWF0ZSBuZXcgSGVhZGVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHNpbXBsZUFjdGlvblVpO1xuICAgIH1cblxuICAgIGlmKGFjdGlvbklEID09IFwiQ3JlYXRlIG5ldyBSZXNwb25zZSBIZWFkZXJcIikge1xuICAgICAgICByZXR1cm4gc2ltcGxlQWN0aW9uVWk7XG4gICAgfVxuXG4gICAgaWYoYWN0aW9uSUQgPT0gXCJDcmVhdGUgbmV3IFJlc3BvbnNlIEJvZHlcIikge1xuICAgICAgICByZXR1cm4gc2ltcGxlQWN0aW9uVWk7XG4gICAgfVxuXG4gICAgaWYoYWN0aW9uSUQgPT0gXCJDcmVhdGUgbmV3IFByb3BlcnR5XCIpIHtcbiAgICAgICAgcmV0dXJuIHNpbXBsZUFjdGlvblVpO1xuICAgIH1cblxuICAgIGlmKGFjdGlvbklEID09IFwiQ3JlYXRlIG5ldyBCb2R5XCIpIHtcbiAgICAgICAgcmV0dXJuIHNpbXBsZUFjdGlvblVpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufSJdfQ==\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/context-menu/actionUIManager.js\n// module id = 21\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar JsonSchemaGenerator = /** @class */ (function () {\n    function JsonSchemaGenerator() {\n    }\n    JsonSchemaGenerator.prototype.generateSchema = function (obj) {\n        var sch = {};\n        sch['required'] = true;\n        sch['$schema'] = 'http://json-schema.org/draft-03/schema';\n        this.pass(obj, sch);\n        return sch;\n    };\n    JsonSchemaGenerator.prototype.pass = function (value, property) {\n        var valueType = this.detectType(value);\n        property['type'] = valueType;\n        if (!value || value == null) {\n        }\n        else if (Array.isArray(value)) {\n            this.passArray(value, property);\n        }\n        else if (value instanceof Object) {\n            this.passObject(value, property);\n        }\n    };\n    JsonSchemaGenerator.prototype.passObject = function (obj, sch) {\n        var _this = this;\n        Object.keys(obj).forEach(function (x) { return _this.registerProperty(x, obj[x], sch); });\n    };\n    JsonSchemaGenerator.prototype.registerProperty = function (propName, value, sch) {\n        var properties = sch['properties'];\n        if (!properties) {\n            properties = {};\n            sch['properties'] = properties;\n        }\n        var property = properties[propName];\n        if (!property) {\n            property = {};\n            properties[propName] = property;\n        }\n        property['required'] = false;\n        this.pass(value, property);\n    };\n    JsonSchemaGenerator.prototype.passArray = function (array, property) {\n        var _this = this;\n        var items = property['items'];\n        if (!items) {\n            items = [];\n            property['items'] = items;\n        }\n        var l = array.length;\n        var itemSet = [];\n        array.forEach(function (value) {\n            var item = {};\n            _this.pass(value, item);\n            itemSet.push(item);\n        });\n        items.push(itemSet[0]);\n    };\n    JsonSchemaGenerator.prototype.detectType = function (value) {\n        if (Array.isArray(value)) {\n            return 'array';\n        }\n        return typeof value;\n    };\n    return JsonSchemaGenerator;\n}());\nfunction generateSchema(text, mediaType) {\n    var generator = new JsonSchemaGenerator();\n    var obj = JSON.parse(text);\n    var schemaObject = generator.generateSchema(obj);\n    var schemaString = JSON.stringify(schemaObject, null, 2);\n    return schemaString;\n}\nexports.generateSchema = generateSchema;\nvar FillBodyDialog = /** @class */ (function () {\n    function FillBodyDialog(title) {\n        if (title === void 0) { title = \"Fill body\"; }\n        var _this = this;\n        this.title = title;\n        this.name = \"\";\n        this.needXML = true;\n        this.needJSON = true;\n        this.jsexample = '{\\n \"message\":\"Hello world\"\\n}';\n        this.xmlexample = \"\";\n        this.xmlschema = \"\";\n        this.jsschema = \"\";\n        this.resultPromise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n    }\n    FillBodyDialog.prototype.extraContent = function (s) {\n    };\n    FillBodyDialog.prototype.updateButtons = function () {\n        if (!this.createButton) {\n            return;\n        }\n        if (this.name.length == 0) {\n            this.createButton.setDisabled(true);\n            this.em.setDisplay(true);\n            this.em.setText(\"Please type name of your payload\");\n            return;\n        }\n        if (this.needJSON) {\n            try {\n                JSON.parse(this.jsexample);\n            }\n            catch (e) {\n                this.createButton.setDisabled(true);\n                this.em.setDisplay(true);\n                this.em.setText(\"JSON example is not correct\");\n                return;\n            }\n            // try {\n            //     var so = su.getJSONSchema(this.jsschema, null);\n            //\n            // } catch (e) {\n            //     this.createButton.setDisabled(true);\n            //     this.em.setDisplay(true)\n            //     this.em.setText(\"JSON schema is not correct\");\n            //     return;\n            // }\n        }\n        if (this.needXML) {\n            // try {\n            //     xmlutil(this.xmlexample);\n            // } catch (e) {\n            //     this.createButton.setDisabled(true);\n            //     this.em.setDisplay(true)\n            //     this.em.setText(\"XML example is not correct\");\n            //     return;\n            // }\n            // try {\n            //     var so = su.getXMLSchema(this.xmlschema);\n            //\n            // } catch (e) {\n            //     this.createButton.setDisabled(true);\n            //     this.em.setDisplay(true)\n            //     this.em.setText(\"XML schema is not correct\");\n            //     return;\n            // }\n        }\n        this.em.setDisplay(false);\n        this.createButton.setDisabled(false);\n    };\n    FillBodyDialog.prototype.show = function () {\n        var _this = this;\n        var zz = null;\n        this.em = UI.label(\"Please type name of your payload\", UI.Icon.BUG, UI.TextClasses.ERROR, UI.HighLightClasses.NONE);\n        var section = UI.section(this.title, UI.Icon.BOOK, false, false, this.em, UI.h3(\"Please type name for your payload\")).pad(10, 10);\n        section.addChild(UI.texfField(\"\", this.name, function (x) {\n            _this.name = x.getBinding().get();\n            _this.updateButtons();\n        }));\n        var r1 = UI.checkBox(\"Create XML body\");\n        r1.setValue(this.needXML);\n        r1.getBinding().addListener(function (x) {\n            _this.needXML = r1.getValue();\n            _this.updateButtons();\n        });\n        section.addChild(r1);\n        var r2 = UI.checkBox(\"Create JSON body\");\n        r2.setValue(this.needJSON);\n        r2.getBinding().addListener(function (x) {\n            _this.needJSON = r2.getValue();\n            _this.updateButtons();\n        });\n        section.addChild(r2);\n        var buttonBar = UI.hc().setPercentWidth(100).setStyle(\"display\", \"flex\");\n        buttonBar.addChild(UI.label(\"\", null, null, null).setStyle(\"flex\", \"1\"));\n        buttonBar.addChild(UI.button(\"Cancel\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.NO_HIGHLIGHT, UI.Icon.NONE, function (x) {\n            zz.destroy();\n        }).margin(10, 10));\n        this.createButton = UI.button(\"Create\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.SUCCESS, UI.Icon.NONE, function (x) {\n            _this.onOk(zz);\n            zz.destroy();\n        });\n        buttonBar.addChild(this.createButton);\n        var tf = new UI.TabFolder();\n        this.createButton.setDisabled(true);\n        this.createTextSection(tf, \"JSON Example\", \"source.json\", \"jsexample\");\n        this.createTextSection(tf, \"JSON Schema\", \"source.json\", \"jsschema\");\n        this.createTextSection(tf, \"XML Example\", \"text.xml\", \"xmlexample\");\n        this.createTextSection(tf, \"XML Schema\", \"text.xml\", \"xmlschema\");\n        tf.setOnSelected(function () {\n            var c = tf.selectedComponent();\n            var te = c.children()[1];\n            te.setText(_this[c.id()]);\n        });\n        section.addChild(tf);\n        section.addChild(buttonBar);\n        zz = IDE.workspace.addModalPanel({ item: section.renderUI() });\n    };\n    FillBodyDialog.prototype.createTextSection = function (tf, caption, lang, code) {\n        var _this = this;\n        var hs = UI.vc();\n        hs.setCaption(caption);\n        hs.setId(code);\n        var ts = new UI.AtomEditorElement(\"\", function (x) { return x; });\n        ts.setMini(false);\n        ts.getBinding().addListener(function (x) {\n            _this[code] = ts.getValue();\n            _this.updateButtons();\n        });\n        //ts.setCaption(code)\n        ts.setText(\"\" + this[code]);\n        ts.setCaption(caption);\n        ts.setGrammar(lang);\n        ts.setStyle(\"height\", \"400px\");\n        ts.setStyle(\"border\", \"solid\");\n        ts.setStyle(\"border-width\", \"1px\");\n        hs.addChild(UI.h3(\"Please type your example here:\"));\n        hs.addChild(ts);\n        if (code == 'jsexample') {\n            var b = UI.button(\"Generate JSON schema\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.SUCCESS, UI.Icon.NONE, function (x) {\n                try {\n                    var rs = generateSchema(_this.jsexample, \"application/json\");\n                    _this.jsschema = rs;\n                    tf.setSelectedIndex(1);\n                }\n                catch (e) {\n                    _this.jsschema = e.message;\n                    tf.setSelectedIndex(1);\n                }\n            });\n            hs.addChild(b.margin(5, 5, 5, 5));\n        }\n        // if (code == 'xmlexample') {\n        //     var b = UI.button(\"Generate JSON example\", UI.ButtonSizes.NORMAL, UI.ButtonHighlights.SUCCESS, UI.Icon.NONE, x=> {\n        //         try {\n        //             var rs = xmlutil(this.xmlexample)\n        //             this.jsexample = JSON.stringify(rs, null, 2);\n        //             tf.setSelectedIndex(0)\n        //         }\n        //         catch (e) {\n        //             this.jsexample = e.message;\n        //             tf.setSelectedIndex(0)\n        //         }\n        //     });\n        //     hs.addChild(b.margin(5, 5, 5, 5));\n        // }\n        tf.add(caption, null, hs);\n    };\n    FillBodyDialog.prototype.onOk = function (zz) {\n        this.resolve({\n            name: this.name,\n            needJSON: this.needJSON,\n            needXML: this.needXML,\n            jsexample: this.jsexample,\n            xmlexample: this.xmlexample,\n            jsschema: this.jsschema,\n            xmlschema: this.xmlschema,\n        });\n    };\n    FillBodyDialog.prototype.getResult = function () {\n        return this.resultPromise;\n    };\n    return FillBodyDialog;\n}());\nfunction run() {\n    var dialog = new FillBodyDialog();\n    dialog.show();\n    return dialog.getResult();\n}\nexports.run = run;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/context-menu/actions/completeBody/ui.js\n// module id = 22\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _dialogPanels = [];\nvar mdp = null;\nfunction _dialog(panel, onDone, toFocus, stretch) {\n    if (stretch === void 0) { stretch = false; }\n    return _dialog2(panel, [\n        { name: \"Ok\", isPrimary: true, highlight: UI.ButtonHighlights.PRIMARY, action: onDone },\n        { name: \"Cancel\", highlight: UI.ButtonHighlights.NO_HIGHLIGHT, action: function () { return true; } }\n    ], toFocus, stretch);\n}\nfunction _dialog2(panel, actions, toFocus, stretch) {\n    if (stretch === void 0) { stretch = false; }\n    var buttonBar = UI.hc().setPercentWidth(100);\n    actions.reverse().forEach(function (a) {\n        var button = UI.button(a.name, UI.ButtonSizes.NORMAL, a.highlight, UI.Icon.NONE, function (x) { if (a.action())\n            _closeDialog(); });\n        if (a.isPrimary) {\n            var st = panel.getBinding().status();\n            if (st) {\n                if (st.code == UI.StatusCode.ERROR) {\n                    button.setDisabled(true);\n                }\n            }\n            panel.getBinding().addStatusListener(function (x) {\n                var st = panel.getBinding().status();\n                if (st) {\n                    if (st.code != UI.StatusCode.ERROR) {\n                        button.setDisabled(false);\n                    }\n                    else {\n                        button.setDisabled(true);\n                    }\n                }\n            });\n        }\n        button.setStyle(\"float\", \"right\")\n            .margin(4, 10);\n        buttonBar.addChild(button);\n    });\n    panel.addChild(buttonBar);\n    var ui = panel.ui();\n    return function (e) {\n        _dialogPanels.push(panel);\n        var eventListener = function () {\n            if (!stretch) {\n                return;\n            }\n            var parent = ui.parentElement;\n            var height = document.body.clientHeight;\n            if (!parent) {\n                return;\n            }\n            var style = window.getComputedStyle(parent);\n            [\"paddingBottom\", \"paddingTop\", \"marginBottom\", \"marginTop\"].forEach(function (property) {\n                height -= parseFloat(style[property] || 0);\n            });\n            ui.style.height = height + \"px\";\n            ui.style.overflowY = \"scroll\";\n        };\n        window.addEventListener('resize', eventListener);\n        mdp = IDE.workspace.addModalPanel({ item: ui });\n        mdp.onDidDestroy(function () {\n            window.removeEventListener('resize', eventListener);\n        });\n        eventListener();\n        if (toFocus)\n            toFocus.ui().focus();\n    };\n}\nfunction _closeDialog() {\n    _dialogPanels.pop();\n    if (_dialogPanels.length == 0)\n        mdp.destroy();\n    else\n        mdp = IDE.workspace.addModalPanel({ item: _dialogPanels[_dialogPanels.length - 1].ui() });\n}\nfunction newMethod(inputState, method) {\n    var mdesc = inputState.methodDescriptions;\n    var cdesc = inputState.statusCodeDescriptions;\n    var NO_RESPONCE = \"No response\";\n    var NO_RESPONCE_BT = \"No response body type\";\n    var code = null, bodyType = null;\n    if (method == null)\n        method = \"get\";\n    var mdescLabel = new UI.LabelField();\n    var cdescLabel = new UI.LabelField();\n    [mdescLabel, cdescLabel].forEach(function (x) { return x.addClass('wizard-description'); });\n    mdescLabel.getActualField().margin(0, 0, 18, 8);\n    cdescLabel.getActualField().margin(0, 0, 8, 8);\n    var methodSelect = new UI.SelectField(\"Method:\", function (e, v) {\n        method = v;\n        mdescLabel.setText(\"Method \" + v + \" \" + mdesc[v]);\n    }, null);\n    methodSelect.getActualField().setOptions(Object.keys(mdesc));\n    methodSelect.getActualField().setValue(method, true);\n    var responseSelect = new UI.SelectField(\"Status code:\", function (e, v) {\n        if (v == NO_RESPONCE) {\n            v = null;\n            responseTypeSelect.getActualField().setValue(NO_RESPONCE_BT);\n        }\n        code = v;\n        responseTypeSelect.setDisabled(v == null);\n        cdescLabel.setText(v ? \"Status code \" + v + \" \" + cdesc[v] : '');\n    }, null);\n    responseSelect.getActualField().setOptions([NO_RESPONCE].concat(Object.keys(cdesc)));\n    var responseTypeSelect = new UI.SelectField(\"Generate default response with media type:\", function (e, v) {\n        if (v == NO_RESPONCE_BT) {\n            v = null;\n            typeOfValue.setDisabled(true);\n        }\n        else\n            typeOfValue.setDisabled(false);\n        bodyType = v;\n    }, null);\n    responseTypeSelect.getActualField().setOptions([NO_RESPONCE_BT, \"application/json\", \"application/xml\", \"application/x-www-form-urlencoded\"]);\n    responseTypeSelect.setDisabled(true);\n    responseTypeSelect.margin(0, 0, 0, 12);\n    var realBodyType = null;\n    var bodyTypeSelect = new UI.SelectField(\"Generate default body with media type:\", function (e, v) {\n        if (v == NO_RESPONCE_BT) {\n            v = null;\n            bodyTypeOfValue.setDisabled(true);\n        }\n        else\n            bodyTypeOfValue.setDisabled(false);\n        realBodyType = v;\n    }, null);\n    bodyTypeSelect.getActualField().setOptions([NO_RESPONCE_BT, \"application/json\", \"application/xml\", \"application/x-www-form-urlencoded\"]);\n    bodyTypeSelect.margin(0, 0, 0, 12);\n    var actualType = null;\n    var bodyTypeString = null;\n    var typeOfValue = new UI.SelectField(\"Generate default response body with type:\", function (e, v) {\n        if (v == NO_RESPONCE_BT)\n            v = null;\n        actualType = v;\n    }, null);\n    typeOfValue.setDisabled(true);\n    typeOfValue.margin(0, 0, 0, 12);\n    var __ret = inputState.typeValues;\n    var isSchema = __ret.isSchema;\n    var types = __ret.types;\n    if (types) {\n        types = [\"\"].concat(types);\n        typeOfValue.getActualField().setOptions(types);\n    }\n    var bodyTypeOfValue = new UI.SelectField(\"Generate default body with type:\", function (e, v) {\n        if (v == NO_RESPONCE_BT)\n            v = null;\n        bodyTypeString = v;\n    }, null);\n    bodyTypeOfValue.setDisabled(true);\n    bodyTypeOfValue.margin(0, 0, 0, 12);\n    var isSchema = __ret.isSchema;\n    var types = __ret.types;\n    if (types) {\n        types = [\"\"].concat(types);\n        bodyTypeOfValue.getActualField().setOptions(types);\n    }\n    var responseSection = UI.section(\"\");\n    responseSection.addChild(UI.h3(\"Body\"));\n    responseSection.addChild(bodyTypeSelect);\n    responseSection.addChild(bodyTypeOfValue);\n    responseSection.addChild(UI.h3(\"Response\"));\n    responseSection.addChild(responseSelect);\n    responseSection.addChild(cdescLabel);\n    responseSection.addChild(responseTypeSelect);\n    responseSection.addChild(typeOfValue);\n    responseSection.ui();\n    var panel = UI.section(\"Creating a new method\", UI.Icon.CODE, false, false, methodSelect, mdescLabel, responseSection);\n    var __ret = inputState.typeValues;\n    //panel.addChild(typeOfValue)\n    var savedResolve;\n    var savedReject;\n    var resultPromise = new Promise(function (resolve, reject) {\n        savedResolve = resolve;\n        savedReject = reject;\n    });\n    _dialog(panel, function () {\n        savedResolve({\n            method: method,\n            realBodyType: realBodyType,\n            code: code,\n            bodyTypeString: bodyTypeString,\n            bodyType: bodyType,\n            actualType: actualType,\n            isSchema: isSchema\n        });\n        return true;\n    })(this);\n    return resultPromise;\n}\nexports.newMethod = newMethod;\nfunction run(inputState) {\n    return newMethod(inputState);\n}\nexports.run = run;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/context-menu/actions/newMethod/ui.js\n// module id = 23\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction run(initialState) {\n    if (initialState.isParentNull) {\n        return Promise.resolve({\n            canceled: true\n        });\n    }\n    var changes = {};\n    var item = UIBuilder.buildItem(initialState.detailsTree, {\n        uri: \"localchanges\",\n        position: -1,\n        reconciler: {\n            schedule: function (runnable) { return runnable.run(); }\n        },\n        localModel: changes\n    });\n    item.setTitle(initialState.title);\n    var panel = item.render({\n        showDescription: true\n    });\n    panel.margin(8, 8, 8, 8);\n    return new Promise(function (resolve) {\n        UI.simpleModalDialog(panel, function () {\n            resolve(changes);\n            return true;\n        }, function () {\n            resolve({\n                canceled: true\n            });\n            return true;\n        });\n    });\n}\nexports.run = run;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvbnRleHQtbWVudS9hY3Rpb25zL3NpbXBsZUFjdGlvbi91aS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU1BLGFBQW9CLFlBQVk7SUFDNUIsRUFBRSxDQUFBLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDM0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDbkIsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELElBQUksT0FBTyxHQUFRLEVBQUUsQ0FBQztJQUV0QixJQUFJLElBQUksR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUU7UUFDckQsR0FBRyxFQUFFLGNBQWM7UUFDbkIsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNaLFVBQVUsRUFBRTtZQUNSLFFBQVEsRUFBRSxVQUFBLFFBQVEsSUFBSSxPQUFBLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBZCxDQUFjO1NBQ3ZDO1FBQ0QsVUFBVSxFQUFFLE9BQU87S0FDdEIsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFbEMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNwQixlQUFlLEVBQUUsSUFBSTtLQUN4QixDQUFDLENBQUM7SUFFSCxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXpCLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU87UUFDdkIsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRTtZQUN4QixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFakIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDLEVBQUU7WUFDQyxPQUFPLENBQUM7Z0JBQ0osUUFBUSxFQUFFLElBQUk7YUFDakIsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQXZDRCxrQkF1Q0MiLCJmaWxlIjoic3JjL2F0b20vY29udGV4dC1tZW51L2FjdGlvbnMvc2ltcGxlQWN0aW9uL3VpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxpYlVJTW9kdWxlID0gcmVxdWlyZShcImF0b20tdWktbGliXCIpXG5cbmRlY2xhcmUgbGV0IFVJOiBhbnk7XG5kZWNsYXJlIGxldCBJREU6IGFueTtcbmRlY2xhcmUgbGV0IFVJQnVpbGRlcjogYW55O1xuXG5leHBvcnQgZnVuY3Rpb24gcnVuKGluaXRpYWxTdGF0ZSk6IFByb21pc2U8YW55PiB7XG4gICAgaWYoaW5pdGlhbFN0YXRlLmlzUGFyZW50TnVsbCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgIGNhbmNlbGVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICB2YXIgY2hhbmdlczogYW55ID0ge307XG5cbiAgICB2YXIgaXRlbSA9IFVJQnVpbGRlci5idWlsZEl0ZW0oaW5pdGlhbFN0YXRlLmRldGFpbHNUcmVlLCB7XG4gICAgICAgIHVyaTogXCJsb2NhbGNoYW5nZXNcIixcbiAgICAgICAgcG9zaXRpb246IC0xLFxuICAgICAgICByZWNvbmNpbGVyOiB7XG4gICAgICAgICAgICBzY2hlZHVsZTogcnVubmFibGUgPT4gcnVubmFibGUucnVuKClcbiAgICAgICAgfSxcbiAgICAgICAgbG9jYWxNb2RlbDogY2hhbmdlc1xuICAgIH0pO1xuXG4gICAgaXRlbS5zZXRUaXRsZShpbml0aWFsU3RhdGUudGl0bGUpO1xuXG4gICAgdmFyIHBhbmVsID0gaXRlbS5yZW5kZXIoe1xuICAgICAgICBzaG93RGVzY3JpcHRpb246IHRydWVcbiAgICB9KTtcblxuICAgIHBhbmVsLm1hcmdpbig4LCA4LCA4LCA4KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBVSS5zaW1wbGVNb2RhbERpYWxvZyhwYW5lbCwgKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZShjaGFuZ2VzKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIGNhbmNlbGVkOiB0cnVlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSJdfQ==\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/context-menu/actions/simpleAction/ui.js\n// module id = 24\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PromiseConstructor = require(\"promise-polyfill\");\nif (typeof Promise === \"undefined\" && typeof window !== \"undefined\") {\n    window.Promise = PromiseConstructor;\n}\nvar Reconciler = /** @class */ (function () {\n    function Reconciler(logger, timeout) {\n        this.logger = logger;\n        this.timeout = timeout;\n        this.waitingList = [];\n        this.runningList = [];\n    }\n    Reconciler.prototype.schedule = function (runnable) {\n        var _this = this;\n        this.addToWaitingList(runnable);\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                _this.logger.debugDetail(\"Time came to execute \" + runnable.toString(), \"Reconciler\", \"schedule\");\n                if (runnable.isCanceled()) {\n                    _this.logger.debugDetail(\"Runnable \" + runnable.toString() + \" is cancelled, doing nothing\", \"Reconciler\", \"schedule\");\n                    _this.removeFromWaitingList(runnable);\n                    return;\n                }\n                var currentlyRunning = _this.findConflictingInRunningList(runnable);\n                if (currentlyRunning) {\n                    // TODO add an additional short timeout parameter to launch the reschedule\n                    // at the finish of the currently running task for a short time after it.\n                    _this.logger.debugDetail(\"Conflicting to \" + runnable.toString()\n                        + \" is found in the running list: \" + currentlyRunning.toString()\n                        + \" rescheduling current one.\", \"Reconciler\", \"schedule\");\n                    _this.schedule(runnable);\n                    return;\n                }\n                _this.removeFromWaitingList(runnable);\n                _this.addToRunningList(runnable);\n                _this.logger.debugDetail(\"Executing \" + runnable.toString(), \"Reconciler\", \"schedule\");\n                _this.run(runnable).then(function (result) { resolve(result); }, function (error) { reject(error); });\n            }, _this.timeout);\n        });\n    };\n    Reconciler.prototype.run = function (runnable) {\n        var _this = this;\n        return runnable.run().then(function (result) {\n            _this.removeFromRunningList(runnable);\n            return result;\n        }, function (error) {\n            _this.removeFromRunningList(runnable);\n            throw error;\n        });\n    };\n    /**\n     * Adds item to waiting list and removes anything currently in the list,\n     * which conflicts with the new item.\n     * @param runnable\n     */\n    Reconciler.prototype.addToWaitingList = function (runnable) {\n        var _this = this;\n        this.logger.debugDetail(\"Adding runnable \" + runnable.toString() + \" to waiting list\", \"Reconciler\", \"addToWaitingList\");\n        this.waitingList = this.waitingList.filter(function (current) {\n            _this.logger.debugDetail(\"Comparing existing runnable \" + current.toString() +\n                \" to the new \" + runnable.toString(), \"Reconciler\", \"addToWaitingList\");\n            var conflicts = runnable.conflicts(current);\n            if (conflicts) {\n                _this.logger.debugDetail(\"Runnables are conflicting, canceling existing one\", \"Reconciler\", \"addToWaitingList\");\n                current.cancel();\n            }\n            return !conflicts;\n        });\n        this.waitingList.push(runnable);\n    };\n    /**\n     * Removes runnable from the list of running ones.\n     * @param runnable\n     */\n    Reconciler.prototype.removeFromWaitingList = function (runnable) {\n        this.logger.debugDetail(\"Removing \" + runnable.toString()\n            + \" from waiting list\", \"Reconciler\", \"removeFromWaitingList\");\n        var index = this.waitingList.indexOf(runnable);\n        if (index !== -1) {\n            this.waitingList.splice(index, 1);\n        }\n    };\n    /**\n     * Adds runnable to the list of running ones.\n     * @param runnable\n     */\n    Reconciler.prototype.addToRunningList = function (runnable) {\n        this.logger.debugDetail(\"Adding \" + runnable.toString()\n            + \" to running list\", \"Reconciler\", \"removeFromWaitingList\");\n        this.runningList.push(runnable);\n    };\n    /**\n     * Removes runnable from the list of running ones.\n     * @param runnable\n     */\n    Reconciler.prototype.removeFromRunningList = function (runnable) {\n        this.logger.debugDetail(\"Removing \" + runnable.toString()\n            + \" from running list\", \"Reconciler\", \"removeFromWaitingList\");\n        var index = this.runningList.indexOf(runnable);\n        if (index !== -1) {\n            this.runningList.splice(index, 1);\n        }\n    };\n    /**\n     * Finds the first conflicting runnable in the current list.\n     * @param runnable\n     * @returns {any}\n     */\n    Reconciler.prototype.findConflictingInRunningList = function (runnable) {\n        for (var _i = 0, _a = this.runningList; _i < _a.length; _i++) {\n            var current = _a[_i];\n            if (runnable.conflicts(current)) {\n                return current;\n            }\n        }\n        return null;\n    };\n    return Reconciler;\n}());\nexports.Reconciler = Reconciler;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/editor-tools/reconciler.js\n// module id = 25\n// module chunks = 0","module.exports = require(\"promise-polyfill\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"promise-polyfill\"\n// module id = 26\n// module chunks = 0","\"use strict\";\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar UI = require(\"atom-ui-lib\");\nvar SC = require(\"../util/ScrollViewUI\");\nvar CompositeDisposable = UI.CompositeDisposable;\n// import details2=require(\"./details2\")\n// import contextActions = require(\"raml-actions\")\n// import commonContextActions = require(\"../context-menu/commonContextActions\")\nvar editorTools = require(\"./editor-tools\");\n// import universeHelpers = rp.universeHelpers;\n// import ramlOutline = require(\"raml-outline\")\n// import outlineCommon = require(\"./outline-common\")\nvar ramlServer = require(\"api-language-server\");\nfunction getActiveEditor() {\n    var activeEditor = atom.workspace.getActiveTextEditor();\n    if (activeEditor) {\n        return activeEditor;\n    }\n    if (editorTools.aquireManager())\n        return editorTools.aquireManager().getCurrentEditor();\n    return null;\n}\nexports.getActiveEditor = getActiveEditor;\nvar RamlOutline = /** @class */ (function (_super) {\n    __extends(RamlOutline, _super);\n    function RamlOutline() {\n        var _this = _super.call(this) || this;\n        _this.disposables = new CompositeDisposable();\n        _this.fire = true;\n        _this.createTree(null);\n        _this.addClass('raml-outline');\n        _this.addChild(_this._rs);\n        return _this;\n    }\n    RamlOutline.prototype.createTree = function (structure /*p: hl.IParseResult*/) {\n        var _this = this;\n        this._rs = createTree(structure, function (sender) {\n            if (sender.selection && sender.selection.elements && _this.fire == true) {\n                if (sender.selection.elements.length > 0 && sender.selection.elements[0]) {\n                    var activeEditor = getActiveEditor();\n                    var p1 = activeEditor.getBuffer().positionForCharacterIndex(sender.selection.elements[0].start);\n                    var p2 = activeEditor.getBuffer().positionForCharacterIndex(sender.selection.elements[0].start);\n                    activeEditor.setSelectedBufferRange({ start: p1, end: p2 }, {});\n                }\n            }\n        });\n        this._viewers = [];\n        if (structure)\n            this._viewers = [0, 1, 2, 3].map(function (i) { return _this._rs.get(i).content; });\n    };\n    RamlOutline.prototype.getTitle = function () { return \"Outline\"; };\n    RamlOutline.prototype.getNodePType = function (node) {\n        node.category;\n        if (node.category == ramlServer.StructureCategories[ramlServer.StructureCategories.ResourcesCategory])\n            return 0;\n        if (node.category == ramlServer.StructureCategories[ramlServer.StructureCategories.SchemasAndTypesCategory])\n            return 1;\n        if (node.category == ramlServer.StructureCategories[ramlServer.StructureCategories.ResourceTypesAndTraitsCategory])\n            return 2;\n        if (node.category == ramlServer.StructureCategories[ramlServer.StructureCategories.OtherCategory])\n            return 3;\n        return 3;\n    };\n    RamlOutline.prototype.setSelection = function (node) {\n        //if (this._selectedNode == node) return;\n        this._selectedNode = node;\n        this.fire = false;\n        try {\n            var index = this.getNodePType(node);\n            var viewer = this._viewers[index];\n            if (viewer != null) {\n                viewer.setSelection(node);\n                this._rs.setSelectedIndex(index);\n            }\n        }\n        finally {\n            this.fire = true;\n        }\n    };\n    RamlOutline.prototype.setUnit = function (unitPath /*unit:hl.IHighLevelNode*/, force) {\n        var _this = this;\n        if (force === void 0) { force = false; }\n        if (this.unitPath && unitPath && unitPath != this.unitPath) {\n            this._children = [];\n        }\n        this.unitPath = unitPath;\n        var activeEditor = getActiveEditor();\n        ramlServer.getNodeClientConnection().documentChanged({\n            uri: unitPath,\n            text: activeEditor.getText()\n        });\n        var structurePromise = ramlServer.getNodeClientConnection().getStructure(unitPath);\n        if (structurePromise) {\n            structurePromise.then(function (structure) {\n                _this.createTree(structure);\n                _this.addClass('raml-outline');\n                _this._children = [];\n                _this.addChild(_this._rs);\n                _this.html(_this.innerRenderUI());\n            }).catch(function (error) {\n                //ignoring, the error is already reported to the log, and we dont need to display\n                //it to user in other way\n            });\n        }\n    };\n    RamlOutline.prototype.attach = function () {\n        if (!this._isAttached) {\n            var $this = $(this);\n            $this.html(this._rs.renderUI().outerHTML);\n            this._isAttached = true;\n        }\n    };\n    RamlOutline.prototype.forEachViewer = function (command) {\n        this._viewers.forEach(command);\n    };\n    RamlOutline.prototype.refresh = function () {\n        // var unit = this.unit;\n        // this.setUnit(null);\n        // this.setUnit(unit);\n        var unitPath = this.unitPath;\n        this.setUnit(null);\n        this.setUnit(unitPath);\n    };\n    RamlOutline.prototype.destroy = function () {\n        editorTools.aquireManager()._view = null;\n        // this._selectedNode=null;\n        // this.unit=null;\n        this.unitPath = null;\n        this._viewers = [];\n        this._rs = null;\n        this._children = [];\n        this.disposables.dispose();\n    };\n    return RamlOutline;\n}(SC.Scrollable));\nexports.RamlOutline = RamlOutline;\n/*\n *\n */\n// export function treeSection(input: hl.IParseResult,\n//                             name: string,\n//                             icon: UI.Icon,\n//                             filterFunc: (x:hl.IHighLevelNode)=>boolean,\n//                             l: UI.ISelectionListener<any>,\n//                             opener: (x:hl.IParseResult)=>void=null) : UI.TreePanel<any,any> {\n//\n//     var v = UI.treeViewerSection(name,icon,input,x=>getChildren(x).filter(x=>filterFunc(<hl.IHighLevelNode> x)),new HLRenderer(opener));\n//\n//     v.viewer.setBasicLabelFunction(x=>x ? x.name() : '');\n//     v.viewer.setKeyProvider({\n//         key:(p:hl.IParseResult):string=>{\n//             return \"\"+p.lowLevel().start();\n//         }\n//\n//     });\n//     v.viewer.addSelectionListener(l)\n//     return v;\n// }\nvar HLNodeType;\n(function (HLNodeType) {\n    HLNodeType[HLNodeType[\"Resource\"] = 0] = \"Resource\";\n    HLNodeType[HLNodeType[\"Schema\"] = 1] = \"Schema\";\n    HLNodeType[HLNodeType[\"Type\"] = 2] = \"Type\";\n    HLNodeType[HLNodeType[\"Trait\"] = 3] = \"Trait\";\n    HLNodeType[HLNodeType[\"Unknown\"] = 4] = \"Unknown\";\n})(HLNodeType || (HLNodeType = {}));\n// function getNodeType(node: hl.IHighLevelNode): HLNodeType {\n//     if (outlineCommon.isResource(node)) return HLNodeType.Resource;\n//     else if (outlineCommon.isOther(node)) return HLNodeType.Trait;\n//     else if (outlineCommon.isResourceTypeOrTrait(node)) return HLNodeType.Type;\n//     else if (outlineCommon.isSchemaOrType(node)) return HLNodeType.Schema;\n//     else return HLNodeType.Unknown;\n// }\n// function isApi(p: hl.IHighLevelNode) {\n//     var pc=p.definition().key();\n//     return pc===universes.Universe08.Api||pc===universes.Universe10.Api;\n// }\n// function isDocumentation(p: hl.IHighLevelNode) {\n//     var pc=p.definition().key();\n//     return ( pc=== universes.Universe08.DocumentationItem||pc===universes.Universe10.DocumentationItem);\n// }\nfunction fullStructurePath(model) {\n    if (!model)\n        return \"\";\n    return model.text;\n    // var node = model.getSource();\n    // return fullPath(<any>node);\n}\n//\n// function fullPath(node: hl.IParseResult) {\n//     if (node == null) return \"\";\n//     else return fullPath(node.parent()) + \"/\" + node.name();\n// }\nfunction simpleTree(input, selectionListener, categoryName, opener) {\n    if (opener === void 0) { opener = null; }\n    var viewer = UI.treeViewer(function (x) {\n        return x.children;\n    }, new HLRenderer(opener), fullStructurePath);\n    viewer.setBasicLabelFunction(function (x) { return x.text; });\n    viewer.setKeyProvider({ key: function (x) { return x.key; } });\n    viewer.addSelectionListener(selectionListener);\n    viewer.getBinding().set(input);\n    return viewer;\n}\nfunction createTree(structure, selectionListener, opener) {\n    if (opener === void 0) { opener = null; }\n    if (!structure) {\n        return new UI.TabFolder();\n    }\n    var resourcesModel = structure[ramlServer.StructureCategories[ramlServer.StructureCategories.ResourcesCategory]];\n    var typesModel = structure[ramlServer.StructureCategories[ramlServer.StructureCategories.SchemasAndTypesCategory]];\n    var traitsModel = structure[ramlServer.StructureCategories[ramlServer.StructureCategories.ResourceTypesAndTraitsCategory]];\n    var otherModel = structure[ramlServer.StructureCategories[ramlServer.StructureCategories.OtherCategory]];\n    // var resourcesModel = p!=null?ramlOutline.getStructure(outlineCommon.ResourcesCategory):null;\n    // var typesModel = p!=null?ramlOutline.getStructure(outlineCommon.SchemasAndTypesCategory):null;\n    // var traitsModel = p!=null?ramlOutline.getStructure(outlineCommon.ResourceTypesAndTraitsCategory):null;\n    // var otherModel = p!=null?ramlOutline.getStructure(outlineCommon.OtherCategory):null;\n    var outline = resourcesModel != null ? simpleTree(resourcesModel, { selectionChanged: selectionListener }, ramlServer.StructureCategories[ramlServer.StructureCategories.ResourcesCategory], opener) : null;\n    var schemas = typesModel != null ? simpleTree(typesModel, { selectionChanged: selectionListener }, ramlServer.StructureCategories[ramlServer.StructureCategories.SchemasAndTypesCategory], opener) : null;\n    var types = traitsModel != null ? simpleTree(traitsModel, { selectionChanged: selectionListener }, ramlServer.StructureCategories[ramlServer.StructureCategories.ResourceTypesAndTraitsCategory], opener) : null;\n    var other = otherModel != null ? simpleTree(otherModel, { selectionChanged: selectionListener }, ramlServer.StructureCategories[ramlServer.StructureCategories.OtherCategory], opener) : null;\n    var folder = new UI.TabFolder();\n    folder.add(\"Resources\", UI.Icon.SEARCH, outline, 'raml-icon-custom');\n    folder.add(\"Schemas&Types\", UI.Icon.SEARCH, schemas, 'raml-icon-custom');\n    folder.add(\"ResourceTypes&Traits\", UI.Icon.SEARCH, types, 'raml-icon-custom');\n    folder.add(\"Other\", UI.Icon.SEARCH, other, 'raml-icon-custom');\n    folder.setSelectedIndex(0);\n    folder.setOnSelected(function () {\n        var selectedTab = folder.selectedComponent();\n        if (selectedTab) {\n            var selection = selectedTab.getSelection();\n            if (selection && selection.elements && selection.elements.length > 0) {\n                selectionListener(new UI.SelectionChangedEvent(selectedTab, null, selection));\n            }\n            selectedTab.customizePanel(true);\n        }\n    });\n    return folder;\n}\nexports.createTree = createTree;\nvar HLRenderer = /** @class */ (function () {\n    function HLRenderer(opener) {\n        this.opener = opener;\n    }\n    HLRenderer.prototype.iconNameToIconEnum = function (iconName) {\n        if (!iconName)\n            return null;\n        return UI.Icon[iconName];\n    };\n    HLRenderer.prototype.textHighlightNameToTextClass = function (highlightName) {\n        if (!highlightName)\n            return null;\n        return UI.TextClasses[highlightName];\n    };\n    HLRenderer.prototype.render = function (model) {\n        try {\n            // if (ramlOutline.isTypedStructureNode(model)\n            //     && (<ramlOutline.TypedStructureNode>model).type\n            //     && (<ramlOutline.TypedStructureNode>model).type == ramlOutline.NodeType.ATTRIBUTE) {\n            //\n            //     var attr = <hl.IAttribute>(<any>model.getSource());\n            //\n            //     //TODO check if we really need custom selection here, otherwise the whole \"is attribute\" condition is redundant\n            //     return UI.hc(UI.label(model.text), UI.a(\"\", x=> {\n            //         var p1 = editorTools.aquireManager().getCurrentEditor().\n            //             getBuffer().positionForCharacterIndex(attr.lowLevel().start());\n            //         var p2 = editorTools.aquireManager().getCurrentEditor().\n            //             getBuffer().positionForCharacterIndex(attr.lowLevel().end());\n            //         editorTools.aquireManager().getCurrentEditor().setSelectedBufferRange({ start: p1, end: p1 }, {});\n            //\n            //     }, UI.Icon.ARROW_SMALL_LEFT, null, null));\n            //\n            // }\n            var icon = UI.Icon.DASH;\n            var highLight = UI.TextClasses.NORMAL;\n            if (this.iconNameToIconEnum(model.icon)) {\n                icon = this.iconNameToIconEnum(model.icon);\n            }\n            if (this.textHighlightNameToTextClass(model.textStyle)) {\n                highLight = this.textHighlightNameToTextClass(model.textStyle);\n            }\n            var extraText = \"\";\n            var extraClass = UI.TextClasses.NORMAL;\n            var hc = UI.hc(UI.label(model.text, icon, highLight));\n            if (model.typeText) {\n                hc.addChild(UI.label(model.typeText, UI.Icon.NONE, UI.TextClasses.WARNING).margin(2, 0, 0, 0));\n            }\n            // if (model.getSource().lowLevel().unit()!=model.getSource().root().lowLevel().unit()){\n            //     highLight=UI.TextClasses.SUBTLE;\n            //     hc.addChild(UI.label(\"(\"+model.getSource().lowLevel().unit().path()+\")\",UI.Icon.NONE,highLight).margin(5,0,0,0));\n            // }\n            hc.addClass(\"outline\");\n            return hc;\n        }\n        catch (e) {\n            console.log(e);\n            return UI.hc(UI.label(\"Illegal node\", UI.Icon.ARROW_SMALL_LEFT, null, null));\n        }\n    };\n    return HLRenderer;\n}());\nexports.HLRenderer = HLRenderer;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/editor-tools/outline-view.js\n// module id = 27\n// module chunks = 0","\"use strict\";\n/// <reference path=\"../../../typings/main.d.ts\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction markOccurences(editor, occurences) {\n    var layer = getOccurencesLayer(editor);\n    layer.clear();\n    occurences.forEach(function (occurence) {\n        layer.markBufferRange(occurence);\n    });\n    editor.decorateMarkerLayer(layer, {\n        type: 'highlight',\n        class: 'raml-occurence'\n    });\n}\nexports.markOccurences = markOccurences;\nfunction clearOccurences(editor) {\n    var layer = getOccurencesLayer(editor);\n    layer.clear();\n}\nexports.clearOccurences = clearOccurences;\nfunction getOccurencesLayer(editor) {\n    var layerId = editor.occurencesLayerId;\n    var layer = layerId && editor.getMarkerLayer(layerId);\n    if (!layer) {\n        layer = editor.addMarkerLayer();\n    }\n    editor.occurencesLayerId = layer.id;\n    return layer;\n}\nvar MarkOccurrenceRunnable = /** @class */ (function () {\n    function MarkOccurrenceRunnable(editor, position) {\n        this.editor = editor;\n        this.position = position;\n        this.cancelled = false;\n        this.offset = editor.getBuffer().characterIndexForPosition(position);\n    }\n    /**\n     * Performs the actual business logics.\n     * Should resolve the promise when finished.\n     */\n    MarkOccurrenceRunnable.prototype.run = function () {\n        return Promise.resolve();\n        // return ramlServer.getNodeClientConnection().markOccurrences(this.getMarkOccurrencesPath(), this.offset)\n        //     .then(ranges => {\n        //\n        //         let currentPosition = this.editor.getCursorBufferPosition();\n        //         if (currentPosition.row != this.position.row || currentPosition.column != this.position.column) {\n        //             //data is outdated\n        //             return;\n        //         }\n        //\n        //         let bufferRanges: atom.Range[] = ranges.map(range=>{\n        //             return {\n        //                 start: this.editor.getBuffer().positionForCharacterIndex(range.start),\n        //                 end: this.editor.getBuffer().positionForCharacterIndex(range.end),\n        //             }\n        //         })\n        //         markOccurences(this.editor, bufferRanges);\n        // })\n    };\n    /**\n     * Performs the actual business logics synchronously.\n     */\n    MarkOccurrenceRunnable.prototype.runSynchronously = function () {\n    };\n    /**\n     * Whether two runnable conflict with each other.\n     * Must work fast as its called often.\n     * @param other\n     */\n    MarkOccurrenceRunnable.prototype.conflicts = function (other) {\n        if (!other.getMarkOccurrencesPath)\n            return false;\n        var otherPath = other.getMarkOccurrencesPath();\n        return this.getMarkOccurrencesPath() == otherPath;\n    };\n    /**\n     * Cancels the runnable. run() method should do nothing if launched later,\n     * if cancel is called during the run() method execution, run() should stop as soon as it can.\n     */\n    MarkOccurrenceRunnable.prototype.cancel = function () {\n        this.cancelled = true;\n    };\n    /**\n     * Whether cancel() method was called at least once.\n     */\n    MarkOccurrenceRunnable.prototype.isCanceled = function () {\n        return this.cancelled;\n    };\n    MarkOccurrenceRunnable.prototype.getMarkOccurrencesPath = function () {\n        return this.editor.getPath();\n    };\n    return MarkOccurrenceRunnable;\n}());\nexports.MarkOccurrenceRunnable = MarkOccurrenceRunnable;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvcmUvbWFya09jY3VyZW5jZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG1EQUFtRDs7QUFLbkQsd0JBQStCLE1BQXdCLEVBQUUsVUFBd0I7SUFDN0UsSUFBSSxLQUFLLEdBQVEsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFNUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRWQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVM7UUFDeEIsS0FBSyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUMsQ0FBQztJQUVHLE1BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUU7UUFDckMsSUFBSSxFQUFFLFdBQVc7UUFDakIsS0FBSyxFQUFFLGdCQUFnQjtLQUMxQixDQUFDLENBQUM7QUFDUCxDQUFDO0FBYkQsd0NBYUM7QUFFRCx5QkFBZ0MsTUFBd0I7SUFDcEQsSUFBSSxLQUFLLEdBQVEsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFNUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2xCLENBQUM7QUFKRCwwQ0FJQztBQUVELDRCQUE0QixNQUF3QjtJQUNoRCxJQUFJLE9BQU8sR0FBUyxNQUFPLENBQUMsaUJBQWlCLENBQUM7SUFFOUMsSUFBSSxLQUFLLEdBQUcsT0FBTyxJQUFVLE1BQU8sQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFN0QsRUFBRSxDQUFBLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ1IsS0FBSyxHQUFTLE1BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBRUssTUFBTyxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7SUFFM0MsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUNqQixDQUFDO0FBRUQ7SUFLSSxnQ0FBb0IsTUFBd0IsRUFBVSxRQUFvQjtRQUF0RCxXQUFNLEdBQU4sTUFBTSxDQUFrQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVk7UUFIbEUsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUl0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBQ0Q7OztPQUdHO0lBQ0gsb0NBQUcsR0FBSDtRQUNJLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDeEIsMEdBQTBHO1FBQzFHLHdCQUF3QjtRQUN4QixFQUFFO1FBQ0YsdUVBQXVFO1FBQ3ZFLDRHQUE0RztRQUM1RyxpQ0FBaUM7UUFDakMsc0JBQXNCO1FBQ3RCLFlBQVk7UUFDWixFQUFFO1FBQ0YsK0RBQStEO1FBQy9ELHVCQUF1QjtRQUN2Qix5RkFBeUY7UUFDekYscUZBQXFGO1FBQ3JGLGdCQUFnQjtRQUNoQixhQUFhO1FBQ2IscURBQXFEO1FBQ3JELEtBQUs7SUFDVCxDQUFDO0lBQ0Q7O09BRUc7SUFDSCxpREFBZ0IsR0FBaEI7SUFDQSxDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNILDBDQUFTLEdBQVQsVUFBVSxLQUErQjtRQUNyQyxFQUFFLENBQUMsQ0FBQyxDQUFPLEtBQU0sQ0FBQyxzQkFBc0IsQ0FBQztZQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFFdkQsSUFBSSxTQUFTLEdBQWtCLEtBQU0sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBRS9ELE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxTQUFTLENBQUM7SUFDdEQsQ0FBQztJQUNEOzs7T0FHRztJQUNILHVDQUFNLEdBQU47UUFDSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDO0lBQ0Q7O09BRUc7SUFDSCwyQ0FBVSxHQUFWO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELHVEQUFzQixHQUF0QjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFDTCw2QkFBQztBQUFELENBbEVBLEFBa0VDLElBQUE7QUFsRVksd0RBQXNCIiwiZmlsZSI6InNyYy9hdG9tL2NvcmUvbWFya09jY3VyZW5jZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy9tYWluLmQudHNcIiAvPlxuXG5pbXBvcnQgYXRvbSA9IHJlcXVpcmUoJy4uL2NvcmUvYXRvbVdyYXBwZXInKTtcbmltcG9ydCByYW1sU2VydmVyID0gcmVxdWlyZShcImFwaS1sYW5ndWFnZS1zZXJ2ZXJcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXJrT2NjdXJlbmNlcyhlZGl0b3I6IGF0b20uSVRleHRFZGl0b3IsIG9jY3VyZW5jZXM6IGF0b20uUmFuZ2VbXSkge1xuICAgIHZhciBsYXllcjogYW55ID0gZ2V0T2NjdXJlbmNlc0xheWVyKGVkaXRvcik7XG5cbiAgICBsYXllci5jbGVhcigpO1xuXG4gICAgb2NjdXJlbmNlcy5mb3JFYWNoKG9jY3VyZW5jZSA9PiB7XG4gICAgICAgIGxheWVyLm1hcmtCdWZmZXJSYW5nZShvY2N1cmVuY2UpO1xuICAgIH0pO1xuXG4gICAgKDxhbnk+ZWRpdG9yKS5kZWNvcmF0ZU1hcmtlckxheWVyKGxheWVyLCB7XG4gICAgICAgIHR5cGU6ICdoaWdobGlnaHQnLFxuICAgICAgICBjbGFzczogJ3JhbWwtb2NjdXJlbmNlJ1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJPY2N1cmVuY2VzKGVkaXRvcjogYXRvbS5JVGV4dEVkaXRvcikge1xuICAgIHZhciBsYXllcjogYW55ID0gZ2V0T2NjdXJlbmNlc0xheWVyKGVkaXRvcik7XG5cbiAgICBsYXllci5jbGVhcigpO1xufVxuXG5mdW5jdGlvbiBnZXRPY2N1cmVuY2VzTGF5ZXIoZWRpdG9yOiBhdG9tLklUZXh0RWRpdG9yKTogYW55IHtcbiAgICB2YXIgbGF5ZXJJZCA9ICg8YW55PmVkaXRvcikub2NjdXJlbmNlc0xheWVySWQ7XG5cbiAgICB2YXIgbGF5ZXIgPSBsYXllcklkICYmICg8YW55PmVkaXRvcikuZ2V0TWFya2VyTGF5ZXIobGF5ZXJJZCk7XG5cbiAgICBpZighbGF5ZXIpIHtcbiAgICAgICAgbGF5ZXIgPSAoPGFueT5lZGl0b3IpLmFkZE1hcmtlckxheWVyKCk7XG4gICAgfVxuXG4gICAgKDxhbnk+ZWRpdG9yKS5vY2N1cmVuY2VzTGF5ZXJJZCA9IGxheWVyLmlkO1xuXG4gICAgcmV0dXJuIGxheWVyO1xufVxuXG5leHBvcnQgY2xhc3MgTWFya09jY3VycmVuY2VSdW5uYWJsZSBpbXBsZW1lbnRzIHJhbWxTZXJ2ZXIuUnVubmFibGU8dm9pZD4ge1xuXG4gICAgcHJpdmF0ZSBjYW5jZWxsZWQgPSBmYWxzZTtcbiAgICBwcml2YXRlIG9mZnNldDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlZGl0b3I6IGF0b20uSVRleHRFZGl0b3IsIHByaXZhdGUgcG9zaXRpb246IGF0b20uUG9pbnQpIHtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBlZGl0b3IuZ2V0QnVmZmVyKCkuY2hhcmFjdGVySW5kZXhGb3JQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIHRoZSBhY3R1YWwgYnVzaW5lc3MgbG9naWNzLlxuICAgICAqIFNob3VsZCByZXNvbHZlIHRoZSBwcm9taXNlIHdoZW4gZmluaXNoZWQuXG4gICAgICovXG4gICAgcnVuKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgLy8gcmV0dXJuIHJhbWxTZXJ2ZXIuZ2V0Tm9kZUNsaWVudENvbm5lY3Rpb24oKS5tYXJrT2NjdXJyZW5jZXModGhpcy5nZXRNYXJrT2NjdXJyZW5jZXNQYXRoKCksIHRoaXMub2Zmc2V0KVxuICAgICAgICAvLyAgICAgLnRoZW4ocmFuZ2VzID0+IHtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgICAgICBsZXQgY3VycmVudFBvc2l0aW9uID0gdGhpcy5lZGl0b3IuZ2V0Q3Vyc29yQnVmZmVyUG9zaXRpb24oKTtcbiAgICAgICAgLy8gICAgICAgICBpZiAoY3VycmVudFBvc2l0aW9uLnJvdyAhPSB0aGlzLnBvc2l0aW9uLnJvdyB8fCBjdXJyZW50UG9zaXRpb24uY29sdW1uICE9IHRoaXMucG9zaXRpb24uY29sdW1uKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgIC8vZGF0YSBpcyBvdXRkYXRlZFxuICAgICAgICAvLyAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgIGxldCBidWZmZXJSYW5nZXM6IGF0b20uUmFuZ2VbXSA9IHJhbmdlcy5tYXAocmFuZ2U9PntcbiAgICAgICAgLy8gICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHN0YXJ0OiB0aGlzLmVkaXRvci5nZXRCdWZmZXIoKS5wb3NpdGlvbkZvckNoYXJhY3RlckluZGV4KHJhbmdlLnN0YXJ0KSxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGVuZDogdGhpcy5lZGl0b3IuZ2V0QnVmZmVyKCkucG9zaXRpb25Gb3JDaGFyYWN0ZXJJbmRleChyYW5nZS5lbmQpLFxuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfSlcbiAgICAgICAgLy8gICAgICAgICBtYXJrT2NjdXJlbmNlcyh0aGlzLmVkaXRvciwgYnVmZmVyUmFuZ2VzKTtcbiAgICAgICAgLy8gfSlcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgdGhlIGFjdHVhbCBidXNpbmVzcyBsb2dpY3Mgc3luY2hyb25vdXNseS5cbiAgICAgKi9cbiAgICBydW5TeW5jaHJvbm91c2x5KCk6IHZvaWQge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHR3byBydW5uYWJsZSBjb25mbGljdCB3aXRoIGVhY2ggb3RoZXIuXG4gICAgICogTXVzdCB3b3JrIGZhc3QgYXMgaXRzIGNhbGxlZCBvZnRlbi5cbiAgICAgKiBAcGFyYW0gb3RoZXJcbiAgICAgKi9cbiAgICBjb25mbGljdHMob3RoZXI6IHJhbWxTZXJ2ZXIuUnVubmFibGU8YW55Pik6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoISg8YW55Pm90aGVyKS5nZXRNYXJrT2NjdXJyZW5jZXNQYXRoKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgbGV0IG90aGVyUGF0aCA6IHN0cmluZyA9ICg8YW55Pm90aGVyKS5nZXRNYXJrT2NjdXJyZW5jZXNQYXRoKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWFya09jY3VycmVuY2VzUGF0aCgpID09IG90aGVyUGF0aDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VscyB0aGUgcnVubmFibGUuIHJ1bigpIG1ldGhvZCBzaG91bGQgZG8gbm90aGluZyBpZiBsYXVuY2hlZCBsYXRlcixcbiAgICAgKiBpZiBjYW5jZWwgaXMgY2FsbGVkIGR1cmluZyB0aGUgcnVuKCkgbWV0aG9kIGV4ZWN1dGlvbiwgcnVuKCkgc2hvdWxkIHN0b3AgYXMgc29vbiBhcyBpdCBjYW4uXG4gICAgICovXG4gICAgY2FuY2VsKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgY2FuY2VsKCkgbWV0aG9kIHdhcyBjYWxsZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgKi9cbiAgICBpc0NhbmNlbGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW5jZWxsZWQ7XG4gICAgfVxuXG4gICAgZ2V0TWFya09jY3VycmVuY2VzUGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmdldFBhdGgoKTtcbiAgICB9XG59XG5cbiJdfQ==\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/core/markOccurences.js\n// module id = 28\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar qcui = require(\"./quick-commands-ui\");\nvar atom = require(\"../core/atomWrapper\");\n// import contextActions = require(\"raml-actions\")\nvar cc = require(\"./code-commands\");\nvar et = require(\"../editor-tools/editor-tools\");\n/*\n * Quick command is a command object that stores command info, body and filtering function\n */\nvar QuickCommand = /** @class */ (function () {\n    function QuickCommand(id, title, command, priority, when) {\n        this.id = id;\n        this.title = title;\n        this.command = command;\n        this.priority = priority;\n        this.when = when;\n    }\n    QuickCommand.prototype.registerAsAtomCommand = function (target) {\n        if (this.atomCommand && this.atomCommand.disposed == false)\n            this.atomCommand.dispose();\n        this.atomCommand = atom.commands.add(target, this.id, this.command);\n    };\n    QuickCommand.prototype.dispose = function () {\n        if (this.atomCommand && this.atomCommand.disposed == false)\n            this.atomCommand.dispose();\n        cm.unregister(this);\n    };\n    return QuickCommand;\n}());\nexports.QuickCommand = QuickCommand;\n/*\n * Command manager manages quick commands.\n * All quick commands should be registered here.\n * For usage example, see registerCommands\n */\nvar CommandManager = /** @class */ (function () {\n    function CommandManager() {\n        this.commands = {};\n        this.panel = new qcui.SelectListView(function (command) { return command.command(); }, function (command) { return command.title; }, 'title');\n    }\n    CommandManager.prototype.register = function (cmd) {\n        if (this.commands[cmd.id] != null)\n            this.unregister(cmd.id);\n        this.commands[cmd.id] = cmd;\n        return cmd;\n    };\n    CommandManager.prototype.unregister = function (cmd) {\n        if (typeof (cmd) == \"string\")\n            this.unregister(this.commands[cmd]);\n        var qcmd = cmd;\n        if (qcmd == null)\n            return null;\n        delete this.commands[qcmd.id];\n        return qcmd;\n    };\n    CommandManager.prototype.add = function (id, title, command, when, priority, atomTarget) {\n        var cmd = new QuickCommand(id, title, command, priority ? priority : 0, when ? when : function () { return true; });\n        if (atomTarget)\n            cmd.registerAsAtomCommand(atomTarget);\n        this.register(cmd);\n        return cmd;\n    };\n    CommandManager.prototype.show = function (predicate) {\n        var joinedCommands = {};\n        for (var commandId in this.commands) {\n            joinedCommands[commandId] = this.commands[commandId];\n        }\n        this.getDynamicCommands().forEach(function (currentCommand) {\n            joinedCommands[currentCommand.id] = currentCommand;\n        });\n        var list = Object.keys(joinedCommands)\n            .map(function (key) { return joinedCommands[key]; })\n            .sort(function (a, b) { return b.priority - a.priority; })\n            .filter(function (cmd) { return cmd.when(); });\n        if (predicate)\n            list = list.filter(predicate);\n        this.panel.show(list);\n    };\n    CommandManager.prototype.getDynamicCommands = function () {\n        var result = [];\n        // var currentActions = contextActions.calculateCurrentActions(contextActions.TARGET_RAML_EDITOR_NODE)\n        //\n        // currentActions.forEach(action => {\n        // \tvar convertedQuickCommand : QuickCommand = new QuickCommand(action.name,\n        // \t\taction.label?action.label:action.name, action.onClick, 1, ()=>{return true})\n        //\n        // \tvar cmd : any = convertedQuickCommand\n        // \tcmd['__module__'] = 'editorTools'\n        // \tresult.push(convertedQuickCommand)\n        // })\n        return result;\n    };\n    return CommandManager;\n}());\nexports.CommandManager = CommandManager;\nvar cm;\n/*\n * Always return working copy of manager.\n */\nfunction manager() {\n    if (!cm)\n        cm = new CommandManager();\n    return cm;\n}\nexports.manager = manager;\n/*\n * function for RAML -> Show Quick Commands (^Q)\n */\nfunction showCommands() {\n    manager().show();\n}\nexports.showCommands = showCommands;\n/*\n * registerCommands is called at the plugin initialization for registering global commands\n */\nfunction registerCommands() {\n    cc.registerQuickCommands(manager());\n    cm.add('aml-workbench:editor-tools', 'Show Editor Tools', function () { return et.initEditorTools(); }, function () { return et.editorToolsStatus() == false; });\n}\nexports.registerCommands = registerCommands;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/quick-commands/quick-commands.js\n// module id = 29\n// module chunks = 0","\"use strict\";\n/// <reference path=\"../../../typings/main.d.ts\" />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar atom = require(\"../core/atomWrapper\");\nvar aspv = require(\"atom-space-pen-views\");\n/*\n * List viewer for commands. accepts confirmation function, label function and key for fuzzy filtering.\n */\nvar SelectListView = /** @class */ (function (_super) {\n    __extends(SelectListView, _super);\n    function SelectListView(_confirmed, label, filterKey) {\n        if (filterKey === void 0) { filterKey = ''; }\n        var _this = _super.call(this, []) || this;\n        _this._confirmed = _confirmed;\n        _this.label = label;\n        _this.filterKey = filterKey;\n        return _this;\n    }\n    SelectListView.prototype.getFilterKey = function () { return this.filterKey; };\n    SelectListView.prototype.viewForItem = function (item) {\n        return \"<li>\" + this.label(item) + \"</li>\";\n    };\n    SelectListView.prototype.cancel = function () {\n        this.panel.hide();\n        _super.prototype.cancel.call(this);\n    };\n    SelectListView.prototype.hide = function () {\n        if (!this.panel)\n            return;\n        this.panel.hide();\n    };\n    SelectListView.prototype.confirmed = function (item) {\n        this._confirmed(item);\n        this.hide();\n        return this.getSelectedItemView();\n    };\n    SelectListView.prototype.show = function (commands) {\n        this.storeFocusedElement();\n        if (!this.panel)\n            this.panel = atom.workspace.addModalPanel({ item: this });\n        this.setItems(commands);\n        this.panel.show();\n        this.focusFilterEditor();\n    };\n    return SelectListView;\n}(aspv.SelectListView));\nexports.SelectListView = SelectListView;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL3F1aWNrLWNvbW1hbmRzL3F1aWNrLWNvbW1hbmRzLXVpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxtREFBbUQ7Ozs7Ozs7Ozs7OztBQUVuRCwwQ0FBNkM7QUFDN0MsMkNBQThDO0FBRzlDOztHQUVHO0FBQ0g7SUFBdUMsa0NBQW1CO0lBRXhELHdCQUFtQixVQUE2QixFQUFVLEtBQXFCLEVBQVUsU0FBc0I7UUFBdEIsMEJBQUEsRUFBQSxjQUFzQjtRQUEvRyxZQUNFLGtCQUFNLEVBQUUsQ0FBQyxTQUNWO1FBRmtCLGdCQUFVLEdBQVYsVUFBVSxDQUFtQjtRQUFVLFdBQUssR0FBTCxLQUFLLENBQWdCO1FBQVUsZUFBUyxHQUFULFNBQVMsQ0FBYTs7SUFFL0csQ0FBQztJQUVELHFDQUFZLEdBQVosY0FBaUIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBRXpDLG9DQUFXLEdBQVgsVUFBWSxJQUFJO1FBQ2QsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQztJQUM3QyxDQUFDO0lBRUQsK0JBQU0sR0FBTjtRQUNFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbEIsaUJBQU0sTUFBTSxXQUFFLENBQUM7SUFDakIsQ0FBQztJQUVELDZCQUFJLEdBQUo7UUFDRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFBQyxNQUFNLENBQUM7UUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsa0NBQVMsR0FBVCxVQUFVLElBQUk7UUFDWixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBSUQsNkJBQUksR0FBSixVQUFLLFFBQWE7UUFDaEIsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxFQUFFLElBQUksRUFBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2hGLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQXJDQSxBQXFDQyxDQXJDc0MsSUFBSSxDQUFDLGNBQWMsR0FxQ3pEO0FBckNZLHdDQUFjIiwiZmlsZSI6InNyYy9hdG9tL3F1aWNrLWNvbW1hbmRzL3F1aWNrLWNvbW1hbmRzLXVpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvbWFpbi5kLnRzXCIgLz5cblxuaW1wb3J0IGF0b20gPSByZXF1aXJlKCcuLi9jb3JlL2F0b21XcmFwcGVyJyk7XG5pbXBvcnQgYXNwdiA9IHJlcXVpcmUoJ2F0b20tc3BhY2UtcGVuLXZpZXdzJyk7XG5cblxuLypcbiAqIExpc3Qgdmlld2VyIGZvciBjb21tYW5kcy4gYWNjZXB0cyBjb25maXJtYXRpb24gZnVuY3Rpb24sIGxhYmVsIGZ1bmN0aW9uIGFuZCBrZXkgZm9yIGZ1enp5IGZpbHRlcmluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNlbGVjdExpc3RWaWV3PFQ+IGV4dGVuZHMgYXNwdi5TZWxlY3RMaXN0VmlldyB7XG5cbiAgY29uc3RydWN0b3IocHVibGljIF9jb25maXJtZWQ6IChpdGVtOiBUKSA9PiB2b2lkLCBwcml2YXRlIGxhYmVsOiAoaXRlbTogVCk9PmFueSwgcHJpdmF0ZSBmaWx0ZXJLZXk6IHN0cmluZyA9ICcnKSB7XG4gICAgc3VwZXIoW10pO1xuICB9XG5cbiAgZ2V0RmlsdGVyS2V5KCkgeyByZXR1cm4gdGhpcy5maWx0ZXJLZXk7IH1cblxuICB2aWV3Rm9ySXRlbShpdGVtKSB7XG4gICAgcmV0dXJuIFwiPGxpPlwiICsgdGhpcy5sYWJlbChpdGVtKSArIFwiPC9saT5cIjtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLnBhbmVsLmhpZGUoKTtcbiAgICBzdXBlci5jYW5jZWwoKTtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLnBhbmVsKSByZXR1cm47XG4gICAgdGhpcy5wYW5lbC5oaWRlKCk7XG4gIH1cblxuICBjb25maXJtZWQoaXRlbSkge1xuICAgIHRoaXMuX2NvbmZpcm1lZChpdGVtKTtcbiAgICB0aGlzLmhpZGUoKTtcbiAgICByZXR1cm4gdGhpcy5nZXRTZWxlY3RlZEl0ZW1WaWV3KCk7XG4gIH1cblxuICBwcml2YXRlIHBhbmVsOiBhbnk7XG5cbiAgc2hvdyhjb21tYW5kczogVFtdKSB7XG4gICAgdGhpcy5zdG9yZUZvY3VzZWRFbGVtZW50KCk7XG4gICAgaWYgKCF0aGlzLnBhbmVsKSB0aGlzLnBhbmVsID0gYXRvbS53b3Jrc3BhY2UuYWRkTW9kYWxQYW5lbCh7IGl0ZW06IDxhbnk+dGhpcyB9KTtcbiAgICB0aGlzLnNldEl0ZW1zKGNvbW1hbmRzKTtcbiAgICB0aGlzLnBhbmVsLnNob3coKTtcbiAgICB0aGlzLmZvY3VzRmlsdGVyRWRpdG9yKCk7XG4gIH1cbn1cbiJdfQ==\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/quick-commands/quick-commands-ui.js\n// module id = 30\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// import dialogs=require(\"../dialogs/dialogs\")\n// import path=require('path')\n// import rp=require(\"raml-1-parser\")\n//\n// import hl=rp.hl;\n// import universe = rp.universes;\n// import services =rp.ds;\n//\n// import universeHelpers =rp.universeHelpers;\n//\n// class AddNewResourceStateCalculator extends contextActions.CommonASTStateCalculator {\n//     calculate () : any {\n//\n//         //usually we dont need to check the editor, CommonASTStateCalculator does this for us\n//         //but in this case we accept null generalState, so double-checking for opened file\n//         var editor=this.getEditor()\n//         if (!editor) return null\n//\n//         if (path.extname(editor.getPath()) != '.raml') return null\n//\n//         var generalState = this.getGeneralState()\n//         if (!generalState) return null;\n//\n//         var highLevelNode = <hl.IHighLevelNode><any>generalState.node;\n//\n//         if (!universeHelpers.isResourceType(highLevelNode.definition()) &&\n//             !universeHelpers.isApiType(highLevelNode.definition()))\n//             return null\n//\n//         if(!highLevelNode.lowLevel()) {\n//             return null;\n//         }\n//\n//         return highLevelNode\n//     }\n// }\n//\n// class CreateNewAPIStateCalculator extends contextActions.CommonASTStateCalculator {\n//     calculate () : any {\n//\n//         var generalState = this.getGeneralState()\n//         if (generalState) return null\n//\n//         var editor=this.getEditor()\n//         if (!editor) return null\n//\n//         if (path.extname(editor.getPath()) != '.raml') return null\n//\n//         var text = editor.getText().trim()\n//         if (text != \"\") return null\n//\n//         return {}\n//     }\n// }\n//\n//\n// export function getResourceParent(node: hl.IHighLevelNode) {\n//     if (!node || !node.property()) return null;\n//     if ((universeHelpers.isResourcesProperty(node.property()) || universeHelpers.isResourceTypesProperty(node.property()))\n//         && (universeHelpers.isResourceType(node.definition()) || universeHelpers.isResourceTypeType(node.definition()))) return node;\n//     return getResourceParent(node.parent());\n// }\n// function getMethodParent(node: hl.IHighLevelNode) {\n//     if (!node || !node.property()) return null;\n//     if ((universeHelpers.isMethodType(node.definition())||universeHelpers.isTraitType(node.definition()))&&!node.definition().getAdapter(services.RAMLService).isUserDefined()){\n//         return node;\n//     }\n//     return null;\n// }\n// function getParent(node: hl.IHighLevelNode,name:string) {\n//     if (!node || !node.property()) return null;\n//     if ((node.definition().isAssignableFrom(name))){\n//         return node;\n//     }\n//     return null;\n// }\n//\n// function getResourceParentOrRoot(node: hl.IHighLevelNode) {\n//     var rp = getResourceParent(node);\n//     return rp ? rp : editorTools.aquireManager().ast;\n// }\n//\n// export function toResource(node: hl.IHighLevelNode) {\n//     if (!node || !node.property()) return null;\n//\n//     if ((universeHelpers.isResourcesProperty(node.property()) || universeHelpers.isResourceTypesProperty(node.property()))\n//         && (universeHelpers.isResourceType(node.definition()) || universeHelpers.isResourceTypeType(node.definition()))) return node;\n//\n//     return null;\n// }\n//\nfunction registerQuickCommands(cm) {\n    //     if (!editorTools.aquireManager()) editorTools.initEditorTools(false);\n    //\n    //     var commands = [\n    //         //cm.add( 'raml-labs:re-parse',\n    //         //    \"Parse current file again\",\n    //         //    () => {\n    //         //        editorTools.aquireManager().doParse(editorTools.aquireManager().getCurrentEditor().getPath());\n    //         //        editorTools.aquireManager().getView().forEachViewer(viewer=>viewer.clear());\n    //         //        editorTools.aquireManager().getView().setUnit(editorTools.aquireManager().ast, true); },\n    //         //    () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && editorTools.aquireManager().ast != null,\n    //         //    -100)\n    //\n    //     ];\n    //\n    //     commands.forEach(x=>x['__module__'] = 'editorTools');\n    //\n    //     contextActions.addAction({\n    //         name : \"Add new resource\",\n    //         target : contextActions.TARGET_RAML_EDITOR_NODE,\n    //         category : [\"Add new...\"],\n    //         onClick : state=>dialogs.newResource(editorTools.aquireManager().getSelectedNode()),\n    //         stateCalculator : new AddNewResourceStateCalculator(),\n    //         shouldDisplay : state=>state != null\n    //     })\n    //\n    //     contextActions.addAction({\n    //         name : \"Create new API\",\n    //         target : contextActions.TARGET_RAML_EDITOR_NODE,\n    //         category : [\"Add new...\"],\n    //         onClick : state=>dialogs.newApi(),\n    //         stateCalculator : new CreateNewAPIStateCalculator(),\n    //         shouldDisplay : state=>state != null\n    //     })\n    //\n    //     contextActions.addSimpleAction(\"Add new method\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newMethod(toResource(editorTools.aquireManager().getSelectedNode())),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && toResource(editorTools.aquireManager().getSelectedNode()) != null);\n    //\n    //     contextActions.addSimpleAction(\"Create new URI Parameter\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newNode(toResource(editorTools.aquireManager().getSelectedNode()),\"Create new URI Parameter\",\"uriParameters\"),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (toResource(editorTools.aquireManager().getSelectedNode()) != null));\n    //\n    //     contextActions.addSimpleAction(\"Create new Query Parameter\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newNode(getMethodParent(editorTools.aquireManager().getSelectedNode()),\"Create new Query Parameter\",\"queryParameters\"),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getMethodParent(editorTools.aquireManager().getSelectedNode()) != null));\n    //\n    //     contextActions.addSimpleAction(\"Create new Header\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newNode(getMethodParent(editorTools.aquireManager().getSelectedNode()),\"Create new Header\",\"headers\"),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getMethodParent(editorTools.aquireManager().getSelectedNode()) != null));\n    //\n    //     contextActions.addSimpleAction(\"Create new Response Header\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newNode(getParent(editorTools.aquireManager().getSelectedNode(),\"Response\"),\"Create new Header\",\"headers\"),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getParent(editorTools.aquireManager().getSelectedNode(),\"Response\" )!= null));\n    //     contextActions.addSimpleAction(\"Create new Response Body\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newNode(getParent(editorTools.aquireManager().getSelectedNode(),\"Response\"),\"Create new Response Body\",\"body\"),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getParent(editorTools.aquireManager().getSelectedNode(),\"Response\" )!= null));\n    //     contextActions.addSimpleAction(\"Create new Property\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newNode(getParent(editorTools.aquireManager().getSelectedNode(),\"ObjectTypeDeclaration\"),\"Create new Property\",\"properties\"),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getParent(editorTools.aquireManager().getSelectedNode(),\"ObjectTypeDeclaration\" )!= null));\n    //\n    //     contextActions.addSimpleAction(\"Create new Body\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newNode(getMethodParent(editorTools.aquireManager().getSelectedNode()),\"Create new Body\",\"body\"),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getMethodParent(editorTools.aquireManager().getSelectedNode()) != null));\n    //     contextActions.addSimpleAction(\"Create new Response\", [\"Add new...\"], contextActions.TARGET_RAML_EDITOR_NODE,\n    //         () => dialogs.newNode(getMethodParent(editorTools.aquireManager().getSelectedNode()),\"Create new Response\",\"responses\",\"200\"),\n    //         () => editorTools.aquireManager() && editorTools.aquireManager().getCurrentEditor() && (getMethodParent(editorTools.aquireManager().getSelectedNode()) != null));\n}\nexports.registerQuickCommands = registerQuickCommands;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/quick-commands/code-commands.js\n// module id = 31\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// import suggestions = require('raml-suggestions');\nvar ramlServer = require(\"api-language-server\");\n// import sharedAstInitializerInterfaces = require('../shared-ast-initializer-interfaces');\nexports.selector = '.source.raml, .source.sjson, .source.syaml';\nexports.disableForSelector = '.text.html .comment';\nexports.filterSuggestions = true;\nexports.inclusionPriority = 1;\nexports.excludeLowerPriority = true;\n// export function initialize(astProvider : sharedAstInitializerInterfaces.IASTProvider) {\n//     suggestions.setDefaultASTProvider(<any>astProvider);\n// }\nfunction onDidInsertSuggestion(event) {\n    var offset = event.editor.getBuffer().characterIndexForPosition(event.triggerPosition);\n    if (event.suggestion.annotation) {\n        var txt = event.editor.getBuffer().getText();\n        for (var i = offset; i < txt.length; i++) {\n            var c = txt.charAt(i);\n            if (c == ')') {\n                offset = i + 1;\n                break;\n            }\n            if (c == '\\r' || c == '\\n') {\n                return;\n            }\n        }\n        var newPos = event.editor.getBuffer().positionForCharacterIndex(offset);\n        event.editor.getBuffer().insert(newPos, ':');\n        return;\n    }\n    if ((event.suggestion.replacementPrefix && event.suggestion.extra) || event.suggestion.extra == \"%\") {\n        var newPos = event.editor.getBuffer().positionForCharacterIndex(offset - event.suggestion.replacementPrefix.length);\n        event.editor.getBuffer().insert(newPos, event.suggestion.extra);\n    }\n    else {\n        //This actually looks exactly like a previous case but typing it as a separate case for now TODO\n        if (event.suggestion.extra == \" \") {\n            var newPos = event.editor.getBuffer().positionForCharacterIndex(offset);\n            event.editor.getBuffer().insert(newPos, event.suggestion.extra);\n        }\n        //FIXME\n        if (event.suggestion.extra == \" { \") {\n            var newPos = event.editor.getBuffer().positionForCharacterIndex(offset);\n            event.editor.getBuffer().insert(newPos, event.suggestion.extra);\n        }\n        if (event.suggestion.extra && event.suggestion.extra.indexOf(\"!include\") != -1) {\n            var newPos = event.editor.getBuffer().positionForCharacterIndex(offset);\n            event.editor.getBuffer().insert(newPos, event.suggestion.extra);\n        }\n    }\n}\nexports.onDidInsertSuggestion = onDidInsertSuggestion;\n// class FSProvider implements suggestions.IFSProvider {\n//     contentDirName(content: suggestions.IEditorStateProvider): string {\n//         var contentPath = content.getPath();\n//\n//         return path.dirname(contentPath);\n//     }\n//\n//     dirName(childPath: string): string {\n//         return path.dirname(childPath);\n//     }\n//\n//     exists(checkPath: string): boolean {\n//         return fs.existsSync(checkPath);\n//     }\n//\n//     resolve(contextPath: string, relativePath: string): string {\n//         return path.resolve(contextPath, relativePath);\n//     }\n//\n//     isDirectory(dirPath: string): boolean {\n//         var stat = fs.statSync(dirPath);\n//\n//         return stat && stat.isDirectory();\n//     }\n//\n//     readDir(dirPath: string): string[] {\n//         return fs.readdirSync(dirPath);\n//     }\n//\n//     existsAsync(path: string): Promise<boolean> {\n//         return new Promise(resolve => {\n//             fs.exists(path, (result) => {resolve(result)})\n//         });\n//     }\n//\n//     /**\n//      * Returns directory content list.\n//      * @param fullPath\n//      */\n//     readDirAsync(path: string): Promise<string[]> {\n//         return new Promise(resolve => {\n//             fs.readdir(path, (err, result) => {resolve(result)})\n//         });\n//     }\n//\n//     /**\n//      * Check whether the path points to a directory.\n//      * @param fullPath\n//      */\n//     isDirectoryAsync(path: string): Promise<boolean> {\n//         return new Promise(resolve => {\n//             fs.stat(path, (err, stats) => {resolve(stats.isDirectory())})\n//         });\n//     }\n// }\n// class AtomEditorState implements suggestions.IEditorStateProvider {\n//     textEditor: AtomCore.IEditor;\n//\n//     constructor(textEditor: AtomCore.IEditor,private request: AtomCompletionRequest) {\n//         this.textEditor = textEditor;\n//     }\n//\n//     getText(): string {\n//         return this.textEditor.getBuffer().getText();\n//     }\n//\n//     getPath(): string {\n//         return this.textEditor.getPath();\n//     }\n//\n//     getBaseName(): string {\n//         return path.basename(this.getPath());\n//     }\n//\n//     getOffset(): number {\n//         return this.request.editor.getBuffer().characterIndexForPosition(this.request.bufferPosition);\n//     }\n// }\nfunction getSuggestions(request) {\n    // var editorState = new AtomEditorState(request.editor, request);\n    var editor = request.editor;\n    var offset = editor.getBuffer().characterIndexForPosition(request.bufferPosition);\n    ramlServer.getNodeClientConnection().documentChanged({\n        uri: request.editor.getPath(),\n        text: editor.getText()\n    });\n    //return Promise.resolve([])\n    return ramlServer.getNodeClientConnection().getSuggestions(request.editor.getPath(), offset);\n    // return suggestions.suggest(editorState, new FSProvider());\n}\nexports.getSuggestions = getSuggestions;\n// export function getAstNode(request: AtomCompletionRequest,clearLastChar:boolean=true,allowNull:boolean=true):highlevel.IParseResult{\n//     var p=request.editor.getPath();\n//     var prj=rp.project.createProject(path.dirname(p));\n//     var offset=request.editor.getBuffer().characterIndexForPosition(request.bufferPosition);\n//     var text=request.editor.getBuffer().getText();\n//     var kind=search.determineCompletionKind(text,offset);\n//     if(kind==search.LocationKind.KEY_COMPLETION&&clearLastChar){\n//         var pos=offset>0?offset-1:offset;\n//         for (var i=pos;i>0;i--){\n//             var c=text[i];\n//             if (c=='\\r'||c=='\\n'){\n//                 break;\n//             }\n//             else{\n//                 if (c==' '||c=='\\t'){\n//                     ilevel++;\n//                 }\n//             }\n//         }\n//         var oldOfffset=offset;\n//\n//         text=text.substring(0,oldOfffset)+\"k:\"+text.substring(oldOfffset);\n//         //offset--;\n//     }\n//     var ilevel=0;\n//     var unit=prj.setCachedUnitContent(path.basename(p),text);\n//     var ast=<highlevel.IHighLevelNode>unit.highLevel();\n//     var cm=offset;\n//     for (var pm=offset-1;pm>=0;pm--){\n//         var c=text[pm];\n//         //if (c==' '||c=='\\t'||c=='\\r'||c=='\\n'){\n//         //    cm=pm-1;\n//         //    continue;\n//         //}\n//         if (c==' '||c=='\\t'){\n//             cm=pm-1;\n//             continue;\n//         }\n//         break;\n//     }\n//     var astNode=ast.findElementAtOffset(cm);\n//\n//     if (astNode&&astNode.parent()==null){\n//         if (ilevel>0&&kind==search.LocationKind.KEY_COMPLETION) {\n//             var attr=_.find(astNode.attrs(),attr=>{\n//                 var at=<any>attr;\n//                 return at.lowLevel().start()<offset&&at.lowLevel().end()>=offset&&!at.property().isKey()\n//             });\n//             if (!attr) {\n//                 if (allowNull) {\n//                     return null;\n//                 }\n//             }\n//         }\n//         //check if we are on correct indentation level\n//     }\n//     if (!allowNull&&!astNode){\n//         return ast;\n//     }\n//     return astNode;\n// }\n//\n// export function saveUnit(unit : lowLevel.ICompilationUnit) : void {\n//     var unitPath = unit.absolutePath()\n//     var unitText = unit.contents()\n//\n//     //first trying to find an opened text editor\n//     var openedEditor = _.find(atom.workspace.getTextEditors(), editor => {\n//         var editorPath = editor.getPath()\n//         return editorPath == unitPath\n//     })\n//\n//     if (openedEditor) {\n//         openedEditor.setText(unitText)\n//     } else {\n//         fs.writeFileSync(unitPath, unitText)\n//     }\n// }\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/suggestion/provider.js\n// module id = 32\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction doPatch() {\n    var oldRegister = document.registerElement;\n    document.registerElement = function (name, options) {\n        if (name === \"atom-pane-resize-handle\") {\n            var proto = options.prototype;\n            if (proto) {\n                var oldAttachedCallback = proto.attachedCallback;\n                proto.attachedCallback = function () {\n                    if (this.parentElement) {\n                        return oldAttachedCallback.apply(this, []);\n                    }\n                };\n            }\n            document.registerElement = oldRegister;\n        }\n        return oldRegister.apply(document, [name, options]);\n    };\n}\nexports.doPatch = doPatch;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdG9tL2NvcmUvcGF0Y2hFbGVtZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0lBRUksSUFBSSxXQUFXLEdBQVMsUUFBUyxDQUFDLGVBQWUsQ0FBQztJQUU1QyxRQUFTLENBQUMsZUFBZSxHQUFHLFVBQVUsSUFBSSxFQUFFLE9BQU87UUFFckQsRUFBRSxDQUFBLENBQUMsSUFBSSxLQUFLLHlCQUF5QixDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBRTlCLEVBQUUsQ0FBQSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ1AsSUFBSSxtQkFBbUIsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7Z0JBRWpELEtBQUssQ0FBQyxnQkFBZ0IsR0FBRztvQkFDckIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7d0JBQ3JCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO29CQUM5QyxDQUFDO2dCQUNMLENBQUMsQ0FBQTtZQUNMLENBQUM7WUFFSyxRQUFTLENBQUMsZUFBZSxHQUFHLFdBQVcsQ0FBQztRQUNsRCxDQUFDO1FBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFDdkQsQ0FBQyxDQUFBO0FBQ0wsQ0FBQztBQXhCRCwwQkF3QkMiLCJmaWxlIjoic3JjL2F0b20vY29yZS9wYXRjaEVsZW1lbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGRvUGF0Y2goKTogdm9pZCB7XG5cbiAgICB2YXIgb2xkUmVnaXN0ZXIgPSAoPGFueT5kb2N1bWVudCkucmVnaXN0ZXJFbGVtZW50O1xuXG4gICAgKDxhbnk+ZG9jdW1lbnQpLnJlZ2lzdGVyRWxlbWVudCA9IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zKSB7XG5cbiAgICAgICAgaWYobmFtZSA9PT0gXCJhdG9tLXBhbmUtcmVzaXplLWhhbmRsZVwiKSB7XG4gICAgICAgICAgICB2YXIgcHJvdG8gPSBvcHRpb25zLnByb3RvdHlwZTtcblxuICAgICAgICAgICAgaWYocHJvdG8pIHtcbiAgICAgICAgICAgICAgICB2YXIgb2xkQXR0YWNoZWRDYWxsYmFjayA9IHByb3RvLmF0dGFjaGVkQ2FsbGJhY2s7XG5cbiAgICAgICAgICAgICAgICBwcm90by5hdHRhY2hlZENhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2xkQXR0YWNoZWRDYWxsYmFjay5hcHBseSh0aGlzLCBbXSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgKDxhbnk+ZG9jdW1lbnQpLnJlZ2lzdGVyRWxlbWVudCA9IG9sZFJlZ2lzdGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9sZFJlZ2lzdGVyLmFwcGx5KGRvY3VtZW50LCBbbmFtZSwgb3B0aW9uc10pXG4gICAgfVxufSJdfQ==\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/core/patchElements.js\n// module id = 33\n// module chunks = 0","module.exports = require(\"atom\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"atom\"\n// module id = 34\n// module chunks = 0","\"use strict\";\n/// <reference path=\"../../../typings/main.d.ts\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\nexports.DYNAMIC_COMMAND_TAG = \"DYNAMIC_COMMAND_TAG\";\nvar commandIdToCommandInfo = {};\nvar tagToCommands = {};\n/**\n * Adds new managed command\n * @param selector - command CSS selector\n * @param id - command id. Must be unique across the managed commands.\n * @param callBack - called on command invocation\n * @param tag - optional action tag allowing to perform batch operations\n */\nfunction addCommand(selector, id, callBack, tag) {\n    if (_.find(listCommands(), function (commandId) {\n        if (commandId == id) {\n            return true;\n        }\n        return false;\n    })) {\n        return;\n    }\n    var disposable = atom.commands.add(selector, id, callBack);\n    var commandInfo = {\n        commandId: id,\n        tag: tag,\n        disposable: disposable\n    };\n    commandIdToCommandInfo[id] = commandInfo;\n    if (tag) {\n        var tagCommands = tagToCommands[tag];\n        if (!tagCommands) {\n            tagCommands = [];\n            tagToCommands[tag] = tagCommands;\n        }\n        tagCommands.push(commandInfo);\n    }\n}\nexports.addCommand = addCommand;\n/**\n * Deletes unmanaged command.\n * Generally, should not be called for managed actions, use the managed\n * version instead.\n * @param id - command id\n */\nfunction deleteUnmanagedCommand(id) {\n    atom.commands.registeredCommands[id] = null;\n    atom.commands.selectorBasedListenersByCommandName[id] = null;\n}\nexports.deleteUnmanagedCommand = deleteUnmanagedCommand;\n/**\n * Deletes managed action by id\n * @param id\n */\nfunction deleteManagedCommand(id) {\n    var commandInfo = commandIdToCommandInfo[id];\n    if (!commandInfo)\n        return;\n    commandInfo.disposable.dispose();\n    delete commandIdToCommandInfo[id];\n    if (commandInfo.tag) {\n        var tagCommands = tagToCommands[commandInfo.tag];\n        if (!tagCommands)\n            return;\n        var infoIndex = -1;\n        _.find(tagCommands, function (currentInfo, index) {\n            if (currentInfo.commandId == id) {\n                infoIndex = index;\n                return true;\n            }\n            return false;\n        });\n        if (infoIndex != -1)\n            tagCommands.splice(infoIndex, 1);\n    }\n}\nexports.deleteManagedCommand = deleteManagedCommand;\n/**\n * Deletes all managed commands tagged the the specific tag\n * @param tag\n */\nfunction deleteCommandsByTag(tag) {\n    var tagCommands = tagToCommands[tag];\n    if (!tagCommands)\n        return;\n    for (var index in tagCommands) {\n        var currentInfo = tagCommands[index];\n        currentInfo.disposable.dispose();\n        delete commandIdToCommandInfo[currentInfo.commandId];\n    }\n    delete tagToCommands[tag];\n}\nexports.deleteCommandsByTag = deleteCommandsByTag;\n/**\n * Lists all commands, both managed and unmanaged.\n * @returns {string[]}\n */\nfunction listCommands() {\n    var result = [];\n    for (var commandName in atom.commands.selectorBasedListenersByCommandName) {\n        result.push(commandName);\n    }\n    return result;\n}\nexports.listCommands = listCommands;\nvar initialized = false;\nfunction initialize() {\n    if (initialized)\n        return;\n    initialized = true;\n    try {\n        //forcing command palette to register itself\n        atom.packages.activatePackage('command-palette');\n        //registering our own listener to command palette's command\n        var listener = function () {\n            prePanelDisplay();\n        };\n        listener.commandManager = true;\n        atom.commands.add('atom-workspace', 'command-palette:toggle', listener);\n        ////and now swapping those listeners, so our one is called first\n        //var listenersArray = (<any>atom.commands.selectorBasedListenersByCommandName)\n        //    [\"command-palette:toggle\"]\n        //listenersArray.splice(0,0,listenersArray[1])\n        //listenersArray.splice(1, 1)\n        var listenersArray = atom.commands.selectorBasedListenersByCommandName[\"command-palette:toggle\"];\n        listenersArray.forEach(function (listener) {\n            var callback = listener.callback || listener.didDispatch;\n            if (callback && callback.commandManager) {\n                listener.sequenceNumber = 100500000;\n            }\n        });\n    }\n    catch (Error) {\n        console.error(Error.message);\n    }\n}\nexports.initialize = initialize;\nvar contributors = {};\nfunction registerContributor(contributor) {\n    contributors[contributor.id] = contributor;\n}\nexports.registerContributor = registerContributor;\nfunction prePanelDisplay() {\n    deleteCommandsByTag(exports.DYNAMIC_COMMAND_TAG);\n    for (var contributorId in contributors) {\n        var contributor = contributors[contributorId];\n        if (contributor.calculationStarted) {\n            contributor.calculationStarted();\n        }\n    }\n    for (var contributorId in contributors) {\n        var contributor = contributors[contributorId];\n        contributor.calculateItems().forEach(function (item) {\n            addCommand(item.selector, \"aml-workbench:\" + item.id, item.callBack, exports.DYNAMIC_COMMAND_TAG);\n        });\n    }\n    for (var contributorId in contributors) {\n        var contributor = contributors[contributorId];\n        if (contributor.calculationFinished) {\n            contributor.calculationFinished();\n        }\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/quick-commands/command-manager.js\n// module id = 35\n// module chunks = 0","\"use strict\";\n/// <reference path=\"../../../typings/main.d.ts\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\nvar commandManager = require(\"../quick-commands/command-manager\");\nvar contextMenuImpl = require(\"./contextMenuImpl\");\nvar originalShowForEvent;\n/**\n * Must be called first, at startup, before the module is used.\n */\nfunction initialize() {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    originalShowForEvent = atom.contextMenu.constructor.prototype.showForEvent;\n    atom.contextMenu.constructor.prototype.showForEvent = function (event) {\n        preMenuDisplay().then(function () {\n            originalShowForEvent.apply(atom.contextMenu, [event]);\n            postMenuDisplay();\n        });\n    };\n}\nexports.initialize = initialize;\nvar initialized = false;\nfunction preMenuDisplay() {\n    try {\n        return contextMenuImpl.calculateMenuItemsTree().then(function (treeRoots) {\n            var nodeSets = {};\n            cleanExistingSets();\n            commandManager.deleteCommandsByTag(commandManager.DYNAMIC_COMMAND_TAG);\n            treeRoots.forEach(function (node) {\n                var itemSet = nodeSets[node.selector];\n                if (!itemSet) {\n                    itemSet = findOrCreateItemSet(node.selector);\n                    nodeSets[node.selector] = itemSet;\n                }\n                var menuItem = constructAtomMenuItem(node);\n                itemSet.items.push(menuItem);\n            });\n        });\n    }\n    catch (Error) {\n        console.log(Error.message);\n    }\n}\nfunction constructAtomMenuItem(node) {\n    var result = {\n        label: node.name,\n    };\n    if (node.children.length > 0) {\n        result.submenu = [];\n    }\n    else {\n        var commandName = \"aml-workbench:\" + node.name;\n        var existingCommands = commandManager.listCommands();\n        commandManager.addCommand(node.selector, commandName, node.onClick, commandManager.DYNAMIC_COMMAND_TAG);\n        result.command = commandName;\n    }\n    node.children.forEach(function (child) {\n        var childMenuItem = constructAtomMenuItem(child);\n        result.submenu.push(childMenuItem);\n    });\n    return result;\n}\nvar DYNAMIC_SET_TAG = \"DYNAMIC_SET_TAG\";\n/**\n * Selector that were used at least once in the context menu\n * @type {Array}\n */\nvar usedSelectors = [];\nfunction findOrCreateItemSet(selector) {\n    var existingSet = _.find(atom.contextMenu.itemSets, function (currentSet) {\n        return currentSet.tag && currentSet.tag == DYNAMIC_SET_TAG;\n    });\n    if (!existingSet) {\n        existingSet = {\n            items: [],\n            selector: selector,\n            specificity: 11,\n            tag: DYNAMIC_SET_TAG\n        };\n        atom.contextMenu.itemSets.push(existingSet);\n        //saving used selector name\n        if (!_.find(usedSelectors, function (name) { return name == selector; })) {\n            usedSelectors.push(selector);\n        }\n    }\n    return existingSet;\n}\nfunction cleanExistingSets() {\n    var existingSets = _.filter(atom.contextMenu.itemSets, function (currentSet) {\n        return currentSet.tag && currentSet.tag == DYNAMIC_SET_TAG;\n    });\n    existingSets.forEach(function (existingSet) {\n        existingSet.items = [];\n    });\n}\nfunction postMenuDisplay() {\n    //commandManager.deleteCommandsByTag(commandManager.DYNAMIC_COMMAND_TAG)\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/atom/context-menu/contextMenu.js\n// module id = 36\n// module chunks = 0","module.exports = require(\"atom-package-deps\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"atom-package-deps\"\n// module id = 37\n// module chunks = 0"],"sourceRoot":""}